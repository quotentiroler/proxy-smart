name: Build & Test Backend

on:
  workflow_call:
    inputs:
      run_tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      fail_on_test_failure:
        description: "Whether to fail the workflow if tests fail"
        required: false
        type: boolean
        default: false
    outputs:
      backend_success:
        description: "Whether backend build was successful"
        value: ${{ jobs.backend.outputs.build_success }}
      backend_tests_success:
        description: "Whether backend tests were successful"
        value: ${{ jobs.backend.outputs.tests_success }}
    secrets:
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      OPENAI_API_KEY:
        required: false

jobs:
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.backend-build.outputs.BACKEND_BUILD_FAILED != 'true' || steps.backend-fix-retry.outputs.backend_build_success == 'true' }}
      tests_success: ${{ steps.test-backend.outputs.BACKEND_TEST_FAILED != 'true' || steps.backend-test-fix-retry.outputs.backend_build_success == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      # === BACKEND BUILD PHASE ===
      - name: Build Backend
        id: backend-build
        continue-on-error: true
        run: |
          echo "=== Building Backend ==="
          cd backend
          bun install
          if ! bun run build 2>&1 | tee ../backend-build.log; then
            echo "BACKEND_BUILD_FAILED=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "BACKEND_BUILD_FAILED=false" >> $GITHUB_OUTPUT
          fi

      - name: Debug Build Failure and Secrets
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true'
        run: |
          echo "üêõ Backend build failed, checking AI fix prerequisites..."
          echo "Build failed: ${{ steps.backend-build.outputs.BACKEND_BUILD_FAILED }}"
          echo "APP_ID available: ${{ secrets.APP_ID != '' }}"
          echo "APP_PRIVATE_KEY available: ${{ secrets.APP_PRIVATE_KEY != '' }}"
          echo "OPENAI_API_KEY available: ${{ secrets.OPENAI_API_KEY != '' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"

      - name: Authenticate as GitHub App (Backend Build)
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true'
        id: backend-app-auth
        continue-on-error: true
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Check GitHub App Authentication
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true'
        run: |
          if [ "${{ steps.backend-app-auth.outputs.token }}" != "" ]; then
            echo "‚úÖ GitHub App authentication successful"
          else
            echo "‚ùå GitHub App authentication failed - AI fixes will be skipped"
            echo "This could be due to:"
            echo "  - Missing APP_ID or APP_PRIVATE_KEY secrets"
            echo "  - Insufficient app permissions"
            echo "  - Running on a fork without access to secrets"
            echo "  - GitHub App not installed on this repository"
          fi

      - name: Setup Python for Backend AI fixes
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-app-auth.outputs.token
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies for Backend AI fixes
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-app-auth.outputs.token
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Propose Backend Fixes with Junior AI
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-app-auth.outputs.token
        id: backend-propose
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Junior AI proposing initial backend fixes..."
          python scripts/propose-backend-fixes.py backend-build.log > scripts/proposed-backend-fixes.json

      - name: Review Proposed Backend Fixes with Senior AI
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-app-auth.outputs.token
        id: backend-review
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üéì Senior AI reviewing proposed backend fixes..."
          python scripts/review-backend-fixes.py scripts/proposed-backend-fixes.json backend-build.log > scripts/reviewed-backend-fixes.json

      - name: Apply Reviewed Backend Fixes and retry build
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-app-auth.outputs.token
        id: backend-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.backend-app-auth.outputs.token }}
        run: |
          echo "üîß Applying reviewed backend fixes..."
          python scripts/apply-backend-fixes.py scripts/reviewed-backend-fixes.json

      - name: Fail if backend build failed and AI couldn't fix it
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED == 'true' && steps.backend-fix-retry.outputs.backend_build_success != 'true'
        run: |
          echo "‚ùå Backend build failed and AI fixes did not resolve the issues"
          exit 1

      # === BACKEND TEST PHASE ===
      - name: Test Backend
        if: ${{ inputs.run_tests }}
        continue-on-error: true
        id: test-backend
        run: |
          echo "Running backend tests..."
          cd backend
          if ! bun test 2>&1 | tee ../backend-test.log; then
            echo "BACKEND_TEST_FAILED=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "BACKEND_TEST_FAILED=false" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate as GitHub App (Backend Tests)
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true'
        id: backend-test-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Setup Python for Backend Test AI fixes
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-app-auth.outputs.token
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies for Backend Test AI fixes
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-app-auth.outputs.token
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Propose Backend Test Fixes with Junior AI
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-app-auth.outputs.token
        id: backend-test-propose
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "ü§ñ Junior AI proposing initial backend test fixes..."
          python scripts/propose-backend-fixes.py backend-test.log > scripts/proposed-backend-test-fixes.json

      - name: Review Proposed Backend Test Fixes with Senior AI
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-app-auth.outputs.token
        id: backend-test-review
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "üéì Senior AI reviewing proposed backend test fixes..."
          python scripts/review-backend-fixes.py scripts/proposed-backend-test-fixes.json backend-test.log > scripts/reviewed-backend-test-fixes.json

      - name: Apply Reviewed Backend Test Fixes and retry tests
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-app-auth.outputs.token
        id: backend-test-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.backend-test-app-auth.outputs.token }}
        run: |
          echo "üîß Applying reviewed backend test fixes..."
          python scripts/apply-backend-fixes.py scripts/reviewed-backend-test-fixes.json

      - name: Fail if backend tests failed and AI couldn't fix it
        if: steps.test-backend.outputs.BACKEND_TEST_FAILED == 'true' && steps.backend-test-fix-retry.outputs.backend_build_success != 'true'
        run: |
          if [ "${{ inputs.fail_on_test_failure }}" == "true" ]; then
            echo "‚ùå Backend tests failed and AI fixes did not resolve the issues. Failing workflow as requested."
            exit 1
          else
            echo "‚ö†Ô∏è Backend tests failed and AI fixes did not resolve the issues, but continuing workflow as requested."
          fi

      # === API GENERATION (only after successful backend build/test) ===
      - name: Authenticate as GitHub App for API Generation
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED != 'true' || steps.backend-fix-retry.outputs.backend_build_success == 'true'
        id: api-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Generate client APIs
        if: steps.backend-build.outputs.BACKEND_BUILD_FAILED != 'true' || steps.backend-fix-retry.outputs.backend_build_success == 'true'
        env:
          GITHUB_TOKEN: ${{ steps.api-app-auth.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "Generating client APIs..."
          bun install
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..
          bun run generate:ui:normalized
          
          # Configure git for potential commits
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are changes to commit (files should already be staged by generate:ui:normalized)
          if git diff --staged --quiet; then
            echo "No API client changes to commit"
          else
            git commit -m "ü§ñ Update client APIs from backend build process"
            git push
            echo "‚úÖ API client changes committed and pushed"
          fi

      - name: Upload backend build artifacts
        if: ${{ !startsWith(github.ref, 'refs/heads/dev/') }}
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifacts
          path: |
            backend/dist/
          retention-days: 1
