name: Version & Release

on:
  push:
    branches: [main, develop, test]
  pull_request:
    branches: [main, develop, test]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  version-check:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Check version consistency
        run: |
          echo "Checking version consistency across all package.json files..."
          
          # Get root version
          ROOT_VERSION=$(node -p "require('./package.json').version")
          echo "Root version: $ROOT_VERSION"
          
          # Check all package.json files
          INCONSISTENT=false
          
          for file in backend/package.json ui/package.json test/package.json; do
            if [ -f "$file" ]; then
              VERSION=$(node -p "require('./$file').version")
              echo "$file version: $VERSION"
              if [ "$VERSION" != "$ROOT_VERSION" ]; then
                echo "❌ Version mismatch in $file: $VERSION (expected: $ROOT_VERSION)"
                INCONSISTENT=true
              fi
            fi
          done
          
          if [ "$INCONSISTENT" = true ]; then
            echo "❌ Version inconsistency detected!"
            echo "Run 'npm run version:sync' to fix this."
            exit 1
          else
            echo "✅ All versions are consistent!"
          fi

  alpha-release:
    name: Create Alpha Release (develop)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Determine version for alpha
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Remove any existing suffix to get the base version
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-alpha.*//g' | sed 's/-beta.*//g')
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Generate build number based on timestamp and commit hash
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # For alpha, DO NOT increment version - just add alpha suffix with build number
          NEW_VERSION="$BASE_VERSION-alpha.$BUILD_NUMBER+$SHORT_SHA"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Alpha version will be: $NEW_VERSION (no version increment)"
          
      - name: Update versions (alpha build)
        run: |
          # Set the new version in all packages
          node scripts/version.js set ${{ steps.version.outputs.new_version }}
          # Sync to ensure all packages are consistent
          npm run version:sync
          # Verify versions are now consistent
          echo "Verifying version consistency:"
          for file in package.json backend/package.json ui/package.json test/package.json; do
            if [ -f "$file" ]; then
              VERSION=$(node -p "require('./$file').version")
              echo "$file: $VERSION"
            fi
          done
          
      - name: Update README version badge
        run: |
          # Update version badge in README.md
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+\(-[a-zA-Z0-9\.-]*\)\?-blue/version-${{ steps.version.outputs.new_version }}-blue/g" README.md
          echo "Updated README.md version badge to ${{ steps.version.outputs.new_version }}"
          
      - name: Build and test
        run: |
          # Build backend
          echo "Building backend..."
          cd backend
          bun install
          bun run build
          cd ..
          
          # Build UI  
          echo "Building UI..."
          cd ui
          bun install
          bun run build
          cd ..
          
          # Install test dependencies
          echo "Installing test dependencies..."
          cd test
          bun install
          cd ..
          
      - name: Commit version updates
        run: |
          git add package.json backend/package.json ui/package.json test/package.json README.md
          git commit -m "chore: alpha build ${{ steps.version.outputs.new_version }} [skip ci]"
          git push origin develop

  beta-release:
    name: Create Beta Release (test)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Determine version for beta
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Remove any existing suffix to get the base version
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-alpha.*//g' | sed 's/-beta.*//g')
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Generate build number based on timestamp and commit hash
          BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # For beta, DO NOT increment version - just add beta suffix with build number
          NEW_VERSION="$BASE_VERSION-beta.$BUILD_NUMBER+$SHORT_SHA"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Beta version will be: $NEW_VERSION (no version increment)"
          
      - name: Update versions (beta build)
        run: |
          # Set the new version in all packages
          node scripts/version.js set ${{ steps.version.outputs.new_version }}
          # Sync to ensure all packages are consistent
          npm run version:sync
          # Verify versions are now consistent
          echo "Verifying version consistency:"
          for file in package.json backend/package.json ui/package.json test/package.json; do
            if [ -f "$file" ]; then
              VERSION=$(node -p "require('./$file').version")
              echo "$file: $VERSION"
            fi
          done
          
      - name: Update README version badge
        run: |
          # Update version badge in README.md
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+\(-[a-zA-Z0-9\.-]*\)\?-blue/version-${{ steps.version.outputs.new_version }}-blue/g" README.md
          echo "Updated README.md version badge to ${{ steps.version.outputs.new_version }}"
          
      - name: Build and test
        run: |
          # Build backend
          echo "Building backend..."
          cd backend
          bun install
          bun run build
          cd ..
          
          # Build UI
          echo "Building UI..."
          cd ui
          bun install
          bun run build
          cd ..
          
          # Run tests
          echo "Running tests..."
          cd test
          bun install
          bun run test || echo "Tests failed, but continuing with release"
          cd ..
          
      - name: Commit version updates
        run: |
          git add package.json backend/package.json ui/package.json test/package.json README.md
          git commit -m "chore: beta build ${{ steps.version.outputs.new_version }} [skip ci]"
          git push origin test

  release:
    name: Create Production Release (main)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Determine version increment
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          # Remove any existing suffix for production release
          BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-alpha.*//g' | sed 's/-beta.*//g')
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.custom_version }}" != "" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
            echo "Incrementing $VERSION_TYPE version from $BASE_VERSION"
            
            # Parse version parts
            IFS='.' read -r major minor patch <<< "$BASE_VERSION"
            
            case $VERSION_TYPE in
              major)
                NEW_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="$major.$((minor + 1)).0"
                ;;
              patch)
                NEW_VERSION="$major.$minor.$((patch + 1))"
                ;;
            esac
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
          
      - name: Update versions (production release)
        run: |
          # Set the new version in all packages
          node scripts/version.js set ${{ steps.version.outputs.new_version }}
          # Sync to ensure all packages are consistent
          npm run version:sync
          # Verify versions are now consistent
          echo "Verifying version consistency:"
          for file in package.json backend/package.json ui/package.json test/package.json; do
            if [ -f "$file" ]; then
              VERSION=$(node -p "require('./$file').version")
              echo "$file: $VERSION"
            fi
          done
          
      - name: Update README version badge
        run: |
          # Update version badge in README.md
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+\(-[a-zA-Z0-9\.-]*\)\?-blue/version-${{ steps.version.outputs.new_version }}-blue/g" README.md
          echo "Updated README.md version badge to ${{ steps.version.outputs.new_version }}"
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Getting commits since $LAST_TAG"
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Create changelog
          cat > CHANGELOG.md << EOF
          # Changelog
          
          ## [v${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)
          
          ### Changes
          $COMMITS
          
          EOF
          
          # Save changelog for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "### Changes in v${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Build all projects
        run: |
          echo "Building all projects..."
          
          # Build backend
          cd backend
          bun install
          bun run build
          cd ..
          
          # Build UI
          cd ui
          bun install
          bun run build
          cd ..
          
          # Install test dependencies
          cd test
          bun install
          cd ..
          
      - name: Run tests
        run: |
          echo "Running tests..."
          cd test
          bun run test || echo "Tests failed, but continuing with release"
          cd ..
          
      - name: Commit version updates
        run: |
          git add package.json backend/package.json ui/package.json test/package.json CHANGELOG.md README.md
          git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
          git push origin main
          
      - name: Create and push tag
        run: |
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.new_version }}
        run: |
          # Create release notes content
          cat > release_notes.md << 'EOF'
          # SMART on FHIR Proxy v${{ steps.version.outputs.new_version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Components
          - **Backend**: SMART on FHIR Proxy Server
          - **UI**: Administration Interface  
          - **Test Suite**: Comprehensive FHIR compliance tests
          
          ## Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd smart-on-fhir-proxy
          git checkout v${{ steps.version.outputs.new_version }}
          ```
          
          See the [README](README.md) for setup instructions.
          
          ---
          
          ## Auto-generated Release Notes
          EOF
          
          # Create release with GitHub CLI
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="SMART on FHIR Proxy $tag" \
              --notes-file release_notes.md \
              --generate-notes
