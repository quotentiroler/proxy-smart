name: Release Orchestrator

on:
  workflow_call:
    inputs:
      release_type:
        description: "Type of release (alpha, beta, RELEASE)"
        required: true
        type: string
      source_branch:
        description: "Source branch for the release"
        required: true
        type: string
      target_branch:
        description: "Target branch to push changes to"
        required: true
        type: string
      should_bump_version:
        description: "Whether to bump the version number"
        required: false
        type: boolean
        default: false
      is_prerelease:
        description: "Whether this is a prerelease"
        required: false
        type: boolean
        default: false
      commit_limit:
        description: "Number of commits to check for changelog"
        required: false
        type: number
        default: 10
    secrets:
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true
      OPENAI_API_KEY:
        required: false

jobs:
  # Get commits for changelog
  get-commits:
    name: Get Commits for Changelog
    runs-on: ubuntu-latest
    outputs:
      commit_shas: ${{ steps.commits.outputs.commit_shas }}
    
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Get commit SHAs for changelog
        id: commits
        run: |
          # Find the PR that was merged to trigger this push or get recent commits
          echo "Looking for commits to include in changelog..."

          # Try to find PR number from the push event or recent merge commit
          RECENT_COMMIT_MSG=$(git log --format="%s" -n 1)
          PR_NUM=""
          
          if echo "$RECENT_COMMIT_MSG" | grep -E "Merge pull request #[0-9]+" > /dev/null; then
            PR_NUM=$(echo "$RECENT_COMMIT_MSG" | grep -oE "#[0-9]+" | sed 's/#//')
            echo "Found PR number from merge commit: $PR_NUM"
          fi

          if [ -n "$PR_NUM" ]; then
            # Get commits from the merged PR
            COMMITS=$(gh pr view "$PR_NUM" --json commits --jq '.commits[].oid' | tr '\n' ',' | sed 's/,$//')
            echo "Found commits in PR #$PR_NUM: $COMMITS"
          else
            # Fall back to recent commits
            RAW_COMMITS=$(git log --format="%H" -n ${{ inputs.commit_limit }} | tr '\n' ',' | sed 's/,$//')
            echo "Using recent ${{ inputs.commit_limit }} commits: $RAW_COMMITS"
            # Exclude our own release commits (messages containing 'release')
            FILTERED=$(echo "$RAW_COMMITS" | tr ',' '\n' | while read sha; do
              msg=$(git log --format="%s" -n 1 "$sha");
              echo "$msg" | grep -Eiq 'release'; if [ $? -ne 0 ]; then echo "$sha"; fi
            done | tr '\n' ',' | sed 's/,$//')
            COMMITS=$FILTERED
            echo "Filtered commits: $COMMITS"
          fi

          echo "commit_shas=$COMMITS" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}

  # Manage version
  version:
    name: Version Management
    uses: ./.github/workflows/version-operations.yml
    with:
      operation: 'update'
      release_type: ${{ inputs.release_type }}
      should_bump_version: ${{ inputs.should_bump_version }}
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  # Generate changelog
  changelog:
    name: Generate Changelog
    needs: [get-commits, version]
    uses: ./.github/workflows/generate-changelog.yml
    with:
      commit_shas: ${{ needs.get-commits.outputs.commit_shas }}
      release_type: ${{ inputs.release_type }}
      version: ${{ needs.version.outputs.new_version }}
    secrets:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Generate API clients with updated version
  generate-api-clients:
    name: Generate API Clients
    needs: [version]
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Pull latest changes
        run: |
          git pull origin ${{ inputs.target_branch }}

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install dependencies
        run: |
          bun install
          cd backend && bun install
          cd ../ui && bun install

      - name: Generate API clients
        run: |
          bun run generate:ui:normalized

      - name: Commit generated API clients
        run: |
          # Check if there are changes to commit (files should already be staged by generate:ui:normalized)
          if git diff --staged --quiet; then
            echo "No API client changes to commit"
          else
            git commit -m "ðŸ¤– Update API clients for v${{ needs.version.outputs.new_version }}"
            git push origin ${{ inputs.target_branch }}
          fi


  # Build and test
  build:
    name: Build and Test
    needs: [version, generate-api-clients]
    uses: ./.github/workflows/build-and-test.yml
    with:
      run_tests: true
      fail_on_test_failure: false

  # Create GitHub release
  release:
    name: Create GitHub Release
    needs: [version, changelog, generate-api-clients, build]
    uses: ./.github/workflows/create-release.yml
    with:
      release_type: ${{ inputs.release_type }}
      version: ${{ needs.version.outputs.new_version }}
      changelog: ${{ needs.changelog.outputs.changelog }}
      source_branch: ${{ inputs.source_branch }}
      is_prerelease: ${{ inputs.is_prerelease }}
      build_number: ${{ needs.version.outputs.build_number }}
      short_sha: ${{ needs.version.outputs.short_sha }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
