name: Build

on:
  workflow_call:
    inputs:
      run_tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      fail_on_test_failure:
        description: "Whether to fail the workflow if tests fail"
        required: false
        type: boolean
        default: false
    secrets:
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      OPENAI_API_KEY:
        required: false

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      - name: Generate client APIs
        run: |
          echo "Generating client APIs..."
          bun install
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..
          bun run generate:ui:normalized
          
          # Configure git for potential commits
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Check if there are changes to commit (files should already be staged by generate:ui:normalized)
          if git diff --staged --quiet; then
            echo "No API client changes to commit"
          else
            git commit -m "🤖 Update client APIs from build process"
            git push
            echo "✅ API client changes committed and pushed"
          fi

      - name: Combined Build & Log
        id: build
        run: |
          set -o pipefail
          (
            echo "=== Building backend ==="
            cd backend && bun install && bun run build && cd ..
            echo "=== Building UI ==="
            cd ui && bun install && bun run build && cd ..
          ) 2>&1 | tee build.log

      - name: Authenticate as GitHub App
        if: failure()
        id: app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Setup Python for AI fixes
        if: failure() && steps.app-auth.outputs.token
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies for AI fixes
        if: failure() && steps.app-auth.outputs.token
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Auto-fix and retry build (single attempt)
        if: failure() && steps.app-auth.outputs.token
        id: auto-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.app-auth.outputs.token }}
        run: |
          # Run the Python AI fix script
          python scripts/apply-ai-fixes.py build.log

      - name: Mark workflow as successful if AI fixes worked
        if: steps.auto-fix-retry.outputs.build_success == 'true'
        run: |
          echo "✅ Build was successfully fixed by AI - marking workflow as successful"
          exit 0

      - name: Upload build artifacts
        if: (success() || steps.auto-fix-retry.outputs.build_success == 'true') && !startsWith(github.ref, 'refs/heads/dev/')
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            ui/dist/
          retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.run_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: |
          echo "Installing dependencies for testing..."
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..

      - name: Test UI
        continue-on-error: true
        timeout-minutes: 5
        id: test-ui
        env:
          CI: true
        run: |
          echo "Running UI tests (quick mode for CI)..."
          cd ui
          # Skip Playwright tests in CI for now since they're too slow
          echo "✅ UI tests completed (skipped), TODO later"
          cd ..

      - name: Test backend
        continue-on-error: true
        id: test-backend
        run: |
          echo "Running backend tests..."
          cd backend
          echo "⏭️ Skipping backend tests in CI for now, TODO later"
          cd ..

      - name: Auto-fix test failures (if any)
        if: steps.test-ui.outcome == 'failure' || steps.test-backend.outcome == 'failure'
        id: auto-fix-tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Auto-fix attempt after test failures"
          
          # Collect test error logs (when we have real tests)
          echo "📝 Analyzing test errors with AI (placeholder for now)..."
          echo "Test error analysis would go here when tests are implemented"
          
          # For now, just indicate no fixes needed since tests are skipped
          echo "ℹ️ No test fixes needed - tests are currently skipped"
          echo "test_fix_success=false" >> $GITHUB_OUTPUT

      - name: Retry tests after fixes
        if: steps.auto-fix-tests.outputs.test_fix_success == 'true'
        run: |
          echo "🔄 Retrying tests after AI fixes..."
          
          echo "Running UI tests (retry)..."
          cd ui
          echo "✅ UI tests retry completed (skipped), TODO later"
          cd ..
          
          echo "Running backend tests (retry)..."
          cd backend
          echo "⏭️ Backend tests retry completed (skipped), TODO later"
          cd ..
