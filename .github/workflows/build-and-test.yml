name: Build

on:
  workflow_call:
    inputs:
      run_tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      fail_on_test_failure:
        description: "Whether to fail the workflow if tests fail"
        required: false
        type: boolean
        default: false
    secrets:
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      OPENAI_API_KEY:
        required: false

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      - name: Combined Build & Log
        id: build
        run: |
          set -o pipefail
          (
            echo "=== Building backend ==="
            cd backend && bun install && bun run build && cd ..
            echo "=== Building UI ==="
            cd ui && bun install && bun run build && cd ..
          ) 2>&1 | tee build.log

      - name: Authenticate as GitHub App
        if: failure()
        id: app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Auto-fix and retry build (up to 3 attempts)
        if: failure() && steps.app-auth.outputs.token
        id: auto-fix-retry
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.app-auth.outputs.token }}
        run: |
          # Install OpenAI Codex CLI
          npm install -g @openai/codex
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          BUILD_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$BUILD_SUCCESS" = "false" ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "üîÑ Auto-fix attempt $RETRY_COUNT of $MAX_RETRIES"
            
            # Get the latest build log (either from initial build or previous retry)
            if [ $RETRY_COUNT -eq 1 ]; then
              LOG_FILE="build.log"
            else
              LOG_FILE="retry-build-$((RETRY_COUNT - 1)).log"
            fi
            
            # Use OpenAI Codex CLI in full-auto mode for automated fixing
            echo "üìù Analyzing build errors with OpenAI Codex..."
            echo "Build failed with the following errors (attempt $RETRY_COUNT/$MAX_RETRIES):" > codex-prompt.txt
            echo "" >> codex-prompt.txt
            sed -n '1,2000p' "$LOG_FILE" >> codex-prompt.txt
            echo "" >> codex-prompt.txt
            echo "Please analyze these build errors and fix them. Focus on:" >> codex-prompt.txt
            echo "1. TypeScript compilation errors" >> codex-prompt.txt
            echo "2. Missing dependencies or imports" >> codex-prompt.txt
            echo "3. Configuration issues" >> codex-prompt.txt
            echo "4. Syntax errors" >> codex-prompt.txt
            
            # Run Codex in full-auto mode to automatically fix issues
            export OPENAI_API_KEY="$OPENAI_API_KEY"
            timeout 300 codex --full-auto < codex-prompt.txt || echo "Codex timeout or completed"

            # Commit & push if there are changes
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            if [ -n "$(git status --porcelain)" ]; then
              git add .
              git commit -m "chore: auto-fix build errors (attempt $RETRY_COUNT/$MAX_RETRIES) via OpenAI [skip ci]"
              git push
              echo "‚úÖ Fixes applied and pushed (attempt $RETRY_COUNT)"
            else
              echo "‚ö†Ô∏è No fixes applied in attempt $RETRY_COUNT"
            fi
            
            # Retry the build
            echo "ÔøΩ Retrying build (attempt $RETRY_COUNT)..."
            set +e  # Don't exit on error
            (
              echo "=== Retrying Backend Build (attempt $RETRY_COUNT) ==="
              cd backend && bun install && bun run build && cd ..
              echo "=== Retrying UI Build (attempt $RETRY_COUNT) ==="
              cd ui && bun install && bun run build && cd ..
            ) 2>&1 | tee retry-build-$RETRY_COUNT.log
            
            BUILD_EXIT_CODE=$?
            set -e  # Re-enable exit on error
            
            if [ $BUILD_EXIT_CODE -eq 0 ]; then
              BUILD_SUCCESS=true
              echo "‚úÖ Build succeeded on attempt $RETRY_COUNT!"
              echo "build_success=true" >> $GITHUB_OUTPUT
              echo "attempts_used=$RETRY_COUNT" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå Build failed on attempt $RETRY_COUNT"
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "üí• All $MAX_RETRIES attempts failed. Giving up."
                echo "build_success=false" >> $GITHUB_OUTPUT
                echo "attempts_used=$RETRY_COUNT" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          done

      - name: Upload build artifacts
        if: success() || steps.auto-fix-retry.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            ui/dist/
          retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.run_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: |
          echo "Installing dependencies for testing..."
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..

      - name: Test UI
        continue-on-error: ${{ !inputs.fail_on_test_failure }}
        timeout-minutes: 5
        env:
          CI: true
        run: |
          echo "Running UI tests (quick mode for CI)..."
          cd ui
          # Skip Playwright tests in CI for now since they're too slow
          echo "‚úÖ UI tests completed (skipped), TODO later"
          cd ..

      - name: Test backend
        continue-on-error: ${{ !inputs.fail_on_test_failure }}
        run: |
          echo "Running backend tests..."
          cd backend
          echo "‚è≠Ô∏è Skipping backend tests in CI for no, TODO later"
