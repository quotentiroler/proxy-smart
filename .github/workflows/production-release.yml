name: Production Release

on:
  push:
    branches: [main]
    paths-ignore:
      - "ui/src/lib/api-client/**"
      - ".github/workflows/**"
  workflow_dispatch:

# Prevent concurrent production releases
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

jobs:
  # Validate required secrets early
  validate-secrets:
    name: Validate Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout for action access
        uses: actions/checkout@v4
        
      - name: Validate secrets
        uses: ./.github/actions/validate-secrets
        with:
          required-secrets: 'APP_ID,APP_PRIVATE_KEY,OPENAI_API_KEY'
          app-id: ${{ secrets.APP_ID }}
          app-private-key: ${{ secrets.APP_PRIVATE_KEY }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}

  check-changes:
    name: Check if release is needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check changed files
        id: check
        run: |
          # Get list of changed files in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Define documentation-only patterns
          DOC_PATTERNS="README\.md|\.md$|docs/|LICENSE|CHANGELOG"

          # Check if only documentation files were changed
          NON_DOC_CHANGES=$(echo "$CHANGED_FILES" | grep -vE "$DOC_PATTERNS" || true)

          if [ -z "$NON_DOC_CHANGES" ]; then
            echo "Only documentation files changed, skipping production release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Code changes detected, proceeding with production release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  # Production releases run full security and compliance testing
  production-testing:
    name: Production Testing (Security & Compliance)
    needs: [validate-secrets, check-changes]
    if: ${{ needs.check-changes.outputs.should_release == 'true' && !contains(github.event.head_commit.message, '🔄 Update version') && !contains(github.event.head_commit.message, '🤖 Update API clients') && !contains(github.event.head_commit.message, 'Production release') && !contains(github.event.head_commit.message, '🎉') }}
    uses: ./.github/orchestrations/testing-strategy.yml
    with:
      test_stage: "production"
      test_scope: "all"

  production-release:
    name: Production Release
    needs: [validate-secrets, check-changes, production-testing]
    # Only run if the last commit is not a release commit AND there are non-documentation changes
    if: ${{ needs.check-changes.outputs.should_release == 'true' && !contains(github.event.head_commit.message, '🔄 Update version') && !contains(github.event.head_commit.message, '🤖 Update API clients') && !contains(github.event.head_commit.message, 'Production release') && !contains(github.event.head_commit.message, '🎉') }}
    uses: ./.github/orchestrations/release-orchestrator.yml
    with:
      release_type: "RELEASE"
      source_branch: "main"
      target_branch: "main"
      should_bump_version: false
      is_prerelease: false
      commit_limit: 20
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [production-testing, production-release]
    if: failure()
    steps:
      - name: Checkout for action access
        uses: actions/checkout@v4
        
      - name: Notify Discord on failure
        uses: ./.github/actions/discord-notify
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🚨 Production Release Failed"
          message: "Critical: Production release workflow failed on main branch"
          color: "ff0000"
        continue-on-error: true

  # Revert changes if production release fails
  revert-on-failure:
    name: Revert Changes on Failure
    runs-on: ubuntu-latest
    needs: [production-release]
    if: ${{ failure() && needs.production-release.result == 'failure' }}

    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Revert and recreate PR
        id: revert-action
        uses: ./.github/actions/revert-and-recreate-pr@main
        with:
          target-branch: "main"
          source-branch: "test"
          workflow-url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          failure-context: "Production Releasse"
          github-token: ${{ steps.generate_token.outputs.token }}
          commits-to-check: "10"

      - name: Handle revert failure
        if: steps.revert-action.outputs.push-success == 'false'
        run: |
          echo "⚠️ Automatic revert failed. This is likely due to:"
          echo "   1. GitHub App missing 'workflows' permission"
          echo "   2. Repository branch protection rules"
          echo "   3. Workflow files being affected by the revert"
          echo ""
          echo "🔧 To fix this:"
          echo "   1. Check GitHub App permissions in repository settings"
          echo "   2. Ensure the app has 'Actions' > 'Write' permission"
          echo "   3. Consider temporarily relaxing branch protection rules"
          echo "   4. Or manually revert to commit: ${{ steps.revert-action.outputs.reverted-to }}"
          echo ""
          echo "📋 An issue has been created with detailed instructions."
          exit 1
