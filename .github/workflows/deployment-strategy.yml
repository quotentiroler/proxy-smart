name: Deployment Strategy

on:
  workflow_call:
    inputs:
      deployment_stage:
        description: "Deployment stage: alpha, beta, or production"
        required: true
        type: string
      app_version:
        description: "Version of the application to deploy"
        required: true
        type: string
      source_branch:
        description: "Source branch for deployment"
        required: true
        type: string
    outputs:
      fhir_server_url:
        description: "FHIR server URL after deployment"
        value: ${{ jobs.output-deployment-urls.outputs.fhir_server_url }}
      keycloak_url:
        description: "Keycloak URL after deployment"
        value: ${{ jobs.output-deployment-urls.outputs.keycloak_url }}
      deployment_status:
        description: "Status of the deployment"
        value: ${{ jobs.output-deployment-urls.outputs.deployment_status }}
      deployment_target:
        description: "Target platform where app was deployed"
        value: ${{ jobs.output-deployment-urls.outputs.deployment_target }}
    secrets:
      FLY_API_TOKEN:
        required: false
      VPS_SSH_KEY:
        required: false
      VPS_HOST:
        required: false
      VPS_USER:
        required: false

jobs:
  deploy-alpha:
    name: Deploy Alpha (Local)
    runs-on: ubuntu-latest
    if: inputs.deployment_stage == 'alpha'
    outputs:
      fhir_server_url: ${{ steps.deploy.outputs.fhir_server_url }}
      keycloak_url: ${{ steps.deploy.outputs.keycloak_url }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      deployment_target: ${{ steps.deploy.outputs.deployment_target }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_branch }}
      
      - name: Setup Bun
        uses: ./.github/actions/setup-bun-version
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Deploy Alpha (Local with Docker)
        id: deploy
        run: |
          echo "🚀 Deploying Alpha version ${{ inputs.app_version }} locally using Docker..."
          
          # Start services using Docker (similar to testing but for deployment)
          echo "🐳 Starting PostgreSQL..."
          docker run -d \
            --name alpha-postgres \
            -e POSTGRES_DB=keycloak \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -p 5432:5432 \
            postgres:16-alpine
          
          # Wait for PostgreSQL
          echo "⏳ Waiting for PostgreSQL..."
          timeout 60s bash -c 'until docker exec alpha-postgres pg_isready -U postgres; do sleep 2; done'
          
          echo "🔐 Starting Keycloak..."
          docker run -d \
            --name alpha-keycloak \
            --link alpha-postgres:postgres \
            -e KC_BOOTSTRAP_ADMIN_USERNAME=admin \
            -e KC_BOOTSTRAP_ADMIN_PASSWORD=admin \
            -e KC_HTTP_ENABLED=true \
            -e KC_HOSTNAME_STRICT=false \
            -e KC_DB=postgres \
            -e KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak \
            -e KC_DB_USERNAME=postgres \
            -e KC_DB_PASSWORD=postgres \
            -p 8080:8080 \
            -v "$(pwd)/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro" \
            quay.io/keycloak/keycloak:26.2 start-dev --import-realm
          
          # Wait for Keycloak
          echo "⏳ Waiting for Keycloak to be ready..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Checking Keycloak health... (attempt $attempt/$max_attempts)"
            
            # Just check if the port is responding and returns any HTTP response
            if curl -s --connect-timeout 5 --max-time 10 http://localhost:8080 >/dev/null 2>&1; then
              echo "✅ Keycloak is responding on port 8080"
              # Give it a few more seconds to fully initialize
              sleep 5
              break
            else
              echo "⏳ Keycloak not responding yet, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Keycloak failed to start within timeout"
            echo "📋 Checking Keycloak container logs..."
            docker logs alpha-keycloak --tail 50
            
            # Set failure outputs
            echo "fhir_server_url=" >> $GITHUB_OUTPUT
            echo "keycloak_url=" >> $GITHUB_OUTPUT
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            echo "deployment_target=local" >> $GITHUB_OUTPUT
            
            exit 1
          fi
          
          # Build and start the backend
          echo "🏗️ Building and starting FHIR backend..."
          cd backend
          bun install
          bun run build
          
          # Set environment variables for backend (all required variables)
          export NODE_ENV="alpha"
          export BASE_URL="http://localhost:3001"
          export PORT=3001
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/keycloak"
          export KEYCLOAK_BASE_URL="http://localhost:8080"
          export KEYCLOAK_REALM="proxy-smart"
          export FHIR_SERVER_BASE="https://hapi.fhir.org/baseR4"  # Use public FHIR server for alpha testing
          
          # Start the FHIR proxy server in background with proper logging
          echo "🚀 Starting backend server with the following config:"
          echo "  BASE_URL: $BASE_URL"
          echo "  PORT: $PORT"
          echo "  KEYCLOAK_BASE_URL: $KEYCLOAK_BASE_URL"
          echo "  FHIR_SERVER_BASE: $FHIR_SERVER_BASE"
          
          # Start backend and capture output
          nohup bun run dist/index.js > ../backend.log 2>&1 &
          echo $! > ../backend.pid
          cd ..
          
          # Wait for backend to be ready
          echo "⏳ Waiting for FHIR backend..."
          max_backend_attempts=24  # 2 minutes with 5-second intervals
          backend_attempt=1
          
          while [ $backend_attempt -le $max_backend_attempts ]; do
            echo "🔄 Checking backend connectivity... (attempt $backend_attempt/$max_backend_attempts)"
            
            # First check if the port is responding at all
            if curl -s --connect-timeout 3 --max-time 5 http://localhost:3001 >/dev/null 2>&1; then
              echo "✅ Backend port is responding, checking health endpoint..."
              
              # Try the simpler status endpoint first (may be more forgiving)
              status_response=$(curl -s --connect-timeout 3 --max-time 5 http://localhost:3001/status 2>&1)
              status_exit_code=$?
              
              if [ $status_exit_code -eq 0 ]; then
                echo "✅ FHIR backend status check passed"
                echo "Status response: $status_response"
                break
              else
                echo "⚠️ Status endpoint failed, trying health endpoint..."
                
                # Now try the health endpoint
                health_response=$(curl -s --connect-timeout 3 --max-time 5 http://localhost:3001/health 2>&1)
                health_exit_code=$?
                
                if [ $health_exit_code -eq 0 ]; then
                  echo "✅ FHIR backend health check passed"
                  echo "Health response: $health_response"
                  break
                else
                  echo "⚠️ Health endpoint also failed (exit code: $health_exit_code)"
                  echo "Health response: $health_response"
                  echo "Status response: $status_response"
                  echo "⏳ Backend may still be initializing, waiting..."
                fi
              fi
            else
              echo "⏳ Backend port not responding yet, waiting..."
              
              # Check if process is still running
              if [ -f backend.pid ]; then
                backend_pid=$(cat backend.pid)
                if ! ps -p $backend_pid > /dev/null 2>&1; then
                  echo "❌ Backend process has died! PID: $backend_pid"
                  echo "📋 Backend logs:"
                  cat backend.log || echo "No backend.log file found"
                  
                  # Set failure outputs
                  echo "fhir_server_url=" >> $GITHUB_OUTPUT
                  echo "keycloak_url=http://localhost:8080" >> $GITHUB_OUTPUT
                  echo "deployment_status=failed" >> $GITHUB_OUTPUT
                  echo "deployment_target=local" >> $GITHUB_OUTPUT
                  
                  exit 1
                fi
              fi
              
              sleep 5
              backend_attempt=$((backend_attempt + 1))
            fi
          done
          
          if [ $backend_attempt -gt $max_backend_attempts ]; then
            echo "❌ FHIR backend failed to start within timeout"
            echo "📋 Checking backend logs..."
            if [ -f backend.pid ]; then
              echo "Backend PID: $(cat backend.pid)"
              ps aux | grep $(cat backend.pid) || echo "Backend process not running"
            fi
            echo "📋 Backend logs:"
            cat backend.log || echo "No backend.log file found"
            
            # Set failure outputs
            echo "fhir_server_url=" >> $GITHUB_OUTPUT
            echo "keycloak_url=http://localhost:8080" >> $GITHUB_OUTPUT
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            echo "deployment_target=local" >> $GITHUB_OUTPUT
            
            exit 1
          fi
          
          # Set outputs
          echo "fhir_server_url=http://localhost:3001" >> $GITHUB_OUTPUT
          echo "keycloak_url=http://localhost:8080" >> $GITHUB_OUTPUT
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "deployment_target=local" >> $GITHUB_OUTPUT
          
          echo "✅ Alpha deployment completed successfully"
          echo "📍 FHIR Server: http://localhost:3001"
          echo "📍 Keycloak: http://localhost:8080"
          echo "🔍 Backend PID stored in backend.pid for testing phase"

  deploy-beta:
    name: Deploy Beta (Fly.io)
    runs-on: ubuntu-latest
    if: inputs.deployment_stage == 'beta'
    outputs:
      fhir_server_url: ${{ steps.deploy.outputs.fhir_server_url }}
      keycloak_url: ${{ steps.deploy.outputs.keycloak_url }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      deployment_target: ${{ steps.deploy.outputs.deployment_target }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_branch }}
      
      - name: Setup Bun
        uses: ./.github/actions/setup-bun-version
      
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy Beta (Fly.io)
        id: deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "🚀 Deploying Beta version ${{ inputs.app_version }} to Fly.io..."
          
          # Create or update fly.beta.toml configuration
          cat > fly.beta.toml << EOF
          app = "proxy-smart-beta"
          primary_region = "ams"
          
          [build]
            dockerfile = "Dockerfile"
          
          [env]
            NODE_ENV = "beta"
            VERSION = "${{ inputs.app_version }}"
          
          [[services]]
            internal_port = 3001
            protocol = "tcp"
          
            [[services.ports]]
              port = 80
              handlers = ["http"]
          
            [[services.ports]]
              port = 443
              handlers = ["http", "tls"]
          
          [[ services.http_checks ]]
            interval = "10s"
            timeout = "2s"
            grace_period = "5s"
            method = "GET"
            path = "/health"
          EOF
          
          # Deploy to Fly.io
          flyctl deploy --config fly.beta.toml --wait-timeout 300
          
          # Get the deployed URL
          FLY_APP_URL="https://proxy-smart-beta.fly.dev"
          
          # Wait for deployment to be ready
          echo "⏳ Waiting for Fly.io deployment to be ready..."
          timeout 300s bash -c "until curl -f $FLY_APP_URL/health; do sleep 10; done"
          
          # Set outputs (assuming Keycloak is also deployed or accessible)
          echo "fhir_server_url=$FLY_APP_URL" >> $GITHUB_OUTPUT
          echo "keycloak_url=https://auth-proxy-smart-beta.fly.dev" >> $GITHUB_OUTPUT
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "deployment_target=fly.io" >> $GITHUB_OUTPUT
          
          echo "✅ Beta deployment completed successfully"
          echo "📍 FHIR Server: $FLY_APP_URL"
          echo "📍 Keycloak: https://auth-proxy-smart-beta.fly.dev"

  deploy-production:
    name: Deploy Production (VPS)
    runs-on: ubuntu-latest
    if: inputs.deployment_stage == 'production'
    outputs:
      fhir_server_url: ${{ steps.deploy.outputs.fhir_server_url }}
      keycloak_url: ${{ steps.deploy.outputs.keycloak_url }}
      deployment_status: ${{ steps.deploy.outputs.deployment_status }}
      deployment_target: ${{ steps.deploy.outputs.deployment_target }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.source_branch }}
      
      - name: Setup Bun
        uses: ./.github/actions/setup-bun-version
      
      - name: Deploy Production (VPS)
        id: deploy
        run: |
          echo "🚀 Deploying Production version ${{ inputs.app_version }} to VPS..."
          
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
          # Create deployment script
          cat > deploy-to-vps.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "📦 Updating application on VPS..."
          
          # Navigate to application directory
          cd /opt/proxy-smart
          
          # Pull latest changes
          git fetch origin
          git checkout ${{ inputs.source_branch }}
          git pull origin ${{ inputs.source_branch }}
          
          # Install dependencies and build
          bun install --frozen-lockfile
          cd backend && bun install && bun run build && cd ..
          cd ui && bun install && bun run build && cd ..
          
          # Restart services using Docker Compose
          docker-compose down
          docker-compose up -d --build
          
          # Wait for services to be ready
          timeout 120s bash -c 'until curl -f http://localhost:3001/health; do sleep 5; done'
          
          echo "✅ VPS deployment completed"
          EOF
          
          # Make script executable and copy to VPS
          chmod +x deploy-to-vps.sh
          scp deploy-to-vps.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
          
          # Execute deployment on VPS
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "bash /tmp/deploy-to-vps.sh"
          
          # Set outputs
          PRODUCTION_URL="https://your-production-domain.com"
          KEYCLOAK_URL="https://auth.your-production-domain.com"
          
          echo "fhir_server_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT
          echo "keycloak_url=$KEYCLOAK_URL" >> $GITHUB_OUTPUT
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "deployment_target=vps" >> $GITHUB_OUTPUT
          
          echo "✅ Production deployment completed successfully"
          echo "📍 FHIR Server: $PRODUCTION_URL"
          echo "📍 Keycloak: $KEYCLOAK_URL"

  output-deployment-urls:
    name: Output Deployment URLs
    runs-on: ubuntu-latest
    needs: [deploy-alpha, deploy-beta, deploy-production]
    if: always()
    outputs:
      fhir_server_url: ${{ steps.set-outputs.outputs.fhir_server_url }}
      keycloak_url: ${{ steps.set-outputs.outputs.keycloak_url }}
      deployment_status: ${{ steps.set-outputs.outputs.deployment_status }}
      deployment_target: ${{ steps.set-outputs.outputs.deployment_target }}
    
    steps:
      - name: Set deployment outputs
        id: set-outputs
        run: |
          if [ "${{ inputs.deployment_stage }}" = "alpha" ]; then
            echo "fhir_server_url=${{ needs.deploy-alpha.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
            echo "keycloak_url=${{ needs.deploy-alpha.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
            echo "deployment_status=${{ needs.deploy-alpha.outputs.deployment_status }}" >> $GITHUB_OUTPUT
            echo "deployment_target=${{ needs.deploy-alpha.outputs.deployment_target }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.deployment_stage }}" = "beta" ]; then
            echo "fhir_server_url=${{ needs.deploy-beta.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
            echo "keycloak_url=${{ needs.deploy-beta.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
            echo "deployment_status=${{ needs.deploy-beta.outputs.deployment_status }}" >> $GITHUB_OUTPUT
            echo "deployment_target=${{ needs.deploy-beta.outputs.deployment_target }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.deployment_stage }}" = "production" ]; then
            echo "fhir_server_url=${{ needs.deploy-production.outputs.fhir_server_url }}" >> $GITHUB_OUTPUT
            echo "keycloak_url=${{ needs.deploy-production.outputs.keycloak_url }}" >> $GITHUB_OUTPUT
            echo "deployment_status=${{ needs.deploy-production.outputs.deployment_status }}" >> $GITHUB_OUTPUT
            echo "deployment_target=${{ needs.deploy-production.outputs.deployment_target }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary for ${{ inputs.deployment_stage }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ steps.set-outputs.outputs.deployment_target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **FHIR Server**: ${{ steps.set-outputs.outputs.fhir_server_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Keycloak**: ${{ steps.set-outputs.outputs.keycloak_url }}" >> $GITHUB_STEP_SUMMARY
          
          # Check if deployment actually succeeded
          if [ "${{ steps.set-outputs.outputs.deployment_status }}" = "success" ]; then
            echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
