name: Build & Test Frontend

on:
  workflow_call:
    inputs:
      run_tests:
        description: "Whether to run tests"
        required: false
        type: boolean
        default: true
      fail_on_test_failure:
        description: "Whether to fail the workflow if tests fail"
        required: false
        type: boolean
        default: true
    outputs:
      frontend_success:
        description: "Whether frontend build was successful"
        value: ${{ jobs.frontend.outputs.build_success }}
      frontend_tests_success:
        description: "Whether frontend tests were successful"
        value: ${{ jobs.frontend.outputs.tests_success }}
    secrets:
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      OPENAI_API_KEY:
        required: false

jobs:
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ job.status == 'success' }}
      tests_success: ${{ job.status == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun with version scripts
        uses: ./.github/actions/setup-bun-version
        with:
          checkout: 'false'  # Skip checkout since we already did it

      # === CLIENT API GENERATION ===
      - name: Authenticate as GitHub App for API Generation
        id: api-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Generate Frontend API Client
        env:
          GITHUB_TOKEN: ${{ steps.api-app-auth.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔄 Generating frontend API client from backend OpenAPI spec..."
          bun install
          cd backend && bun install && cd ..
          cd ui && bun install && cd ..
          bun run generate:ui:normalized
          
          # Configure git for potential commits
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Ensure log files are not included in any commits
          git reset HEAD *.log 2>/dev/null || true
          git rm --cached *.log 2>/dev/null || true
          
          # Check if there are changes to commit (files should already be staged by generate:ui:normalized)
          if git diff --staged --quiet; then
            echo "📋 No API client changes to commit"
          else
            git commit -m "🤖 Update frontend API client from backend OpenAPI spec"
            git push
            echo "✅ Frontend API client updated and committed"
          fi

      # === FRONTEND BUILD PHASE ===
      - name: Build Frontend
        id: frontend-build
        run: |
          echo "=== Building Frontend ==="
          cd ui
          bun install
          bun run build 2>&1 | tee ../frontend-build.log

      - name: Check Build Status
        id: build-status
        run: |
          if [ "${{ steps.frontend-build.outcome }}" == "success" ]; then
            echo "✅ Frontend build successful"
            echo "BUILD_FAILED=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Frontend build failed"
            echo "BUILD_FAILED=true" >> $GITHUB_OUTPUT
            echo "=== BUILD ERROR DETAILS ==="
            cat frontend-build.log
            echo "=========================="
          fi

      - name: Debug Frontend Build Failure and Secrets
        if: steps.build-status.outputs.BUILD_FAILED == 'true'
        run: |
          echo "🐛 Frontend build failed, checking AI fix prerequisites..."
          echo "Build failed with specific errors:"
          echo "=== TYPESCRIPT ERRORS ==="
          grep -E "(error TS|Error:)" frontend-build.log || echo "No TypeScript errors found in log"
          echo "=========================="
          echo "Build outcome: ${{ steps.frontend-build.outcome }}"
          echo "APP_ID available: ${{ secrets.APP_ID != '' }}"
          echo "APP_PRIVATE_KEY available: ${{ secrets.APP_PRIVATE_KEY != '' }}"
          echo "OPENAI_API_KEY available: ${{ secrets.OPENAI_API_KEY != '' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"

      - name: Authenticate as GitHub App (Frontend Build)
        if: steps.build-status.outputs.BUILD_FAILED == 'true'
        id: frontend-app-auth
        continue-on-error: true
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Check GitHub App Authentication
        if: steps.build-status.outputs.BUILD_FAILED == 'true'
        run: |
          if [ "${{ steps.frontend-app-auth.outputs.token }}" != "" ]; then
            echo "✅ GitHub App authentication successful"
          else
            echo "❌ GitHub App authentication failed - AI fixes will be skipped"
            echo "This could be due to:"
            echo "  - Missing APP_ID or APP_PRIVATE_KEY secrets"
            echo "  - Insufficient app permissions"
            echo "  - Running on a fork without access to secrets"
            echo "  - GitHub App not installed on this repository"
          fi

      - name: Setup Python for Frontend AI fixes
        if: steps.build-status.outputs.BUILD_FAILED == 'true' && steps.frontend-app-auth.outputs.token
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies for Frontend AI fixes
        if: steps.build-status.outputs.BUILD_FAILED == 'true' && steps.frontend-app-auth.outputs.token
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Auto-fix Frontend and retry build
        if: steps.build-status.outputs.BUILD_FAILED == 'true' && steps.frontend-app-auth.outputs.token
        id: frontend-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.frontend-app-auth.outputs.token }}
        run: |
          echo "🔧 Applying frontend BUILD fixes (not test fixes)..."
          echo "📝 Analyzing BUILD errors from: frontend-build.log"
          echo "🔍 First 1000 chars of build log:"
          head -c 1000 frontend-build.log
          echo ""
          echo "=== Starting AI Fix Process ==="
          if python scripts/apply-frontend-fixes.py frontend-build.log; then
            echo "✅ Frontend BUILD fixes applied successfully"
            echo "🔄 Retrying build..."
            cd ui
            if bun run build; then
              echo "✅ Build successful after AI fixes!"
              echo "BUILD_RETRY_SUCCESS=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Build still failing after AI fixes"
              echo "BUILD_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Failed to apply frontend BUILD fixes"
            echo "BUILD_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Fail if frontend build failed and AI couldn't fix it
        if: steps.build-status.outputs.BUILD_FAILED == 'true' && steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS != 'true'
        run: |
          echo "❌ Frontend BUILD failed and AI fixes did not resolve the issues"
          echo "Build status: ${{ steps.build-status.outputs.BUILD_FAILED }}"
          echo "Fix retry success: ${{ steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS }}"
          echo "=== FINAL BUILD ERRORS ==="
          cat frontend-build.log
          exit 1

      # === FRONTEND TEST PHASE ===
      - name: Test Frontend
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        id: test-frontend
        timeout-minutes: 5
        env:
          CI: true
        run: |
          echo "Running frontend tests..."
          cd ui
          # bun test 2>&1 | tee ../frontend-test.log

      - name: Check Test Results
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        run: |
          echo "📊 Frontend Test Results Summary:"
          echo "  - Tests enabled: ${{ inputs.run_tests }}"
          echo "  - Test step outcome: ${{ steps.test-frontend.outcome }}"
          if [[ "${{ steps.test-frontend.outcome }}" == "success" ]]; then
            echo "  ✅ Frontend tests passed - skipping AI fixes"
          elif [[ "${{ steps.test-frontend.outcome }}" == "failure" ]]; then
            echo "  ❌ Frontend tests failed - will attempt AI fixes if authentication succeeds"
          else
            echo "  ⚠️  Test outcome unclear: ${{ steps.test-frontend.outcome }}"
          fi

      - name: Check Test Status
        if: ${{ inputs.run_tests && (steps.build-status.outputs.BUILD_FAILED != 'true' || steps.frontend-fix-retry.outputs.BUILD_RETRY_SUCCESS == 'true') }}
        id: test-status
        run: |
          if [ "${{ steps.test-frontend.outcome }}" == "success" ]; then
            echo "✅ Frontend tests successful"
            echo "TEST_FAILED=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Frontend tests failed"
            echo "TEST_FAILED=true" >> $GITHUB_OUTPUT
            echo "=== TEST ERROR DETAILS ==="
            cat frontend-test.log || echo "No test log file found"
            echo "=========================="
          fi

      - name: Authenticate as GitHub App (Frontend Tests)
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true'
        id: frontend-test-app-auth
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Debug Test Failure
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true'
        run: |
          echo "🐛 Frontend tests failed, checking details..."
          echo "Test outcome: ${{ steps.test-frontend.outcome }}"
          echo "=== TEST FAILURE DETAILS ==="
          grep -E "(FAIL|fail|error|Error)" frontend-test.log || echo "No test failures found in log"
          echo "=========================="

      - name: Skip AI Fixes Info
        if: ${{ inputs.run_tests && steps.test-status.outputs.TEST_FAILED != 'true' }}
        run: |
          echo "ℹ️  Skipping AI fixes for frontend tests because:"
          echo "  - Tests enabled: ${{ inputs.run_tests }}"
          echo "  - Test failed: ${{ steps.test-status.outputs.TEST_FAILED }}"
          echo "  - Test outcome: ${{ steps.test-frontend.outcome }}"
          echo "  - AI fixes only run when tests fail"
          echo "  ✅ No fixes needed - continuing with workflow"

      - name: Setup Python for Frontend Test AI fixes
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies for Frontend Test AI fixes
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Auto-fix Frontend Tests and retry
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-app-auth.outputs.token
        id: frontend-test-fix-retry
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.frontend-test-app-auth.outputs.token }}
        run: |
          echo "🔧 Applying frontend TEST fixes (not build fixes)..."
          echo "📝 Analyzing TEST errors from: frontend-test.log"
          echo "🔍 First 1000 chars of test log:"
          head -c 1000 frontend-test.log
          echo ""
          echo "=== Starting AI Test Fix Process ==="
          if python scripts/apply-frontend-fixes.py frontend-test.log; then
            echo "✅ Frontend TEST fixes applied successfully"
            echo "🔄 Retrying tests..."
            cd ui
            if bun test; then
              echo "✅ Tests successful after AI fixes!"
              echo "TEST_RETRY_SUCCESS=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Tests still failing after AI fixes"
              echo "TEST_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Failed to apply frontend TEST fixes"
            echo "TEST_RETRY_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Fail if frontend tests failed and AI couldn't fix it
        if: ${{ inputs.run_tests }} && steps.test-status.outputs.TEST_FAILED == 'true' && steps.frontend-test-fix-retry.outputs.TEST_RETRY_SUCCESS != 'true' && inputs.fail_on_test_failure
        run: |
          echo "❌ Frontend tests failed and AI fixes did not resolve the issues. Failing workflow as requested."
          echo "Test status: ${{ steps.test-status.outputs.TEST_FAILED }}"
          echo "Fix retry success: ${{ steps.frontend-test-fix-retry.outputs.TEST_RETRY_SUCCESS }}"
          echo "=== FINAL TEST ERRORS ==="
          cat frontend-test.log
          exit 1

      - name: Upload frontend build artifacts
        if: ${{ !startsWith(github.ref, 'refs/heads/dev/') }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifacts
          path: |
            ui/dist/
          retention-days: 1
