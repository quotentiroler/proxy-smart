version: '3.8'

services:
  # Inferno Program Edition for ONC testing
  inferno:
    image: healthit/inferno-program:latest
    container_name: proxy-smart-inferno
    environment:
      - INFERNO_HOST=0.0.0.0
      - INFERNO_PORT=4567
      - VALIDATOR_URL=http://validator:8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/inferno
    ports:
      - "4567:4567"
    volumes:
      - ./testing:/opt/inferno/testing:ro
      - inferno_results:/opt/inferno/results
    depends_on:
      postgres:
        condition: service_healthy
      validator:
        condition: service_healthy
    networks:
      - proxy-smart
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4567/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # FHIR Validator Service for Inferno
  validator:
    image: healthit/fhir-validator-wrapper:latest
    container_name: proxy-smart-validator
    environment:
      - VALIDATOR_HOST=0.0.0.0
      - VALIDATOR_PORT=8080
    ports:
      - "8081:8080"
    networks:
      - proxy-smart
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Your existing services from main docker-compose.yml
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: proxy-smart-keycloak
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: INFO
      # PostgreSQL database configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
    ports:
      - "8080:8080"
      - "9000:9000"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    command:
      - start-dev
      - --import-realm
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - proxy-smart

  postgres:
    image: postgres:16-alpine
    container_name: proxy-smart-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # Create additional database for Inferno
      POSTGRES_MULTIPLE_DATABASES: keycloak,inferno
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./keycloak/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./testing/database/init-inferno.sql:/docker-entrypoint-initdb.d/02-init-inferno.sql:ro
    networks:
      - proxy-smart
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Placeholder for your FHIR proxy backend (you'll need to add this)
  proxy-smart-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: proxy-smart-backend
    environment:
      - NODE_ENV=testing
      - KEYCLOAK_URL=http://keycloak:8080
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/proxy_smart
    ports:
      - "3001:3001"
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - proxy-smart
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
    name: proxy-smart-postgres-data
  inferno_results:
    name: proxy-smart-inferno-results

networks:
  proxy-smart:
    name: proxy-smart-network
    driver: bridge
