{
  "analysis": "The frontend checklist shows several high-priority UI pieces still marked as Pending: Launch Context UI, Security Monitoring UI, Patient selection UI, and Clinical decision support UI. The most impactful frontend work (minimal but practical) is to provide reusable, well-typed components for: (1) displaying/editing launch context (LaunchContextPanel), (2) patient lookup & selection (PatientSelector), and (3) a basic CDS integration panel (ClinicalDecisionSupportPanel). These components are standalone, testable, and designed to be integrated into existing pages/routes. I created TypeScript FHIR types and a small index export to make importing easy. I focused on pragmatic network integration patterns (pluggable base URL, error handling, debounced search) and accessibility. These changes are intentionally conservative (UI stubs + integration points) so they can be wired into larger pages (e.g., admin dashboard, launch debugger) without breaking existing code.",
  "changes": [
    {
      "action": "create",
      "file": "ui/src/types/fhir.ts",
      "search": "",
      "replace": "/* Minimal FHIR types used by UI components. Extend as needed. */\nexport interface HumanName {\n  use?: string;\n  text?: string;\n  family?: string;\n  given?: string[];\n}\n\nexport interface Patient {\n  id?: string;\n  resourceType?: 'Patient';\n  name?: HumanName[];\n  birthDate?: string;\n  gender?: string;\n  [key: string]: any;\n}\n\nexport interface LaunchContext {\n  patientId?: string;\n  encounterId?: string;\n  providerId?: string;\n  appClientId?: string;\n  raw?: Record<string, any>;\n}\n",
      "reasoning": "Add minimal FHIR/launch context types so components have typed contracts. Keeps the frontend type-safe and easy to expand.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/LaunchContextPanel.tsx",
      "search": "",
      "replace": "import React, { useState } from 'react';\nimport type { LaunchContext, Patient } from '../types/fhir';\n\ninterface Props {\n  launchContext?: LaunchContext;\n  onChange?: (ctx: LaunchContext) => void;\n  // Optional: If you want to display patient summary inline\n  patient?: Patient | null;\n}\n\nexport const LaunchContextPanel: React.FC<Props> = ({ launchContext = {}, onChange, patient = null }) => {\n  const [editing, setEditing] = useState(false);\n  const [local, setLocal] = useState<LaunchContext>(launchContext);\n\n  const toggleEdit = () => setEditing(!editing);\n\n  const handleField = (k: keyof LaunchContext) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const updated = { ...local, [k]: e.target.value };\n    setLocal(updated);\n    onChange?.(updated);\n  };\n\n  return (\n    <section className=\"p-4 bg-white rounded shadow-sm\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-medium\">Launch Context</h3>\n        <div className=\"space-x-2\">\n          <button\n            onClick={toggleEdit}\n            className=\"px-3 py-1 text-sm border rounded bg-gray-50 hover:bg-gray-100\"\n            aria-pressed={editing}\n          >\n            {editing ? 'Lock' : 'Edit'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <div>\n          <label className=\"block text-xs text-gray-600\">Patient ID</label>\n          {editing ? (\n            <input\n              value={local.patientId ?? ''}\n              onChange={handleField('patientId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Patient ID or fhir:// reference\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\">{local.patientId ?? '\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\">Encounter ID</label>\n          {editing ? (\n            <input\n              value={local.encounterId ?? ''}\n              onChange={handleField('encounterId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Encounter ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\">{local.encounterId ?? '\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\">Provider ID</label>\n          {editing ? (\n            <input\n              value={local.providerId ?? ''}\n              onChange={handleField('providerId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Provider ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\">{local.providerId ?? '\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\">Client/App</label>\n          {editing ? (\n            <input\n              value={local.appClientId ?? ''}\n              onChange={handleField('appClientId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Client ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\">{local.appClientId ?? '\u2014'}</div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mt-4\">\n        <h4 className=\"text-sm font-medium\">Patient Snapshot</h4>\n        {patient ? (\n          <div className=\"mt-2 text-sm\">\n            <div className=\"text-gray-700\">{patient.name?.map(n => n.text ?? `${n.given?.join(' ') ?? ''} ${n.family ?? ''}`).join(', ') || 'Unnamed'}</div>\n            <div className=\"text-gray-500 text-xs\">DOB: {patient.birthDate ?? '\u2014'}</div>\n            <div className=\"text-gray-500 text-xs\">Gender: {patient.gender ?? '\u2014'}</div>\n          </div>\n        ) : (\n          <div className=\"mt-2 text-sm text-gray-500\">No patient loaded</div>\n        )}\n      </div>\n\n      <div className=\"mt-4 text-right\">\n        <small className=\"text-xs text-gray-400\">Raw launch params available in debug logs</small>\n      </div>\n    </section>\n  );\n};\n\nexport default LaunchContextPanel;\n",
      "reasoning": "Provides a standalone Launch Context UI panel to view/edit patient/encounter/provider/app client fields and an optional patient snapshot. This directly addresses the Launch Context UI checklist item and can be dropped into launch/debugging pages.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/PatientSelector.tsx",
      "search": "",
      "replace": "import React, { useEffect, useState, useRef } from 'react';\nimport type { Patient } from '../types/fhir';\n\ninterface Props {\n  onSelect: (p: Patient) => void;\n  // Base URL for FHIR server (can be proxied by backend). Default path chosen to match common setups.\n  fhirBaseUrl?: string;\n  placeholder?: string;\n}\n\nexport const PatientSelector: React.FC<Props> = ({ onSelect, fhirBaseUrl = '/api/fhir', placeholder }) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<Patient[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const debounceRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!query || query.trim().length < 1) {\n      setResults([]);\n      setError(null);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    if (debounceRef.current) window.clearTimeout(debounceRef.current);\n    debounceRef.current = window.setTimeout(() => {\n      const url = `${fhirBaseUrl}/Patient?name=${encodeURIComponent(query)}&_count=20`;\n      fetch(url, { credentials: 'same-origin' })\n        .then(async res => {\n          if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);\n          return res.json();\n        })\n        .then(bundle => {\n          const entries = Array.isArray(bundle?.entry) ? bundle.entry : [];\n          const patients = entries.map((e: any) => e.resource).filter(Boolean) as Patient[];\n          setResults(patients);\n        })\n        .catch(err => {\n          setError(String(err));\n          setResults([]);\n        })\n        .finally(() => setLoading(false));\n    }, 350);\n\n    return () => {\n      if (debounceRef.current) window.clearTimeout(debounceRef.current);\n    };\n  }, [query, fhirBaseUrl]);\n\n  return (\n    <div className=\"p-3 bg-white rounded shadow-sm\">\n      <label className=\"block text-xs text-gray-600\">Search patient</label>\n      <div className=\"flex items-center gap-2 mt-1\">\n        <input\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder={placeholder ?? 'Search by family/given name'}\n          className=\"flex-1 border rounded px-2 py-1\"\n          aria-label=\"Search patient\"\n        />\n        {loading && <span className=\"text-sm text-gray-500\">Searching\u2026</span>}\n      </div>\n\n      <div className=\"mt-2\">\n        {error && <div className=\"text-red-600 text-sm\">{error}</div>}\n        {!error && results.length === 0 && query && !loading && (\n          <div className=\"text-sm text-gray-500\">No patients found</div>\n        )}\n\n        <ul className=\"mt-2 space-y-1\">\n          {results.map(p => {\n            const nameText = p.name?.map(n => n.text ?? `${n.given?.join(' ') ?? ''} ${n.family ?? ''}`).join(', ') || 'Unnamed';\n            return (\n              <li key={p.id}>\n                <button\n                  onClick={() => onSelect(p)}\n                  className=\"w-full text-left px-2 py-2 rounded hover:bg-gray-50 flex items-center justify-between\"\n                  aria-label={`Select patient ${nameText}`}\n                >\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-800\">{nameText}</div>\n                    <div className=\"text-xs text-gray-500\">DOB: {p.birthDate ?? '\u2014'}</div>\n                  </div>\n                  <div className=\"text-xs text-gray-400\">{p.id}</div>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PatientSelector;\n",
      "reasoning": "Creates a reusable PatientSelector component addressing the Patient selection UI checklist item. It supports debounced search against a FHIR endpoint, graceful error handling, and returns a typed Patient on selection. Default fhirBaseUrl is '/api/fhir' which can be proxied by the backend.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/ClinicalDecisionSupportPanel.tsx",
      "search": "",
      "replace": "import React, { useState } from 'react';\nimport type { Patient } from '../types/fhir';\n\ninterface Props {\n  patient?: Patient | null;\n  // Endpoint to request CDS suggestions; default assumed to be proxied at /api/cds\n  cdsEndpoint?: string;\n}\n\nexport const ClinicalDecisionSupportPanel: React.FC<Props> = ({ patient = null, cdsEndpoint = '/api/cds' }) => {\n  const [loading, setLoading] = useState(false);\n  const [items, setItems] = useState<any[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const requestCds = async () => {\n    if (!patient?.id) {\n      setError('No patient selected');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setItems(null);\n    try {\n      const res = await fetch(cdsEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ patientId: patient.id }),\n      });\n      if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);\n      const data = await res.json();\n      // Expecting a simple list of suggestions; adapt to CDS Hooks structure if present\n      setItems(data?.suggestions ?? data);\n    } catch (err: any) {\n      setError(String(err));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <section className=\"p-4 bg-white rounded shadow-sm\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-medium\">Clinical Decision Support</h3>\n      </div>\n\n      <div className=\"text-sm text-gray-700\">\n        <div>Patient: {patient?.name?.map(n => n.text ?? `${n.given?.join(' ') ?? ''} ${n.family ?? ''}`).join(', ') ?? '\u2014'}</div>\n        <div className=\"text-xs text-gray-500\">ID: {patient?.id ?? '\u2014'}</div>\n      </div>\n\n      <div className=\"mt-3\">\n        <button\n          onClick={requestCds}\n          disabled={loading || !patient?.id}\n          className=\"px-3 py-1 bg-blue-600 text-white rounded disabled:opacity-60\"\n        >\n          {loading ? 'Requesting\u2026' : 'Request CDS'}\n        </button>\n      </div>\n\n      <div className=\"mt-4\">\n        {error && <div className=\"text-red-600 text-sm\">{error}</div>}\n        {!error && items && (\n          <div className=\"space-y-2\">\n            {items.length === 0 && <div className=\"text-sm text-gray-500\">No suggestions returned</div>}\n            {items.map((it: any, idx: number) => (\n              <div key={idx} className=\"border rounded p-2 bg-gray-50\">\n                <div className=\"text-sm font-medium\">{it.title ?? it.summary ?? 'Suggestion'}</div>\n                <div className=\"text-xs text-gray-600\">{it.detail ?? JSON.stringify(it)}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default ClinicalDecisionSupportPanel;\n",
      "reasoning": "Provides a minimal CDS panel that lets the app request suggestions for a selected patient. This addresses the Clinical decision support UI requirement and provides a clear integration point for backend CDS hooks or proxy endpoints.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/index.ts",
      "search": "",
      "replace": "export { default as LaunchContextPanel } from './LaunchContextPanel';\nexport { default as PatientSelector } from './PatientSelector';\nexport { default as ClinicalDecisionSupportPanel } from './ClinicalDecisionSupportPanel';\n",
      "reasoning": "Convenience barrel file so pages can import components from 'ui/src/components'. Keeps imports tidy and makes integration easier.",
      "confidence": "high"
    }
  ]
}
