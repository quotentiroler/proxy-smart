=== FRONTEND TEST COVERAGE ENHANCEMENT ===
Component: Frontend (React/TypeScript)
Task: Generate missing tests to improve code coverage
Current coverage: %
Target coverage: 80%
Framework: Vitest + Testing Library + Jest DOM

COVERAGE GAPS TO ADDRESS:
- Create tests for untested components
- Add edge case scenarios
- Test error handling paths
- Add integration tests where needed


EXISTING TEST PATTERNS (for reference):
Example test file: ../ui/test/components/button.test.tsx
import { describe, it, expect, vi } from 'vitest'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { Button } from '@/components/ui/button'

describe('Button', () => {
  it('renders with default props', () => {
    render(<Button>Click me</Button>)
    
    const button = screen.getByRole('button', { name: /click me/i })
    expect(button).toBeInTheDocument()
    expect(button).toHaveClass('inline-flex', 'items-center', 'justify-center')
  })

  it('renders with different variants', () => {
    const { rerender } = render(<Button variant="destructive">Delete</Button>)
    
    let button = screen.getByRole('button', { name: /delete/i })
    expect(button).toHaveClass('bg-destructive')
    
---
Example test file: ../ui/test/components/theme-provider.test.tsx
import { describe, it, expect } from 'vitest'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { ThemeProvider, useTheme } from '@/components/theme-provider'

function ThemeConsumer() {
  const { theme, setTheme } = useTheme()
  return (
    <div>
      <div aria-label="theme">{theme}</div>
      <button onClick={() => setTheme('dark')}>Set Dark</button>
    </div>
  )
}

describe('ThemeProvider', () => {
  it('initializes with defaultTheme and updates DOM and storage when setTheme is called', async () => {
    const user = userEvent.setup()
    // ensure no pre-existing theme
    localStorage.removeItem('vite-ui-theme')
---
Example test file: ../ui/test/lib/utils.test.ts
import { describe, it, expect } from 'vitest'
import { cn } from '@/lib/utils'

describe('cn utility', () => {
  it('merges class names with conditional and array values', () => {
    const result = cn('px-2', null, undefined, false, 'text-sm', { 'text-lg': false, 'font-bold': true }, ['mx-1', 'px-2'])
    const tokens = result.split(/\s+/).filter(Boolean)

    expect(tokens).toContain('px-2')
    expect(tokens).toContain('text-sm')
    expect(tokens).toContain('font-bold')
    expect(tokens).toContain('mx-1')
    expect(tokens).not.toContain('text-lg')

    // ensure duplicates are resolved sensibly (e.g., px-2 appears only once)
    expect(tokens.filter((t) => t === 'px-2')).toHaveLength(1)
  })

  it('handles simple strings and conditionals', () => {
    const result = cn('a', { b: true, c: false }, ['d', null, 'a'])
---
