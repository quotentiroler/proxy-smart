{
  "analysis": "The project has very low frontend test coverage (1.14%). Existing tests cover some UI primitives (input, button, textarea, theme-provider). To meaningfully raise coverage I added focused unit tests for utility and storage logic which are currently untested but widely used across the app:\n\n- utils.ts: cn, applyEncrypt, applyDecrypt \u2014 these functions are pure and safe to test. Tests assert class merging behavior, successful encryption/decryption roundtrip, and fallback behavior when decryption fails.\n\n- storage.ts: session/local storage helpers, theme getters/setters, encrypted localforage-based storage, and cleanup helpers (clearAllAuthData and clearAuthorizationCodeData). Tests include mocking localforage, using actual applyEncrypt to create an encrypted payload returned by the mock, and verifying removal of items from session/local storage. For history manipulation we push a URL with a code query param and spy on window.history.replaceState to ensure it is called by clearAuthorizationCodeData.\n\nI followed the repository's existing test patterns (Vitest + Testing Library style imports, vi.fn/vi.mock). Tests avoid heavy UI integration and target logic that significantly improves coverage and validates important edge cases (decryption failure, storage clearing, session utilities). Localforage is mocked to avoid relying on the actual implementation and to control return values during tests.\n\nFiles added:\n- ui/test/lib/utils.test.ts\n- ui/test/lib/storage.test.ts\n\nThese tests should run under the existing Vitest setup (ui/test/setup.ts) and increase coverage substantially by covering encryption/decryption and storage branches and fallbacks.",
  "changes": [
    {
      "action": "create",
      "file": "ui/test/lib/utils.test.ts",
      "search": "",
      "replace": "import { describe, it, expect } from 'vitest'\nimport { cn, applyEncrypt, applyDecrypt } from '@/lib/utils'\n\ndescribe('lib/utils', () => {\n  it('cn merges class names and returns a string with provided classes', () => {\n    const merged = cn('foo', 'bar', 'foo', '')\n    expect(typeof merged).toBe('string')\n    // Contains expected tokens\n    expect(merged).toContain('foo')\n    expect(merged).toContain('bar')\n  })\n\n  it('applyEncrypt and applyDecrypt perform a roundtrip', () => {\n    const plain = 'hello test'\n    const cipher = applyEncrypt(plain)\n\n    expect(typeof cipher).toBe('string')\n    // decrypt should return the original\n    const decrypted = applyDecrypt(cipher)\n    expect(decrypted).toBe(plain)\n  })\n\n  it('applyDecrypt returns original input if decryption fails', () => {\n    const random = 'this-is-not-a-valid-cipher'\n    const result = applyDecrypt(random)\n    // When decryption cannot produce a UTF8 string, we return the original value\n    expect(result).toBe(random)\n  })\n})\n",
      "reasoning": "Adds tests for utility functions to ensure class-name merging works and Crypto encrypt/decrypt roundtrip and graceful fallback behavior are covered.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/lib/storage.test.ts",
      "search": "",
      "replace": "import { describe, it, expect, vi, beforeEach } from 'vitest'\nimport localforage from 'localforage'\nimport * as storage from '@/lib/storage'\nimport { applyEncrypt } from '@/lib/utils'\n\n// Mock localforage so tests don't rely on the real implementation\nvi.mock('localforage', () => ({\n  config: vi.fn(),\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  removeItem: vi.fn(),\n}))\n\ndescribe('lib/storage', () => {\n  beforeEach(() => {\n    vi.clearAllMocks()\n    localStorage.clear()\n    sessionStorage.clear()\n  })\n\n  it('getTheme returns default when key missing and setTheme persists value', () => {\n    const fallback = storage.getTheme('does-not-exist', 'my-default')\n    expect(fallback).toBe('my-default')\n\n    storage.setTheme('theme-key', 'dark')\n    expect(localStorage.getItem('theme-key')).toBe('dark')\n\n    const stored = storage.getTheme('theme-key', 'my-default')\n    expect(stored).toBe('dark')\n  })\n\n  it('session storage helpers set, get, and remove values', () => {\n    storage.setSessionItem('session-key', 'value1')\n    expect(storage.getSessionItem('session-key')).toBe('value1')\n\n    storage.removeSessionItem('session-key')\n    expect(storage.getSessionItem('session-key')).toBe(null)\n  })\n\n  it('clearAllAuthData removes oauth-related keys and calls localforage.removeItem', async () => {\n    // Prepare persistent and session/local entries\n    localStorage.setItem('oauth_token', 'tok')\n    sessionStorage.setItem('oauth_state', 'st')\n\n    // call the function under test\n    await storage.clearAllAuthData()\n\n    // localforage.removeItem should have been called for encrypted tokens\n    expect(localforage.removeItem).toHaveBeenCalled()\n\n    // oauth-like keys should be cleaned from storages\n    expect(localStorage.getItem('oauth_token')).toBeNull()\n    expect(sessionStorage.getItem('oauth_state')).toBeNull()\n  })\n\n  it('getItem decrypts JSON string stored in localforage and returns parsed object', async () => {\n    const obj = { x: 1, y: 'z' }\n    const encrypted = applyEncrypt(JSON.stringify(obj))\n\n    // Make localforage.getItem resolve to our encrypted payload\n    ;(localforage.getItem as unknown as ReturnType<typeof vi.fn>).mockResolvedValue(encrypted)\n\n    const result = await storage.getItem<typeof obj>('some-key')\n    expect(result).toEqual(obj)\n  })\n\n  it('setItem stores encrypted string via localforage.setItem', async () => {\n    await storage.setItem('k', 'plain-value')\n    expect(localforage.setItem).toHaveBeenCalled()\n  })\n\n  it('clearAuthorizationCodeData clears session storage and replaces history when code param present', () => {\n    sessionStorage.setItem('authorization_code', 'abc')\n    // push a URL with code= to simulate the page having an auth code in the query\n    window.history.pushState({}, '', '/?code=abc')\n\n    const replaceSpy = vi.spyOn(window.history, 'replaceState')\n\n    storage.clearAuthorizationCodeData()\n\n    // session storage items removed\n    expect(sessionStorage.getItem('authorization_code')).toBeNull()\n\n    // history.replaceState should have been called to clean URL\n    expect(replaceSpy).toHaveBeenCalled()\n  })\n})\n",
      "reasoning": "Adds tests for storage utilities: theme persistence, session helper functions, encrypted persistent storage (mocking localforage and using applyEncrypt to produce an encrypted payload), clearing of auth-related entries, and url/history cleanup behavior. These tests exercise logic paths and error-safe fallbacks in storage.ts.",
      "confidence": "high"
    }
  ]
}
