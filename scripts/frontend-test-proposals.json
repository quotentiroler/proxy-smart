{
  "analysis": "Project coverage is extremely low (1.4%). The fastest, highest-impact improvements are to add a small set of focused tests around the theme context (ThemeProvider + useTheme) because examples in the repo already reference '@/components/theme-provider' and '@/hooks/useTheme'. These tests exercise important behavior: reading system preference (prefers-color-scheme), persisting selection to localStorage, and rehydration on remount. They follow existing test patterns in the repo (Vitest + Testing Library + userEvent) and are reliable (mocking window.matchMedia and clearing localStorage between tests). Adding these two tests should raise coverage meaningfully in the React/hooks area and serve as templates for more tests elsewhere. Confidence: medium (depends on existence/shape of ThemeProvider/useTheme implementations matching example imports).",
  "changes": [
    {
      "action": "create",
      "file": "ui/test/components/theme-provider.behavior.test.tsx",
      "search": "",
      "replace": "import React from 'react'\nimport { describe, it, expect, beforeEach, vi } from 'vitest'\nimport { render, screen, cleanup } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport { useTheme } from '@/hooks/useTheme'\n\nfunction ThemeConsumer() {\n  const { theme, setTheme } = useTheme()\n  return (\n    <div>\n      <div aria-label=\"theme\">{theme}</div>\n      <button onClick={() => setTheme('dark')}>Set Dark</button>\n      <button onClick={() => setTheme('light')}>Set Light</button>\n      <button onClick={() => setTheme('system')}>Set System</button>\n    </div>\n  )\n}\n\ndescribe('ThemeProvider behavior', () => {\n  beforeEach(() => {\n    // make tests hermetic\n    localStorage.clear()\n    // restore any previous override of matchMedia between tests\n    try {\n      if ((window as any).__originalMatchMedia) {\n        Object.defineProperty(window, 'matchMedia', {\n          value: (window as any).__originalMatchMedia,\n          configurable: true,\n        })\n        delete (window as any).__originalMatchMedia\n      }\n    } catch (e) {\n      // ignore\n    }\n  })\n\n  it('reads system preference (prefers-color-scheme) when no saved theme', () => {\n    // Keep original so we can restore later if needed\n    if (!(window as any).matchMedia || !(window as any).__originalMatchMedia) {\n      (window as any).__originalMatchMedia = (window as any).matchMedia\n    }\n\n    // mock matchMedia so that '(prefers-color-scheme: dark)' returns matches = true\n    const mockMatchMedia = vi.fn().mockImplementation((query) => {\n      const isDark = typeof query === 'string' && query.includes('prefers-color-scheme: dark')\n      return {\n        matches: isDark,\n        media: query,\n        addEventListener: vi.fn(),\n        removeEventListener: vi.fn(),\n        onchange: null,\n        addListener: vi.fn(),\n        removeListener: vi.fn(),\n        dispatchEvent: vi.fn(),\n      }\n    })\n\n    Object.defineProperty(window, 'matchMedia', { value: mockMatchMedia, configurable: true })\n\n    render(\n      <ThemeProvider>\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    const themeEl = screen.getByLabelText('theme')\n    // When system prefers dark, the provider should pick 'dark' by default\n    expect(themeEl.textContent).toBe('dark')\n  })\n\n  it('persists theme to localStorage and rehydrates on remount', async () => {\n    const user = userEvent.setup()\n\n    const { unmount } = render(\n      <ThemeProvider>\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    const themeEl = screen.getByLabelText('theme')\n    // initial theme should be present (system or default)\n    expect(themeEl.textContent).toBeTruthy()\n\n    // Click Set Dark and expect localStorage to be updated\n    await user.click(screen.getByText('Set Dark'))\n    expect(localStorage.getItem('theme')).toBe('dark')\n\n    // unmount and remount to ensure rehydration from localStorage\n    unmount()\n    cleanup()\n\n    render(\n      <ThemeProvider>\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    const rehydrated = screen.getByLabelText('theme')\n    expect(rehydrated.textContent).toBe('dark')\n  })\n})\n",
      "reasoning": "Adds behavioral tests for ThemeProvider and useTheme: verifies system preference detection via matchMedia, persistence to localStorage when setTheme is called, and rehydration on remount. These tests follow existing patterns in the repo (Vitest + Testing Library + userEvent) and exercise both happy path and persistence edge-case behavior, improving coverage in a core UI area.",
      "confidence": "medium"
    },
    {
      "action": "create",
      "file": "ui/test/hooks/useTheme.integration.test.tsx",
      "search": "",
      "replace": "import React from 'react'\nimport { describe, it, expect } from 'vitest'\nimport { render } from '@testing-library/react'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport { useTheme } from '@/hooks/useTheme'\n\n// A small consumer used to assert that hook throws when used outside provider\nfunction ConsumerWithoutProvider() {\n  // This usage should throw if hook is written to require provider\n  const { theme } = useTheme()\n  return <div>{theme}</div>\n}\n\ndescribe('useTheme integration', () => {\n  it('throws when used outside of ThemeProvider', () => {\n    // If useTheme expects a provider, render should throw\n    let didThrow = false\n    try {\n      render(<ConsumerWithoutProvider />)\n    } catch (e) {\n      didThrow = true\n    }\n    expect(didThrow).toBe(true)\n  })\n\n  it('works inside ThemeProvider and exposes API', () => {\n    function Consumer() {\n      const { theme, setTheme } = useTheme()\n      // basic smoke: render values so test doesn't crash\n      return (\n        <div>\n          <div data-testid=\"theme\">{theme}</div>\n          <button onClick={() => setTheme('light')}>light</button>\n        </div>\n      )\n    }\n\n    const { getByTestId } = render(\n      <ThemeProvider>\n        <Consumer />\n      </ThemeProvider>\n    )\n\n    // initial theme exists and is a string\n    expect(typeof getByTestId('theme').textContent).toBe('string')\n  })\n})\n",
      "reasoning": "Provides integration tests that assert the hook throws when used outside of ThemeProvider (existing pattern in repo) and a smoke test verifying the hook works inside the provider and exposes the expected API. These tests are lightweight, follow the established style, and help cover both error and normal paths for the hook.",
      "confidence": "medium"
    }
  ]
}
