{
  "analysis": "I'll add a focused set of unit tests to increase frontend coverage meaningfully. I inspected the repo and found existing tests for some UI primitives and the theme provider. I'll add tests for a few high-impact untested modules: storage utilities (session/local storage wrappers and clear helpers), the ErrorBoundary component, the useTheme hook's error case (when used outside a ThemeProvider), and a deterministic method of the OpenID service (getLogoutUrl). These tests follow existing Vitest + Testing Library patterns and deliberately also assert behavior when underlying platform APIs throw (we spy console.warn/error to avoid noisy logs). This should raise coverage by covering branches and error handling for storage utilities and components.\n\nFiles added (all under ui/test):\n- ui/test/lib/storage.test.ts\n- ui/test/lib/error-boundary.test.ts\n- ui/test/hooks/useTheme.test.ts\n- ui/test/service/openid-service.test.ts\n\nEach test is self-contained, uses vi.fn() for spies/mocks where needed, and mirrors the repo's test style. I kept tests deterministic (e.g., using window.history.pushState to simulate a URL with code=) and made assertions about session/local storage, console warnings, and replaced URL behavior.\n\nConfidence: medium-high \u2014 these tests exercise public APIs and common failure paths. There is a small risk around module alias resolution in the test environment (e.g., @/lib/storage), but existing tests use the same aliases, so it should be fine.",
  "changes": [
    {
      "action": "create",
      "file": "ui/test/lib/storage.test.ts",
      "search": "",
      "replace": "import { describe, it, expect, vi, beforeEach } from 'vitest'\nimport {\n  getSessionItem,\n  setSessionItem,\n  removeSessionItem,\n  getTheme,\n  setTheme,\n  clearAllAuthData,\n  clearAuthorizationCodeData,\n} from '@/lib/storage'\nimport localforage from 'localforage'\n\ndescribe('storage utilities', () => {\n  beforeEach(() => {\n    localStorage.clear()\n    sessionStorage.clear()\n    vi.restoreAllMocks()\n  })\n\n  it('getSessionItem/setSessionItem/removeSessionItem behave normally', () => {\n    setSessionItem('a', '1')\n    expect(getSessionItem('a')).toBe('1')\n\n    removeSessionItem('a')\n    expect(getSessionItem('a')).toBeNull()\n  })\n\n  it('setSessionItem logs a warning if sessionStorage.setItem throws', () => {\n    const warnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})\n    const original = sessionStorage.setItem\n    vi.spyOn(sessionStorage, 'setItem').mockImplementation(() => {\n      throw new Error('sessionStorage failure')\n    })\n\n    // Should not throw, should log a warning\n    expect(() => setSessionItem('k', 'v')).not.toThrow()\n    expect(warnSpy).toHaveBeenCalled()\n\n    // restore underlying implementation\n    ;(sessionStorage.setItem as unknown as jest.Mock) = original as unknown as jest.Mock\n    warnSpy.mockRestore()\n  })\n\n  it('getTheme / setTheme roundtrips and falls back when localStorage fails', () => {\n    // default when not present\n    expect(getTheme('missing-key', 'blue')).toBe('blue')\n\n    setTheme('my-key', 'dark')\n    expect(getTheme('my-key', 'light')).toBe('dark')\n\n    // simulate localStorage.getItem throwing\n    const warnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})\n    const getItemSpy = vi.spyOn(localStorage, 'getItem').mockImplementation(() => {\n      throw new Error('localStorage fail')\n    })\n\n    expect(getTheme('my-key', 'fallback')).toBe('fallback')\n    expect(warnSpy).toHaveBeenCalled()\n\n    getItemSpy.mockRestore()\n    warnSpy.mockRestore()\n  })\n\n  it('clearAuthorizationCodeData removes session keys and clears URL search params', () => {\n    // set some session items\n    sessionStorage.setItem('authorization_code', 'abc')\n    sessionStorage.setItem('oauth_code', 'x')\n    sessionStorage.setItem('auth_code', 'y')\n\n    // set current URL with code param\n    window.history.pushState({}, '', '/?code=123&other=1')\n\n    const replaceSpy = vi.spyOn(window.history, 'replaceState')\n    clearAuthorizationCodeData()\n\n    // items should be removed\n    expect(sessionStorage.getItem('authorization_code')).toBeNull()\n    expect(sessionStorage.getItem('oauth_code')).toBeNull()\n    expect(sessionStorage.getItem('auth_code')).toBeNull()\n\n    // replaceState should have been called to clear the URL\n    expect(replaceSpy).toHaveBeenCalled()\n\n    replaceSpy.mockRestore()\n  })\n\n  it('clearAllAuthData calls localforage.removeItem and clears oauth keys in storage', async () => {\n    // prepare some keys\n    localStorage.setItem('some_oauth_key', 'x')\n    sessionStorage.setItem('some_pkce', 'y')\n\n    const removeSpy = vi.spyOn(localforage, 'removeItem').mockResolvedValue(undefined)\n\n    await clearAllAuthData()\n\n    expect(removeSpy).toHaveBeenCalledWith('openid_tokens')\n    // oauth related keys should be removed from localStorage and sessionStorage\n    expect(localStorage.getItem('some_oauth_key')).toBeNull()\n    expect(sessionStorage.getItem('some_pkce')).toBeNull()\n\n    removeSpy.mockRestore()\n  })\n})\n",
      "reasoning": "Adds tests for storage utility functions covering normal behavior and failure paths (session/local storage exceptions), plus tests for clearAuthorizationCodeData and clearAllAuthData to ensure they remove session/local storage and call localforage.removeItem. This exercises branches and error handling.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/lib/error-boundary.test.ts",
      "search": "",
      "replace": "import React from 'react'\nimport { describe, it, expect, vi } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport ErrorBoundary from '@/lib/ErrorBoundary'\n\nfunction Bomb(): JSX.Element {\n  throw new Error('boom from Bomb')\n}\n\ndescribe('ErrorBoundary', () => {\n  it('renders fallback UI and shows error message when child throws', () => {\n    const errorSpy = vi.spyOn(console, 'error').mockImplementation(() => {})\n\n    render(\n      <ErrorBoundary>\n        <Bomb />\n      </ErrorBoundary>\n    )\n\n    expect(screen.getByText(/something went wrong/i)).toBeInTheDocument()\n    expect(screen.getByText(/boom from Bomb/i)).toBeInTheDocument()\n\n    errorSpy.mockRestore()\n  })\n})\n",
      "reasoning": "Adds a test for the ErrorBoundary component to ensure it catches render-time errors from children and displays a user-visible fallback including the error message. Spies on console.error to avoid noisy test logs.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/hooks/useTheme.test.ts",
      "search": "",
      "replace": "import React from 'react'\nimport { describe, it, expect } from 'vitest'\nimport { render } from '@testing-library/react'\nimport { useTheme } from '@/hooks/useTheme'\n\nfunction ConsumerWithoutProvider() {\n  // This will throw because there is no ThemeProvider in the tree\n  const { theme } = useTheme()\n  return <div>{theme}</div>\n}\n\ndescribe('useTheme hook', () => {\n  it('throws when used outside of ThemeProvider', () => {\n    expect(() => render(<ConsumerWithoutProvider />)).toThrow(\n      'useTheme must be used within a ThemeProvider'\n    )\n  })\n})\n",
      "reasoning": "Adds a test that verifies the useTheme hook throws a helpful error when used outside of a ThemeProvider, covering the defensive check in the hook.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/service/openid-service.test.ts",
      "search": "",
      "replace": "import { describe, it, expect } from 'vitest'\nimport { openidService } from '@/service/openid-service'\n\ndescribe('openidService.getLogoutUrl', () => {\n  it('generates a logout URL with id_token_hint when provided and includes timestamp and client params', () => {\n    const urlStr = openidService.getLogoutUrl('my-id-token')\n    const url = new URL(urlStr)\n\n    expect(url.pathname).toContain('/auth/logout')\n    const params = url.searchParams\n    expect(params.get('id_token_hint')).toBe('my-id-token')\n    expect(params.get('client_id')).toBeDefined()\n    expect(params.get('post_logout_redirect_uri')).toBeDefined()\n    expect(params.get('logout_hint')).toBe('complete')\n    // timestamp param should exist and be a number-ish string\n    const t = params.get('_t')\n    expect(t).toBeTruthy()\n    expect(Number.isFinite(Number(t))).toBe(true)\n  })\n\n  it('generates a logout URL without id_token_hint when none provided', () => {\n    const urlStr = openidService.getLogoutUrl()\n    const url = new URL(urlStr)\n    expect(url.searchParams.get('id_token_hint')).toBeNull()\n  })\n})\n",
      "reasoning": "Adds tests for the deterministic getLogoutUrl method on the openidService. This tests proper query param inclusion for both cases (with and without id token) and ensures timestamp and other params are set. Because getLogoutUrl is pure/deterministic, it is safe and stable to test.",
      "confidence": "high"
    }
  ]
}
