{
  "analysis": "The repository has an existing test for the Button component but coverage is extremely low. To raise coverage meaningfully I created tests for utility and storage modules (applyEncrypt/applyDecrypt, local/session storage helpers, clearAllAuthData, clearAuthorizationCodeData) and for the ThemeProvider component. These tests exercise normal flows and error/edge behaviors (clearing auth data, URL code-clearing, session/localStorage interactions). I followed existing test patterns (vitest + testing-library + user-event) and used JSDOM history/state APIs for URL manipulation. Files are created under ui/test to match the existing test layout. No existing files were modified.",
  "changes": [
    {
      "action": "create",
      "file": "ui/test/utils.test.ts",
      "search": "",
      "replace": "import { describe, it, expect } from 'vitest'\nimport { applyEncrypt, applyDecrypt, cn } from '@/lib/utils'\n\ndescribe('utils: encryption and cn', () => {\n  it('encrypts and decrypts text (roundtrip)', () => {\n    const text = 'hello-world-123'\n    const cipher = applyEncrypt(text)\n\n    // Encrypted text should be different from original\n    expect(cipher).not.toBe(text)\n\n    const decrypted = applyDecrypt(cipher)\n    expect(decrypted).toBe(text)\n  })\n\n  it('applyDecrypt returns original text on invalid cipher', () => {\n    const invalid = 'this-is-not-a-ciphertext'\n    const result = applyDecrypt(invalid)\n    expect(result).toBe(invalid)\n  })\n\n  it('cn merges classes sensibly', () => {\n    // Basic sanity check for class merge\n    const classes = cn('foo', { bar: true }, ['baz'])\n    // result should include tokens we passed\n    expect(classes).toEqual(expect.stringContaining('foo'))\n    expect(classes).toEqual(expect.stringContaining('bar'))\n    expect(classes).toEqual(expect.stringContaining('baz'))\n  })\n})\n",
      "reasoning": "Add unit tests for utils: encryption roundtrip, handling invalid ciphertext, and a simple sanity test for the cn helper. These are small, reliable tests that exercise code paths and error fallback behavior in utils.ts.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/storage.test.ts",
      "search": "",
      "replace": "import { describe, it, expect, beforeEach, vi } from 'vitest'\nimport {\n  getItem,\n  setItem,\n  storeItem,\n  removeItem,\n  getSessionItem,\n  setSessionItem,\n  removeSessionItem,\n  getTheme,\n  setTheme,\n  clearAllAuthData,\n  clearAuthorizationCodeData,\n} from '@/lib/storage'\n\n// Note: localforage operations are asynchronous; we keep the tests simple and focused\n\ndescribe('storage utilities', () => {\n  beforeEach(() => {\n    // clean test storage between tests\n    localStorage.clear()\n    sessionStorage.clear()\n  })\n\n  it('getTheme returns default when key not present and setTheme stores the value', () => {\n    const key = 'test-theme-key'\n    const defaultTheme = 'system'\n\n    expect(getTheme(key, defaultTheme)).toBe(defaultTheme)\n\n    setTheme(key, 'dark')\n    expect(localStorage.getItem(key)).toBe('dark')\n    expect(getTheme(key, defaultTheme)).toBe('dark')\n  })\n\n  it('session storage helpers: set, get, remove', () => {\n    setSessionItem('s1', 'value1')\n    expect(getSessionItem('s1')).toBe('value1')\n\n    removeSessionItem('s1')\n    expect(getSessionItem('s1')).toBeNull()\n  })\n\n  it('clearAllAuthData removes oauth-like keys from localStorage and sessionStorage', async () => {\n    // Add keys that should be removed\n    localStorage.setItem('oauth_token_1', 'abc')\n    localStorage.setItem('other_key', 'keep')\n    sessionStorage.setItem('pkce_abc', '123')\n\n    // also set a different key which should remain\n    sessionStorage.setItem('keep_me', 'yes')\n\n    await clearAllAuthData()\n\n    expect(localStorage.getItem('oauth_token_1')).toBeNull()\n    expect(localStorage.getItem('other_key')).toBe('keep')\n\n    expect(sessionStorage.getItem('pkce_abc')).toBeNull()\n    expect(sessionStorage.getItem('keep_me')).toBe('yes')\n  })\n\n  it('clearAuthorizationCodeData clears related session keys and replaces URL when code present', () => {\n    // Prepare session keys and url with ?code=\n    sessionStorage.setItem('authorization_code', 'thecode')\n    sessionStorage.setItem('oauth_code', 'foo')\n\n    // push a URL with code= to history\n    window.history.pushState({}, '', '?code=abc&other=1')\n\n    const replaceSpy = vi.spyOn(window.history, 'replaceState')\n\n    clearAuthorizationCodeData()\n\n    expect(sessionStorage.getItem('authorization_code')).toBeNull()\n    expect(sessionStorage.getItem('oauth_code')).toBeNull()\n\n    // verify we attempted to replace the URL (remove query params)\n    expect(replaceSpy).toHaveBeenCalled()\n\n    replaceSpy.mockRestore()\n  })\n})\n",
      "reasoning": "Test storage helpers (theme get/set), session storage helpers, clearAllAuthData cleaning of oauth-like keys, and clearAuthorizationCodeData behavior including URL replacement. These tests cover many branches in storage.ts and rely on JSDOM localStorage/sessionStorage and history APIs.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/theme-provider.test.tsx",
      "search": "",
      "replace": "import { describe, it, expect, vi } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { ThemeProvider, ThemeProviderContext } from '@/components/theme-provider'\nimport { useContext } from 'react'\n\nfunction ThemeConsumer() {\n  const ctx = useContext(ThemeProviderContext)\n  return (\n    <div>\n      <div role=\"status\">{ctx.theme}</div>\n      <button onClick={() => ctx.setTheme('dark')}>Set Dark</button>\n    </div>\n  )\n}\n\ndescribe('ThemeProvider', () => {\n  it('applies theme classes based on storage and updates on setTheme', async () => {\n    const user = userEvent.setup()\n\n    // ensure no pre-existing theme\n    localStorage.removeItem('vite-ui-theme')\n\n    // Render with defaultTheme light (via prop)\n    render(\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"vite-ui-theme\">\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    // initial theme should be 'light' due to default prop\n    const status = screen.getByRole('status')\n    expect(status).toHaveTextContent(/light/)\n\n    // documentElement should have 'light' class\n    expect(document.documentElement.classList.contains('light')).toBe(true)\n\n    // Click to change theme to dark with context.setTheme\n    await user.click(screen.getByRole('button', { name: /set dark/i }))\n\n    // localStorage should be updated\n    expect(localStorage.getItem('vite-ui-theme')).toBe('dark')\n\n    // documentElement should now include 'dark'\n    expect(document.documentElement.classList.contains('dark')).toBe(true)\n  })\n})\n",
      "reasoning": "Test ThemeProvider initial theme application (reads from storage/getTheme default path) and that calling context.setTheme updates storage and the document element class. This exercises ThemeProvider's useEffect and setTheme logic.",
      "confidence": "high"
    }
  ]
}
