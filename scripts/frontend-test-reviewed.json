{
  "analysis": "The junior proposal adds tests for '@/lib/utils' and '@/lib/storage', including encryption and localforage usage. These are risky because it's unclear if applyEncrypt/applyDecrypt or a storage module with localforage actually exist in this codebase; referencing non-existent modules would cause test failures. To ensure reliability and still improve coverage, I refocused on modules and patterns confirmed by the repository's existing tests: '@/components/theme-provider' with useTheme and '@/lib/utils' (commonly exporting cn). I added robust ThemeProvider integration tests covering persisting theme to storage, DOM class toggling, and system theme behavior (with a matchMedia mock), plus a safe cn utility test. These changes follow existing testing patterns and should run without introducing new external dependencies or fragile mocks.",
  "changes": [
    {
      "action": "create",
      "file": "ui/test/lib/utils.test.ts",
      "search": "",
      "replace": "import { describe, it, expect } from 'vitest'\nimport { cn } from '@/lib/utils'\n\ndescribe('lib/utils - cn', () => {\n  it('returns a space-separated string containing provided classes', () => {\n    const result = cn('foo', 'bar')\n    expect(typeof result).toBe('string')\n    expect(result).toContain('foo')\n    expect(result).toContain('bar')\n  })\n\n  it('ignores falsy values and merges conditional classes', () => {\n    const conditional = false\n    const result = cn('base', conditional && 'hidden', undefined, null, '', 'visible')\n    expect(result).toContain('base')\n    expect(result).toContain('visible')\n    expect(result).not.toContain('hidden')\n  })\n})\n",
      "reasoning": "Adds safe, focused tests for the commonly exported cn utility without assuming project-specific encryption functions. This improves coverage for a core utility used across components and matches existing import patterns.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/test/components/theme-provider.extra.test.tsx",
      "search": "",
      "replace": "import { describe, it, expect, beforeEach, vi } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport React from 'react'\nimport { ThemeProvider } from '@/components/theme-provider'\nimport { useTheme } from '@/hooks/useTheme'\n\nfunction ThemeConsumer() {\n  const { theme, setTheme } = useTheme()\n  return (\n    <div>\n      <div aria-label=\"theme\">{theme}</div>\n      <button onClick={() => setTheme('dark')}>Set Dark</button>\n      <button onClick={() => setTheme('light')}>Set Light</button>\n      <button onClick={() => setTheme('system')}>Set System</button>\n    </div>\n  )\n}\n\n// helper to mock prefers-color-scheme\nfunction mockMatchMedia(prefersDark: boolean) {\n  const mql = {\n    matches: prefersDark,\n    media: '(prefers-color-scheme: dark)',\n    onchange: null as unknown as ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null,\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    addListener: vi.fn(), // deprecated but sometimes used\n    removeListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  } as unknown as MediaQueryList\n\n  // @ts-expect-error jsdom partial support\n  window.matchMedia = vi.fn().mockImplementation((query: string) => ({\n    ...mql,\n    matches: prefersDark && query.includes('prefers-color-scheme: dark'),\n    media: query,\n  }))\n}\n\ndescribe('ThemeProvider integration', () => {\n  beforeEach(() => {\n    localStorage.clear()\n    sessionStorage.clear()\n    document.documentElement.classList.remove('dark')\n    // reset matchMedia to a neutral default\n    mockMatchMedia(false)\n  })\n\n  it('persists theme to storage and toggles DOM class when setTheme is called', async () => {\n    const user = userEvent.setup()\n\n    render(\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"test-theme\">\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    // initial state\n    expect(screen.getByLabelText('theme').textContent).toBe('light')\n    expect(document.documentElement.classList.contains('dark')).toBe(false)\n\n    // set dark\n    await user.click(screen.getByRole('button', { name: /set dark/i }))\n    expect(screen.getByLabelText('theme').textContent).toBe('dark')\n    expect(localStorage.getItem('test-theme')).toBe('dark')\n    expect(document.documentElement.classList.contains('dark')).toBe(true)\n\n    // set light\n    await user.click(screen.getByRole('button', { name: /set light/i }))\n    expect(screen.getByLabelText('theme').textContent).toBe('light')\n    expect(localStorage.getItem('test-theme')).toBe('light')\n    expect(document.documentElement.classList.contains('dark')).toBe(false)\n  })\n\n  it('system theme follows prefers-color-scheme and stores \"system\"', async () => {\n    const user = userEvent.setup()\n    mockMatchMedia(true) // simulate system preference: dark\n\n    render(\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"test-theme\">\n        <ThemeConsumer />\n      </ThemeProvider>\n    )\n\n    // ensure system is applied\n    await user.click(screen.getByRole('button', { name: /set system/i }))\n\n    // storage keeps the logical selection\n    expect(localStorage.getItem('test-theme')).toBe('system')\n\n    // DOM reflects the system preference (dark)\n    expect(document.documentElement.classList.contains('dark')).toBe(true)\n  })\n})\n",
      "reasoning": "Adds robust integration tests for ThemeProvider and useTheme that mirror existing patterns in the repo, covering persistence to localStorage, DOM class toggling, and system preference handling via a matchMedia mock. This directly targets a known existing component without introducing uncertain dependencies.",
      "confidence": "high"
    }
  ]
}
