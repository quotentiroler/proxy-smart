/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAuthUserinfo200Response,
  GetAuthUserinfo401Response,
  PostAuthIntrospect200Response,
  PostAuthToken200Response,
} from '../models/index';
import {
    GetAuthUserinfo200ResponseFromJSON,
    GetAuthUserinfo200ResponseToJSON,
    GetAuthUserinfo401ResponseFromJSON,
    GetAuthUserinfo401ResponseToJSON,
    PostAuthIntrospect200ResponseFromJSON,
    PostAuthIntrospect200ResponseToJSON,
    PostAuthToken200ResponseFromJSON,
    PostAuthToken200ResponseToJSON,
} from '../models/index';

export interface GetAuthAuthorizeRequest {
    responseType?: string;
    clientId?: string;
    redirectUri?: string;
    scope?: string;
    state?: string;
    codeChallenge?: string;
    codeChallengeMethod?: string;
}

export interface GetAuthUserinfoRequest {
    authorization: string;
}

export interface PostAuthIntrospectRequest {
    body: object;
}

export interface PostAuthTokenRequest {
    body: object;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Redirects to Keycloak authorization endpoint for OAuth flow
     * OAuth Authorization Endpoint
     */
    async getAuthAuthorizeRaw(requestParameters: GetAuthAuthorizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['responseType'] != null) {
            queryParameters['response_type'] = requestParameters['responseType'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['client_id'] = requestParameters['clientId'];
        }

        if (requestParameters['redirectUri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirectUri'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['codeChallenge'] != null) {
            queryParameters['code_challenge'] = requestParameters['codeChallenge'];
        }

        if (requestParameters['codeChallengeMethod'] != null) {
            queryParameters['code_challenge_method'] = requestParameters['codeChallengeMethod'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/authorize`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirects to Keycloak authorization endpoint for OAuth flow
     * OAuth Authorization Endpoint
     */
    async getAuthAuthorize(requestParameters: GetAuthAuthorizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAuthAuthorizeRaw(requestParameters, initOverrides);
    }

    /**
     * Get authenticated user profile information from JWT token
     * Get Current User Profile
     */
    async getAuthUserinfoRaw(requestParameters: GetAuthUserinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuthUserinfo200Response>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getAuthUserinfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/userinfo`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuthUserinfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get authenticated user profile information from JWT token
     * Get Current User Profile
     */
    async getAuthUserinfo(requestParameters: GetAuthUserinfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuthUserinfo200Response> {
        const response = await this.getAuthUserinfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate and get information about an access token
     * Token Introspection
     */
    async postAuthIntrospectRaw(requestParameters: PostAuthIntrospectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAuthIntrospect200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postAuthIntrospect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/introspect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAuthIntrospect200ResponseFromJSON(jsonValue));
    }

    /**
     * Validate and get information about an access token
     * Token Introspection
     */
    async postAuthIntrospect(requestParameters: PostAuthIntrospectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAuthIntrospect200Response> {
        const response = await this.postAuthIntrospectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exchange authorization code for access token
     * OAuth Token Exchange
     */
    async postAuthTokenRaw(requestParameters: PostAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAuthToken200Response>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling postAuthToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAuthToken200ResponseFromJSON(jsonValue));
    }

    /**
     * Exchange authorization code for access token
     * OAuth Token Exchange
     */
    async postAuthToken(requestParameters: PostAuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAuthToken200Response> {
        const response = await this.postAuthTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
