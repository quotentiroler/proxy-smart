/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFhirServers500Response,
  PostAiChat200Response,
  PostAiChatRequest,
} from '../models/index';
import {
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    PostAiChat200ResponseFromJSON,
    PostAiChat200ResponseToJSON,
    PostAiChatRequestFromJSON,
    PostAiChatRequestToJSON,
} from '../models/index';

export interface PostAiChatOperationRequest {
    postAiChatRequest: PostAiChatRequest;
}

/**
 * 
 */
export class AiApi extends runtime.BaseAPI {

    /**
     * Returns 200 when the AI assistant backend is reachable.
     * Check AI assistant availability
     */
    async headAiChatRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/ai/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns 200 when the AI assistant backend is reachable.
     * Check AI assistant availability
     */
    async headAiChat(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.headAiChatRaw(initOverrides);
    }

    /**
     * Forwards chat prompts to the MCP AI assistant server and returns enriched responses.
     * Proxy AI assistant chat request
     */
    async postAiChatRaw(requestParameters: PostAiChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAiChat200Response>> {
        if (requestParameters['postAiChatRequest'] == null) {
            throw new runtime.RequiredError(
                'postAiChatRequest',
                'Required parameter "postAiChatRequest" was null or undefined when calling postAiChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/ai/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAiChatRequestToJSON(requestParameters['postAiChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAiChat200ResponseFromJSON(jsonValue));
    }

    /**
     * Forwards chat prompts to the MCP AI assistant server and returns enriched responses.
     * Proxy AI assistant chat request
     */
    async postAiChat(requestParameters: PostAiChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAiChat200Response> {
        const response = await this.postAiChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
