/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  GetHealth422Response,
  HealthErrorResponse,
  HealthResponse,
  SystemStatusResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetHealth422ResponseFromJSON,
    GetHealth422ResponseToJSON,
    HealthErrorResponseFromJSON,
    HealthErrorResponseToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    SystemStatusResponseFromJSON,
    SystemStatusResponseToJSON,
} from '../models/index';

export interface GetHealthRequest {
    force?: string;
}

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     * Fast liveness/readiness probe. Use /status for detailed system information.
     * Health Check (lean)
     */
    async getHealthRaw(requestParameters: GetHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Fast liveness/readiness probe. Use /status for detailed system information.
     * Health Check (lean)
     */
    async getHealth(requestParameters: GetHealthRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.getHealthRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Comprehensive system status (cached components)
     * System Status
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemStatusResponseFromJSON(jsonValue));
    }

    /**
     * Comprehensive system status (cached components)
     * System Status
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemStatusResponse> {
        const response = await this.getStatusRaw(initOverrides);
        return await response.value();
    }

}
