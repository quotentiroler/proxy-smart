/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR Proxy
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     * Check the health status of the SMART on FHIR server
     * Health Check
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Check the health status of the SMART on FHIR server
     * Health Check
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getHealthRaw(initOverrides);
    }

    /**
     * Get comprehensive status of all system components (server, FHIR, Keycloak)
     * System Status
     */
    async getStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get comprehensive status of all system components (server, FHIR, Keycloak)
     * System Status
     */
    async getStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getStatusRaw(initOverrides);
    }

    /**
     * Restart the SMART on FHIR server process
     * Restart Server
     */
    async postRestartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/restart`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restart the SMART on FHIR server process
     * Restart Server
     */
    async postRestart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postRestartRaw(initOverrides);
    }

    /**
     * Gracefully shutdown the SMART on FHIR server
     * Shutdown Server
     */
    async postShutdownRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/shutdown`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gracefully shutdown the SMART on FHIR server
     * Shutdown Server
     */
    async postShutdown(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postShutdownRaw(initOverrides);
    }

}
