/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR Proxy
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PutAdminClientRegistrationSettingsRequest,
} from '../models/index';
import {
    PutAdminClientRegistrationSettingsRequestFromJSON,
    PutAdminClientRegistrationSettingsRequestToJSON,
} from '../models/index';

export interface PutAdminClientRegistrationSettingsOperationRequest {
    putAdminClientRegistrationSettingsRequest: PutAdminClientRegistrationSettingsRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAdminClientRegistrationSettingsRaw(initOverrides);
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaultsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/reset-defaults`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaults(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminClientRegistrationResetDefaultsRaw(initOverrides);
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-config/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminSmartConfigRefreshRaw(initOverrides);
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettingsRaw(requestParameters: PutAdminClientRegistrationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['putAdminClientRegistrationSettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminClientRegistrationSettingsRequest',
                'Required parameter "putAdminClientRegistrationSettingsRequest" was null or undefined when calling putAdminClientRegistrationSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminClientRegistrationSettingsRequestToJSON(requestParameters['putAdminClientRegistrationSettingsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettings(requestParameters: PutAdminClientRegistrationSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAdminClientRegistrationSettingsRaw(requestParameters, initOverrides);
    }

}
