/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientRegistrationSettings,
  ErrorResponse,
  GetHealth422Response,
  KeycloakConfigResponse,
  SaveKeycloakConfigRequest,
  SaveKeycloakConfigResponse,
  ServerOperationResponse,
  SmartConfigRefreshResponse,
  SuccessResponse,
  TestKeycloakConnectionRequest,
  TestKeycloakConnectionResponse,
} from '../models/index';
import {
    ClientRegistrationSettingsFromJSON,
    ClientRegistrationSettingsToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetHealth422ResponseFromJSON,
    GetHealth422ResponseToJSON,
    KeycloakConfigResponseFromJSON,
    KeycloakConfigResponseToJSON,
    SaveKeycloakConfigRequestFromJSON,
    SaveKeycloakConfigRequestToJSON,
    SaveKeycloakConfigResponseFromJSON,
    SaveKeycloakConfigResponseToJSON,
    ServerOperationResponseFromJSON,
    ServerOperationResponseToJSON,
    SmartConfigRefreshResponseFromJSON,
    SmartConfigRefreshResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    TestKeycloakConnectionRequestFromJSON,
    TestKeycloakConnectionRequestToJSON,
    TestKeycloakConnectionResponseFromJSON,
    TestKeycloakConnectionResponseToJSON,
} from '../models/index';

export interface PostAdminKeycloakConfigConfigureRequest {
    saveKeycloakConfigRequest: SaveKeycloakConfigRequest;
}

export interface PostAdminKeycloakConfigTestRequest {
    testKeycloakConnectionRequest: TestKeycloakConnectionRequest;
}

export interface PutAdminClientRegistrationSettingsRequest {
    clientRegistrationSettings: ClientRegistrationSettings;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientRegistrationSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientRegistrationSettingsFromJSON(jsonValue));
    }

    /**
     * Get current settings for dynamic client registration
     * Get Dynamic Client Registration Settings
     */
    async getAdminClientRegistrationSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientRegistrationSettings> {
        const response = await this.getAdminClientRegistrationSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current Keycloak settings for administrative purposes. Use /auth/config for public availability check.
     * Get Keycloak Admin Configuration
     */
    async getAdminKeycloakConfigStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeycloakConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeycloakConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get current Keycloak settings for administrative purposes. Use /auth/config for public availability check.
     * Get Keycloak Admin Configuration
     */
    async getAdminKeycloakConfigStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeycloakConfigResponse> {
        const response = await this.getAdminKeycloakConfigStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaultsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/reset-defaults`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Reset all client registration settings to their default values
     * Reset Client Registration Settings to Defaults
     */
    async postAdminClientRegistrationResetDefaults(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.postAdminClientRegistrationResetDefaultsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Save Keycloak configuration to environment and restart connection
     * Configure Keycloak Connection
     */
    async postAdminKeycloakConfigConfigureRaw(requestParameters: PostAdminKeycloakConfigConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveKeycloakConfigResponse>> {
        if (requestParameters['saveKeycloakConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'saveKeycloakConfigRequest',
                'Required parameter "saveKeycloakConfigRequest" was null or undefined when calling postAdminKeycloakConfigConfigure().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/configure`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveKeycloakConfigRequestToJSON(requestParameters['saveKeycloakConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveKeycloakConfigResponseFromJSON(jsonValue));
    }

    /**
     * Save Keycloak configuration to environment and restart connection
     * Configure Keycloak Connection
     */
    async postAdminKeycloakConfigConfigure(requestParameters: PostAdminKeycloakConfigConfigureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveKeycloakConfigResponse> {
        const response = await this.postAdminKeycloakConfigConfigureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test connection to Keycloak without saving configuration
     * Test Keycloak Connection
     */
    async postAdminKeycloakConfigTestRaw(requestParameters: PostAdminKeycloakConfigTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestKeycloakConnectionResponse>> {
        if (requestParameters['testKeycloakConnectionRequest'] == null) {
            throw new runtime.RequiredError(
                'testKeycloakConnectionRequest',
                'Required parameter "testKeycloakConnectionRequest" was null or undefined when calling postAdminKeycloakConfigTest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/keycloak-config/test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestKeycloakConnectionRequestToJSON(requestParameters['testKeycloakConnectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestKeycloakConnectionResponseFromJSON(jsonValue));
    }

    /**
     * Test connection to Keycloak without saving configuration
     * Test Keycloak Connection
     */
    async postAdminKeycloakConfigTest(requestParameters: PostAdminKeycloakConfigTestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestKeycloakConnectionResponse> {
        const response = await this.postAdminKeycloakConfigTestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restart the SMART on FHIR server (admin only)
     * Restart Server
     */
    async postAdminRestartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerOperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/restart`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Restart the SMART on FHIR server (admin only)
     * Restart Server
     */
    async postAdminRestart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerOperationResponse> {
        const response = await this.postAdminRestartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gracefully shutdown the SMART on FHIR server (admin only)
     * Shutdown Server
     */
    async postAdminShutdownRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerOperationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/shutdown`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Gracefully shutdown the SMART on FHIR server (admin only)
     * Shutdown Server
     */
    async postAdminShutdown(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerOperationResponse> {
        const response = await this.postAdminShutdownRaw(initOverrides);
        return await response.value();
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SmartConfigRefreshResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/smart-config/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SmartConfigRefreshResponseFromJSON(jsonValue));
    }

    /**
     * Manually refresh the cached SMART configuration from Keycloak
     * Refresh SMART Configuration Cache
     */
    async postAdminSmartConfigRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SmartConfigRefreshResponse> {
        const response = await this.postAdminSmartConfigRefreshRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettingsRaw(requestParameters: PutAdminClientRegistrationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['clientRegistrationSettings'] == null) {
            throw new runtime.RequiredError(
                'clientRegistrationSettings',
                'Required parameter "clientRegistrationSettings" was null or undefined when calling putAdminClientRegistrationSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/client-registration/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientRegistrationSettingsToJSON(requestParameters['clientRegistrationSettings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update settings for dynamic client registration
     * Update Dynamic Client Registration Settings
     */
    async putAdminClientRegistrationSettings(requestParameters: PutAdminClientRegistrationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.putAdminClientRegistrationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
