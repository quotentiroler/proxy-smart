/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateHealthcareUserRequest,
  ErrorResponse,
  GetAdminHealthcareUsersLimitParameter,
  GetAdminHealthcareUsersOffsetParameter,
  HealthcareUser,
  SuccessResponse,
  UpdateHealthcareUserRequest,
} from '../models/index';
import {
    CreateHealthcareUserRequestFromJSON,
    CreateHealthcareUserRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetAdminHealthcareUsersLimitParameterFromJSON,
    GetAdminHealthcareUsersLimitParameterToJSON,
    GetAdminHealthcareUsersOffsetParameterFromJSON,
    GetAdminHealthcareUsersOffsetParameterToJSON,
    HealthcareUserFromJSON,
    HealthcareUserToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UpdateHealthcareUserRequestFromJSON,
    UpdateHealthcareUserRequestToJSON,
} from '../models/index';

export interface DeleteAdminHealthcareUsersByUserIdRequest {
    userId: string;
}

export interface GetAdminHealthcareUsersRequest {
    limit?: GetAdminHealthcareUsersLimitParameter;
    offset?: GetAdminHealthcareUsersOffsetParameter;
}

export interface GetAdminHealthcareUsersByUserIdRequest {
    userId: string;
}

export interface PostAdminHealthcareUsersRequest {
    createHealthcareUserRequest: CreateHealthcareUserRequest;
}

export interface PutAdminHealthcareUsersByUserIdRequest {
    userId: string;
    updateHealthcareUserRequest: UpdateHealthcareUserRequest;
}

/**
 * 
 */
export class HealthcareUsersApi extends runtime.BaseAPI {

    /**
     * Delete a healthcare user by userId
     * Delete Healthcare User
     */
    async deleteAdminHealthcareUsersByUserIdRaw(requestParameters: DeleteAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete a healthcare user by userId
     * Delete Healthcare User
     */
    async deleteAdminHealthcareUsersByUserId(requestParameters: DeleteAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all healthcare users with optional pagination
     * List Healthcare Users
     */
    async getAdminHealthcareUsersRaw(requestParameters: GetAdminHealthcareUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HealthcareUser>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HealthcareUserFromJSON));
    }

    /**
     * Get all healthcare users with optional pagination
     * List Healthcare Users
     */
    async getAdminHealthcareUsers(requestParameters: GetAdminHealthcareUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HealthcareUser>> {
        const response = await this.getAdminHealthcareUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a healthcare user by userId
     * Get Healthcare User
     */
    async getAdminHealthcareUsersByUserIdRaw(requestParameters: GetAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthcareUser>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthcareUserFromJSON(jsonValue));
    }

    /**
     * Get a healthcare user by userId
     * Get Healthcare User
     */
    async getAdminHealthcareUsersByUserId(requestParameters: GetAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthcareUser> {
        const response = await this.getAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new healthcare user
     * Create Healthcare User
     */
    async postAdminHealthcareUsersRaw(requestParameters: PostAdminHealthcareUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthcareUser>> {
        if (requestParameters['createHealthcareUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createHealthcareUserRequest',
                'Required parameter "createHealthcareUserRequest" was null or undefined when calling postAdminHealthcareUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHealthcareUserRequestToJSON(requestParameters['createHealthcareUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthcareUserFromJSON(jsonValue));
    }

    /**
     * Create a new healthcare user
     * Create Healthcare User
     */
    async postAdminHealthcareUsers(requestParameters: PostAdminHealthcareUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthcareUser> {
        const response = await this.postAdminHealthcareUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a healthcare user by userId
     * Update Healthcare User
     */
    async putAdminHealthcareUsersByUserIdRaw(requestParameters: PutAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthcareUser>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminHealthcareUsersByUserId().'
            );
        }

        if (requestParameters['updateHealthcareUserRequest'] == null) {
            throw new runtime.RequiredError(
                'updateHealthcareUserRequest',
                'Required parameter "updateHealthcareUserRequest" was null or undefined when calling putAdminHealthcareUsersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/healthcare-users/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateHealthcareUserRequestToJSON(requestParameters['updateHealthcareUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthcareUserFromJSON(jsonValue));
    }

    /**
     * Update a healthcare user by userId
     * Update Healthcare User
     */
    async putAdminHealthcareUsersByUserId(requestParameters: PutAdminHealthcareUsersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthcareUser> {
        const response = await this.putAdminHealthcareUsersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
