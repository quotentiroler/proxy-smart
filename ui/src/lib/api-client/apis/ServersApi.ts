/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFhirServerRequest,
  AddFhirServerResponse,
  CertificateUpload,
  ErrorResponse,
  FhirServerDetails,
  FhirServerList,
  GetHealth422Response,
  MtlsConfig,
  UpdateFhirServerRequest,
  UpdateFhirServerResponse,
  UpdateMtlsConfigRequest,
  UpdateMtlsConfigResponse,
  UploadCertificateRequest,
} from '../models/index';
import {
    AddFhirServerRequestFromJSON,
    AddFhirServerRequestToJSON,
    AddFhirServerResponseFromJSON,
    AddFhirServerResponseToJSON,
    CertificateUploadFromJSON,
    CertificateUploadToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FhirServerDetailsFromJSON,
    FhirServerDetailsToJSON,
    FhirServerListFromJSON,
    FhirServerListToJSON,
    GetHealth422ResponseFromJSON,
    GetHealth422ResponseToJSON,
    MtlsConfigFromJSON,
    MtlsConfigToJSON,
    UpdateFhirServerRequestFromJSON,
    UpdateFhirServerRequestToJSON,
    UpdateFhirServerResponseFromJSON,
    UpdateFhirServerResponseToJSON,
    UpdateMtlsConfigRequestFromJSON,
    UpdateMtlsConfigRequestToJSON,
    UpdateMtlsConfigResponseFromJSON,
    UpdateMtlsConfigResponseToJSON,
    UploadCertificateRequestFromJSON,
    UploadCertificateRequestToJSON,
} from '../models/index';

export interface GetFhirServersByServerIdRequest {
    serverId: string;
}

export interface GetFhirServersByServerIdMtlsRequest {
    serverId: string;
}

export interface PostFhirServersRequest {
    addFhirServerRequest: AddFhirServerRequest;
}

export interface PostFhirServersByServerIdMtlsCertificatesRequest {
    serverId: string;
    uploadCertificateRequest: UploadCertificateRequest;
}

export interface PutFhirServersByServerIdRequest {
    serverId: string;
    updateFhirServerRequest: UpdateFhirServerRequest;
}

export interface PutFhirServersByServerIdMtlsRequest {
    serverId: string;
    updateMtlsConfigRequest: UpdateMtlsConfigRequest;
}

/**
 * 
 */
export class ServersApi extends runtime.BaseAPI {

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FhirServerList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FhirServerListFromJSON(jsonValue));
    }

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FhirServerList> {
        const response = await this.getFhirServersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerIdRaw(requestParameters: GetFhirServersByServerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FhirServerDetails>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getFhirServersByServerId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/{server_id}`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FhirServerDetailsFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerId(requestParameters: GetFhirServersByServerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FhirServerDetails> {
        const response = await this.getFhirServersByServerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the mutual TLS configuration for a specific FHIR server
     * Get mTLS Configuration
     */
    async getFhirServersByServerIdMtlsRaw(requestParameters: GetFhirServersByServerIdMtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MtlsConfig>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getFhirServersByServerIdMtls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/{server_id}/mtls`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MtlsConfigFromJSON(jsonValue));
    }

    /**
     * Get the mutual TLS configuration for a specific FHIR server
     * Get mTLS Configuration
     */
    async getFhirServersByServerIdMtls(requestParameters: GetFhirServersByServerIdMtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MtlsConfig> {
        const response = await this.getFhirServersByServerIdMtlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new FHIR server to the system by providing its base URL
     * Add New FHIR Server
     */
    async postFhirServersRaw(requestParameters: PostFhirServersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddFhirServerResponse>> {
        if (requestParameters['addFhirServerRequest'] == null) {
            throw new runtime.RequiredError(
                'addFhirServerRequest',
                'Required parameter "addFhirServerRequest" was null or undefined when calling postFhirServers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFhirServerRequestToJSON(requestParameters['addFhirServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddFhirServerResponseFromJSON(jsonValue));
    }

    /**
     * Add a new FHIR server to the system by providing its base URL
     * Add New FHIR Server
     */
    async postFhirServers(requestParameters: PostFhirServersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddFhirServerResponse> {
        const response = await this.postFhirServersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a certificate or private key for mTLS authentication
     * Upload Certificate
     */
    async postFhirServersByServerIdMtlsCertificatesRaw(requestParameters: PostFhirServersByServerIdMtlsCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificateUpload>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling postFhirServersByServerIdMtlsCertificates().'
            );
        }

        if (requestParameters['uploadCertificateRequest'] == null) {
            throw new runtime.RequiredError(
                'uploadCertificateRequest',
                'Required parameter "uploadCertificateRequest" was null or undefined when calling postFhirServersByServerIdMtlsCertificates().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/{server_id}/mtls/certificates`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadCertificateRequestToJSON(requestParameters['uploadCertificateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificateUploadFromJSON(jsonValue));
    }

    /**
     * Upload a certificate or private key for mTLS authentication
     * Upload Certificate
     */
    async postFhirServersByServerIdMtlsCertificates(requestParameters: PostFhirServersByServerIdMtlsCertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificateUpload> {
        const response = await this.postFhirServersByServerIdMtlsCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing FHIR server by providing its new base URL
     * Update FHIR Server
     */
    async putFhirServersByServerIdRaw(requestParameters: PutFhirServersByServerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateFhirServerResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling putFhirServersByServerId().'
            );
        }

        if (requestParameters['updateFhirServerRequest'] == null) {
            throw new runtime.RequiredError(
                'updateFhirServerRequest',
                'Required parameter "updateFhirServerRequest" was null or undefined when calling putFhirServersByServerId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/{server_id}`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFhirServerRequestToJSON(requestParameters['updateFhirServerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFhirServerResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing FHIR server by providing its new base URL
     * Update FHIR Server
     */
    async putFhirServersByServerId(requestParameters: PutFhirServersByServerIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateFhirServerResponse> {
        const response = await this.putFhirServersByServerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable mutual TLS for a specific FHIR server
     * Update mTLS Configuration
     */
    async putFhirServersByServerIdMtlsRaw(requestParameters: PutFhirServersByServerIdMtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateMtlsConfigResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling putFhirServersByServerIdMtls().'
            );
        }

        if (requestParameters['updateMtlsConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMtlsConfigRequest',
                'Required parameter "updateMtlsConfigRequest" was null or undefined when calling putFhirServersByServerIdMtls().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/{server_id}/mtls`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMtlsConfigRequestToJSON(requestParameters['updateMtlsConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMtlsConfigResponseFromJSON(jsonValue));
    }

    /**
     * Enable or disable mutual TLS for a specific FHIR server
     * Update mTLS Configuration
     */
    async putFhirServersByServerIdMtls(requestParameters: PutFhirServersByServerIdMtlsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateMtlsConfigResponse> {
        const response = await this.putFhirServersByServerIdMtlsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
