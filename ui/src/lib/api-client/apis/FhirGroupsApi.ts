/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAdminFhirGroups200ResponseInner,
  GetAdminFhirGroupsByGroupIdMembers200ResponseInner,
  GetAdminFhirGroupsMembershipsUsers200ResponseInner,
  PostAdminFhirGroups200Response,
  PostAdminFhirGroupsRequest,
  PostShutdown500Response,
  PutAdminFhirGroupsByGroupIdRequest,
  PutAdminSmartAppsByClientId200Response,
} from '../models/index';
import {
    GetAdminFhirGroups200ResponseInnerFromJSON,
    GetAdminFhirGroups200ResponseInnerToJSON,
    GetAdminFhirGroupsByGroupIdMembers200ResponseInnerFromJSON,
    GetAdminFhirGroupsByGroupIdMembers200ResponseInnerToJSON,
    GetAdminFhirGroupsMembershipsUsers200ResponseInnerFromJSON,
    GetAdminFhirGroupsMembershipsUsers200ResponseInnerToJSON,
    PostAdminFhirGroups200ResponseFromJSON,
    PostAdminFhirGroups200ResponseToJSON,
    PostAdminFhirGroupsRequestFromJSON,
    PostAdminFhirGroupsRequestToJSON,
    PostShutdown500ResponseFromJSON,
    PostShutdown500ResponseToJSON,
    PutAdminFhirGroupsByGroupIdRequestFromJSON,
    PutAdminFhirGroupsByGroupIdRequestToJSON,
    PutAdminSmartAppsByClientId200ResponseFromJSON,
    PutAdminSmartAppsByClientId200ResponseToJSON,
} from '../models/index';

export interface DeleteAdminFhirGroupsByGroupIdRequest {
    groupId: string;
}

export interface DeleteAdminFhirGroupsByGroupIdMembersByUserIdRequest {
    groupId: string;
    userId: string;
}

export interface GetAdminFhirGroupsByGroupIdRequest {
    groupId: string;
}

export interface GetAdminFhirGroupsByGroupIdMembersRequest {
    groupId: string;
}

export interface PostAdminFhirGroupsOperationRequest {
    postAdminFhirGroupsRequest: PostAdminFhirGroupsRequest;
}

export interface PostAdminFhirGroupsByGroupIdMembersByUserIdRequest {
    groupId: string;
    userId: string;
}

export interface PutAdminFhirGroupsByGroupIdOperationRequest {
    groupId: string;
    putAdminFhirGroupsByGroupIdRequest: PutAdminFhirGroupsByGroupIdRequest;
}

/**
 * 
 */
export class FhirGroupsApi extends runtime.BaseAPI {

    /**
     * Delete a FHIR group and remove all user memberships
     * Delete FHIR Group
     */
    async deleteAdminFhirGroupsByGroupIdRaw(requestParameters: DeleteAdminFhirGroupsByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling deleteAdminFhirGroupsByGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a FHIR group and remove all user memberships
     * Delete FHIR Group
     */
    async deleteAdminFhirGroupsByGroupId(requestParameters: DeleteAdminFhirGroupsByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.deleteAdminFhirGroupsByGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a FHIR group
     * Remove User from Group
     */
    async deleteAdminFhirGroupsByGroupIdMembersByUserIdRaw(requestParameters: DeleteAdminFhirGroupsByGroupIdMembersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling deleteAdminFhirGroupsByGroupIdMembersByUserId().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminFhirGroupsByGroupIdMembersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}/members/{userId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user from a FHIR group
     * Remove User from Group
     */
    async deleteAdminFhirGroupsByGroupIdMembersByUserId(requestParameters: DeleteAdminFhirGroupsByGroupIdMembersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.deleteAdminFhirGroupsByGroupIdMembersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all FHIR groups for row-level access management
     * List FHIR Groups
     */
    async getAdminFhirGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminFhirGroups200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminFhirGroups200ResponseInnerFromJSON));
    }

    /**
     * Get all FHIR groups for row-level access management
     * List FHIR Groups
     */
    async getAdminFhirGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminFhirGroups200ResponseInner>> {
        const response = await this.getAdminFhirGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a specific FHIR group by ID
     * Get FHIR Group
     */
    async getAdminFhirGroupsByGroupIdRaw(requestParameters: GetAdminFhirGroupsByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminFhirGroups200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getAdminFhirGroupsByGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminFhirGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific FHIR group by ID
     * Get FHIR Group
     */
    async getAdminFhirGroupsByGroupId(requestParameters: GetAdminFhirGroupsByGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminFhirGroups200Response> {
        const response = await this.getAdminFhirGroupsByGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all members of a specific FHIR group
     * Get Group Members
     */
    async getAdminFhirGroupsByGroupIdMembersRaw(requestParameters: GetAdminFhirGroupsByGroupIdMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminFhirGroupsByGroupIdMembers200ResponseInner>>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling getAdminFhirGroupsByGroupIdMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}/members`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminFhirGroupsByGroupIdMembers200ResponseInnerFromJSON));
    }

    /**
     * Get all members of a specific FHIR group
     * Get Group Members
     */
    async getAdminFhirGroupsByGroupIdMembers(requestParameters: GetAdminFhirGroupsByGroupIdMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminFhirGroupsByGroupIdMembers200ResponseInner>> {
        const response = await this.getAdminFhirGroupsByGroupIdMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get group memberships for all users
     * Get Group Memberships
     */
    async getAdminFhirGroupsMembershipsUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminFhirGroupsMembershipsUsers200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/memberships/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminFhirGroupsMembershipsUsers200ResponseInnerFromJSON));
    }

    /**
     * Get group memberships for all users
     * Get Group Memberships
     */
    async getAdminFhirGroupsMembershipsUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminFhirGroupsMembershipsUsers200ResponseInner>> {
        const response = await this.getAdminFhirGroupsMembershipsUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a new FHIR group for access management
     * Create FHIR Group
     */
    async postAdminFhirGroupsRaw(requestParameters: PostAdminFhirGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminFhirGroups200Response>> {
        if (requestParameters['postAdminFhirGroupsRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminFhirGroupsRequest',
                'Required parameter "postAdminFhirGroupsRequest" was null or undefined when calling postAdminFhirGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminFhirGroupsRequestToJSON(requestParameters['postAdminFhirGroupsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminFhirGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new FHIR group for access management
     * Create FHIR Group
     */
    async postAdminFhirGroups(requestParameters: PostAdminFhirGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminFhirGroups200Response> {
        const response = await this.postAdminFhirGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a user to a FHIR group
     * Add User to Group
     */
    async postAdminFhirGroupsByGroupIdMembersByUserIdRaw(requestParameters: PostAdminFhirGroupsByGroupIdMembersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminSmartAppsByClientId200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling postAdminFhirGroupsByGroupIdMembersByUserId().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminFhirGroupsByGroupIdMembersByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}/members/{userId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminSmartAppsByClientId200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a user to a FHIR group
     * Add User to Group
     */
    async postAdminFhirGroupsByGroupIdMembersByUserId(requestParameters: PostAdminFhirGroupsByGroupIdMembersByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminSmartAppsByClientId200Response> {
        const response = await this.postAdminFhirGroupsByGroupIdMembersByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing FHIR group
     * Update FHIR Group
     */
    async putAdminFhirGroupsByGroupIdRaw(requestParameters: PutAdminFhirGroupsByGroupIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostAdminFhirGroups200Response>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling putAdminFhirGroupsByGroupId().'
            );
        }

        if (requestParameters['putAdminFhirGroupsByGroupIdRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminFhirGroupsByGroupIdRequest',
                'Required parameter "putAdminFhirGroupsByGroupIdRequest" was null or undefined when calling putAdminFhirGroupsByGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/fhir-groups/{groupId}`;
        urlPath = urlPath.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters['groupId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminFhirGroupsByGroupIdRequestToJSON(requestParameters['putAdminFhirGroupsByGroupIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostAdminFhirGroups200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing FHIR group
     * Update FHIR Group
     */
    async putAdminFhirGroupsByGroupId(requestParameters: PutAdminFhirGroupsByGroupIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostAdminFhirGroups200Response> {
        const response = await this.putAdminFhirGroupsByGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
