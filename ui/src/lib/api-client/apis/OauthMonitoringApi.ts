/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR Proxy
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetMonitoringOauthAnalyticsRequest {
    authorization?: string;
}

export interface GetMonitoringOauthAnalyticsExportRequest {
    authorization: string;
}

export interface GetMonitoringOauthAnalyticsStreamRequest {
    authorization?: string;
    token?: string;
}

export interface GetMonitoringOauthEventsRequest {
    authorization?: string;
    limit?: string;
    type?: string;
    status?: string;
    clientId?: string;
    since?: string;
}

export interface GetMonitoringOauthEventsExportRequest {
    authorization: string;
}

export interface GetMonitoringOauthEventsStreamRequest {
    authorization?: string;
    token?: string;
}

export interface GetMonitoringOauthHealthRequest {
    authorization?: string;
}

/**
 * 
 */
export class OauthMonitoringApi extends runtime.BaseAPI {

    /**
     * Get current OAuth analytics and metrics
     * Get OAuth Analytics
     */
    async getMonitoringOauthAnalyticsRaw(requestParameters: GetMonitoringOauthAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/analytics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get current OAuth analytics and metrics
     * Get OAuth Analytics
     */
    async getMonitoringOauthAnalytics(requestParameters: GetMonitoringOauthAnalyticsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthAnalyticsRaw(requestParameters, initOverrides);
    }

    /**
     * Download current OAuth analytics data as JSON file
     * Export Analytics Data
     */
    async getMonitoringOauthAnalyticsExportRaw(requestParameters: GetMonitoringOauthAnalyticsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getMonitoringOauthAnalyticsExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/analytics/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download current OAuth analytics data as JSON file
     * Export Analytics Data
     */
    async getMonitoringOauthAnalyticsExport(requestParameters: GetMonitoringOauthAnalyticsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthAnalyticsExportRaw(requestParameters, initOverrides);
    }

    /**
     * Server-sent events stream for real-time OAuth analytics updates. Token can be passed as query parameter or Authorization header.
     * OAuth Analytics Stream
     */
    async getMonitoringOauthAnalyticsStreamRaw(requestParameters: GetMonitoringOauthAnalyticsStreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/analytics/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Server-sent events stream for real-time OAuth analytics updates. Token can be passed as query parameter or Authorization header.
     * OAuth Analytics Stream
     */
    async getMonitoringOauthAnalyticsStream(requestParameters: GetMonitoringOauthAnalyticsStreamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthAnalyticsStreamRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve recent OAuth events with optional filtering
     * Get OAuth Events
     */
    async getMonitoringOauthEventsRaw(requestParameters: GetMonitoringOauthEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['clientId'] != null) {
            queryParameters['clientId'] = requestParameters['clientId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve recent OAuth events with optional filtering
     * Get OAuth Events
     */
    async getMonitoringOauthEvents(requestParameters: GetMonitoringOauthEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthEventsRaw(requestParameters, initOverrides);
    }

    /**
     * Download OAuth events log as JSONL file
     * Export Events Data
     */
    async getMonitoringOauthEventsExportRaw(requestParameters: GetMonitoringOauthEventsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling getMonitoringOauthEventsExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/events/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download OAuth events log as JSONL file
     * Export Events Data
     */
    async getMonitoringOauthEventsExport(requestParameters: GetMonitoringOauthEventsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthEventsExportRaw(requestParameters, initOverrides);
    }

    /**
     * Server-sent events stream for real-time OAuth flow monitoring. Token can be passed as query parameter or Authorization header.
     * OAuth Events Stream
     */
    async getMonitoringOauthEventsStreamRaw(requestParameters: GetMonitoringOauthEventsStreamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/events/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Server-sent events stream for real-time OAuth flow monitoring. Token can be passed as query parameter or Authorization header.
     * OAuth Events Stream
     */
    async getMonitoringOauthEventsStream(requestParameters: GetMonitoringOauthEventsStreamRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthEventsStreamRaw(requestParameters, initOverrides);
    }

    /**
     * Get OAuth system health metrics and alerts
     * Get System Health
     */
    async getMonitoringOauthHealthRaw(requestParameters: GetMonitoringOauthHealthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/monitoring/oauth/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get OAuth system health metrics and alerts
     * Get System Health
     */
    async getMonitoringOauthHealth(requestParameters: GetMonitoringOauthHealthRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMonitoringOauthHealthRaw(requestParameters, initOverrides);
    }

    /**
     * Information about the OAuth monitoring WebSocket endpoint
     * WebSocket Connection Info
     */
    async getOauthMonitoringWebsocketInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/oauth/monitoring/websocket/info`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Information about the OAuth monitoring WebSocket endpoint
     * WebSocket Connection Info
     */
    async getOauthMonitoringWebsocketInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getOauthMonitoringWebsocketInfoRaw(initOverrides);
    }

}
