/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR Proxy
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.3-alpha.202508040909.684a054
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostShutdown500Response,
  PostSmartProxyByServerNameByFhirVersionCacheRefresh200Response,
} from '../models/index';
import {
    PostShutdown500ResponseFromJSON,
    PostShutdown500ResponseToJSON,
    PostSmartProxyByServerNameByFhirVersionCacheRefresh200ResponseFromJSON,
    PostSmartProxyByServerNameByFhirVersionCacheRefresh200ResponseToJSON,
} from '../models/index';

export interface GetSmartProxyByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

export interface PostSmartProxyByServerNameByFhirVersionCacheRefreshRequest {
    serverName: string;
    fhirVersion: string;
}

/**
 * 
 */
export class FhirApi extends runtime.BaseAPI {

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getSmartProxyByServerNameByFhirVersionRaw(requestParameters: GetSmartProxyByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling getSmartProxyByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling getSmartProxyByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/smart-proxy/{server_name}/{fhir_version}/`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getSmartProxyByServerNameByFhirVersion(requestParameters: GetSmartProxyByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSmartProxyByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postSmartProxyByServerNameByFhirVersionCacheRefreshRaw(requestParameters: PostSmartProxyByServerNameByFhirVersionCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostSmartProxyByServerNameByFhirVersionCacheRefresh200Response>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling postSmartProxyByServerNameByFhirVersionCacheRefresh().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling postSmartProxyByServerNameByFhirVersionCacheRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/smart-proxy/{server_name}/{fhir_version}/cache/refresh`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostSmartProxyByServerNameByFhirVersionCacheRefresh200ResponseFromJSON(jsonValue));
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postSmartProxyByServerNameByFhirVersionCacheRefresh(requestParameters: PostSmartProxyByServerNameByFhirVersionCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostSmartProxyByServerNameByFhirVersionCacheRefresh200Response> {
        const response = await this.postSmartProxyByServerNameByFhirVersionCacheRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
