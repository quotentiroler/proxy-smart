/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CacheRefreshResponse,
  ErrorResponse,
} from '../models/index';
import {
    CacheRefreshResponseFromJSON,
    CacheRefreshResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface DeleteProxySmartBackendByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

export interface GetProxySmartBackendByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

export interface GetProxySmartBackendByServerNameByFhirVersion0Request {
    serverName: string;
    fhirVersion: string;
}

export interface PatchProxySmartBackendByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

export interface PostProxySmartBackendByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

export interface PostProxySmartBackendByServerNameByFhirVersionCacheRefreshRequest {
    serverName: string;
    fhirVersion: string;
}

export interface PutProxySmartBackendByServerNameByFhirVersionRequest {
    serverName: string;
    fhirVersion: string;
}

/**
 * 
 */
export class FhirApi extends runtime.BaseAPI {

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async deleteProxySmartBackendByServerNameByFhirVersionRaw(requestParameters: DeleteProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling deleteProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling deleteProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/*`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async deleteProxySmartBackendByServerNameByFhirVersion(requestParameters: DeleteProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.deleteProxySmartBackendByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getProxySmartBackendByServerNameByFhirVersionRaw(requestParameters: GetProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling getProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling getProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getProxySmartBackendByServerNameByFhirVersion(requestParameters: GetProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getProxySmartBackendByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async getProxySmartBackendByServerNameByFhirVersion_1Raw(requestParameters: GetProxySmartBackendByServerNameByFhirVersion0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling getProxySmartBackendByServerNameByFhirVersion_1().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling getProxySmartBackendByServerNameByFhirVersion_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/*`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async getProxySmartBackendByServerNameByFhirVersion_1(requestParameters: GetProxySmartBackendByServerNameByFhirVersion0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getProxySmartBackendByServerNameByFhirVersion_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async patchProxySmartBackendByServerNameByFhirVersionRaw(requestParameters: PatchProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling patchProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling patchProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/*`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async patchProxySmartBackendByServerNameByFhirVersion(requestParameters: PatchProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.patchProxySmartBackendByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async postProxySmartBackendByServerNameByFhirVersionRaw(requestParameters: PostProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling postProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling postProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/*`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async postProxySmartBackendByServerNameByFhirVersion(requestParameters: PostProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postProxySmartBackendByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postProxySmartBackendByServerNameByFhirVersionCacheRefreshRaw(requestParameters: PostProxySmartBackendByServerNameByFhirVersionCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CacheRefreshResponse>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling postProxySmartBackendByServerNameByFhirVersionCacheRefresh().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling postProxySmartBackendByServerNameByFhirVersionCacheRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/cache/refresh`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CacheRefreshResponseFromJSON(jsonValue));
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postProxySmartBackendByServerNameByFhirVersionCacheRefresh(requestParameters: PostProxySmartBackendByServerNameByFhirVersionCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CacheRefreshResponse> {
        const response = await this.postProxySmartBackendByServerNameByFhirVersionCacheRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async putProxySmartBackendByServerNameByFhirVersionRaw(requestParameters: PutProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling putProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        if (requestParameters['fhirVersion'] == null) {
            throw new runtime.RequiredError(
                'fhirVersion',
                'Required parameter "fhirVersion" was null or undefined when calling putProxySmartBackendByServerNameByFhirVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/proxy-smart-backend/{server_name}/{fhir_version}/*`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));
        urlPath = urlPath.replace(`{${"fhir_version"}}`, encodeURIComponent(String(requestParameters['fhirVersion'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Proxy authenticated FHIR requests to the upstream FHIR server
     * FHIR Resource Proxy
     */
    async putProxySmartBackendByServerNameByFhirVersion(requestParameters: PutProxySmartBackendByServerNameByFhirVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.putProxySmartBackendByServerNameByFhirVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
