/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  LaunchContextUser,
  SetFhirContextRequest,
  SetIntentRequest,
  SetNeedPatientBannerRequest,
  SetSmartStyleUrlRequest,
  SetTenantRequest,
  SuccessResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LaunchContextUserFromJSON,
    LaunchContextUserToJSON,
    SetFhirContextRequestFromJSON,
    SetFhirContextRequestToJSON,
    SetIntentRequestFromJSON,
    SetIntentRequestToJSON,
    SetNeedPatientBannerRequestFromJSON,
    SetNeedPatientBannerRequestToJSON,
    SetSmartStyleUrlRequestFromJSON,
    SetSmartStyleUrlRequestToJSON,
    SetTenantRequestFromJSON,
    SetTenantRequestToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
} from '../models/index';

export interface DeleteAdminLaunchContextsByUserIdEncounterRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdFhirContextRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdFhirUserRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdIntentRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdPatientRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdTenantRequest {
    userId: string;
}

export interface PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest {
    userId: string;
    encounterId: string;
}

export interface PostAdminLaunchContextsByUserIdFhirContextRequest {
    userId: string;
    setFhirContextRequest: SetFhirContextRequest;
}

export interface PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest {
    userId: string;
    fhirUserId: string;
}

export interface PostAdminLaunchContextsByUserIdPatientByPatientIdRequest {
    userId: string;
    patientId: string;
}

export interface PutAdminLaunchContextsByUserIdIntentRequest {
    userId: string;
    setIntentRequest: SetIntentRequest;
}

export interface PutAdminLaunchContextsByUserIdNeedPatientBannerRequest {
    userId: string;
    setNeedPatientBannerRequest: SetNeedPatientBannerRequest;
}

export interface PutAdminLaunchContextsByUserIdSmartStyleUrlRequest {
    userId: string;
    setSmartStyleUrlRequest: SetSmartStyleUrlRequest;
}

export interface PutAdminLaunchContextsByUserIdTenantRequest {
    userId: string;
    setTenantRequest: SetTenantRequest;
}

/**
 * 
 */
export class LaunchContextsApi extends runtime.BaseAPI {

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdEncounter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/encounter`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounter(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove additional FHIR resources in context
     * Remove FHIR Context
     */
    async deleteAdminLaunchContextsByUserIdFhirContextRaw(requestParameters: DeleteAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-context`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove additional FHIR resources in context
     * Remove FHIR Context
     */
    async deleteAdminLaunchContextsByUserIdFhirContext(requestParameters: DeleteAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdFhirContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the fhirUser context for a user
     * Remove FHIR User Context
     */
    async deleteAdminLaunchContextsByUserIdFhirUserRaw(requestParameters: DeleteAdminLaunchContextsByUserIdFhirUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdFhirUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-user`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the fhirUser context for a user
     * Remove FHIR User Context
     */
    async deleteAdminLaunchContextsByUserIdFhirUser(requestParameters: DeleteAdminLaunchContextsByUserIdFhirUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdFhirUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the intent context for a user
     * Remove Intent Context
     */
    async deleteAdminLaunchContextsByUserIdIntentRaw(requestParameters: DeleteAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdIntent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/intent`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the intent context for a user
     * Remove Intent Context
     */
    async deleteAdminLaunchContextsByUserIdIntent(requestParameters: DeleteAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdIntentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the need-patient-banner context for a user
     * Remove Need Patient Banner Context
     */
    async deleteAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters: DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/need-patient-banner`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the need-patient-banner context for a user
     * Remove Need Patient Banner Context
     */
    async deleteAdminLaunchContextsByUserIdNeedPatientBanner(requestParameters: DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdPatient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/patient`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatient(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the smart-style-url context for a user
     * Remove Smart Style URL Context
     */
    async deleteAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters: DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/smart-style-url`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the smart-style-url context for a user
     * Remove Smart Style URL Context
     */
    async deleteAdminLaunchContextsByUserIdSmartStyleUrl(requestParameters: DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the tenant context for a user
     * Remove Tenant Context
     */
    async deleteAdminLaunchContextsByUserIdTenantRaw(requestParameters: DeleteAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/tenant`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Remove the tenant context for a user
     * Remove Tenant Context
     */
    async deleteAdminLaunchContextsByUserIdTenant(requestParameters: DeleteAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.deleteAdminLaunchContextsByUserIdTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContextsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LaunchContextUser>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LaunchContextUserFromJSON));
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContexts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LaunchContextUser>> {
        const response = await this.getAdminLaunchContextsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        if (requestParameters['encounterId'] == null) {
            throw new runtime.RequiredError(
                'encounterId',
                'Required parameter "encounterId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/encounter/{encounterId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"encounterId"}}`, encodeURIComponent(String(requestParameters['encounterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterId(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set additional FHIR resources in context as per SMART 2.2.0 spec
     * Set FHIR Context
     */
    async postAdminLaunchContextsByUserIdFhirContextRaw(requestParameters: PostAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        if (requestParameters['setFhirContextRequest'] == null) {
            throw new runtime.RequiredError(
                'setFhirContextRequest',
                'Required parameter "setFhirContextRequest" was null or undefined when calling postAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-context`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetFhirContextRequestToJSON(requestParameters['setFhirContextRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set additional FHIR resources in context as per SMART 2.2.0 spec
     * Set FHIR Context
     */
    async postAdminLaunchContextsByUserIdFhirContext(requestParameters: PostAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.postAdminLaunchContextsByUserIdFhirContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the fhirUser context for a user (e.g., Practitioner/123)
     * Set FHIR User Context
     */
    async postAdminLaunchContextsByUserIdFhirUserByFhirUserIdRaw(requestParameters: PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirUserByFhirUserId().'
            );
        }

        if (requestParameters['fhirUserId'] == null) {
            throw new runtime.RequiredError(
                'fhirUserId',
                'Required parameter "fhirUserId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirUserByFhirUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-user/{fhirUserId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"fhirUserId"}}`, encodeURIComponent(String(requestParameters['fhirUserId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the fhirUser context for a user (e.g., Practitioner/123)
     * Set FHIR User Context
     */
    async postAdminLaunchContextsByUserIdFhirUserByFhirUserId(requestParameters: PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.postAdminLaunchContextsByUserIdFhirUserByFhirUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/patient/{patientId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientId(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the intent context for a user
     * Set Intent Context
     */
    async putAdminLaunchContextsByUserIdIntentRaw(requestParameters: PutAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdIntent().'
            );
        }

        if (requestParameters['setIntentRequest'] == null) {
            throw new runtime.RequiredError(
                'setIntentRequest',
                'Required parameter "setIntentRequest" was null or undefined when calling putAdminLaunchContextsByUserIdIntent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/intent`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetIntentRequestToJSON(requestParameters['setIntentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the intent context for a user
     * Set Intent Context
     */
    async putAdminLaunchContextsByUserIdIntent(requestParameters: PutAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.putAdminLaunchContextsByUserIdIntentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set whether patient banner is required for a user
     * Set Need Patient Banner Context
     */
    async putAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters: PutAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        if (requestParameters['setNeedPatientBannerRequest'] == null) {
            throw new runtime.RequiredError(
                'setNeedPatientBannerRequest',
                'Required parameter "setNeedPatientBannerRequest" was null or undefined when calling putAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/need-patient-banner`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetNeedPatientBannerRequestToJSON(requestParameters['setNeedPatientBannerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set whether patient banner is required for a user
     * Set Need Patient Banner Context
     */
    async putAdminLaunchContextsByUserIdNeedPatientBanner(requestParameters: PutAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.putAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the smart-style-url context for a user
     * Set Smart Style URL Context
     */
    async putAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters: PutAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        if (requestParameters['setSmartStyleUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'setSmartStyleUrlRequest',
                'Required parameter "setSmartStyleUrlRequest" was null or undefined when calling putAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/smart-style-url`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetSmartStyleUrlRequestToJSON(requestParameters['setSmartStyleUrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the smart-style-url context for a user
     * Set Smart Style URL Context
     */
    async putAdminLaunchContextsByUserIdSmartStyleUrl(requestParameters: PutAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.putAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the tenant context for a user
     * Set Tenant Context
     */
    async putAdminLaunchContextsByUserIdTenantRaw(requestParameters: PutAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdTenant().'
            );
        }

        if (requestParameters['setTenantRequest'] == null) {
            throw new runtime.RequiredError(
                'setTenantRequest',
                'Required parameter "setTenantRequest" was null or undefined when calling putAdminLaunchContextsByUserIdTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/tenant`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetTenantRequestToJSON(requestParameters['setTenantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessResponseFromJSON(jsonValue));
    }

    /**
     * Set the tenant context for a user
     * Set Tenant Context
     */
    async putAdminLaunchContextsByUserIdTenant(requestParameters: PutAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessResponse> {
        const response = await this.putAdminLaunchContextsByUserIdTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
