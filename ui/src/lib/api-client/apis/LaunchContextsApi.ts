/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR Proxy
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostAdminLaunchContextsByUserIdFhirContextRequest,
  PutAdminLaunchContextsByUserIdIntentRequest,
  PutAdminLaunchContextsByUserIdNeedPatientBannerRequest,
  PutAdminLaunchContextsByUserIdSmartStyleUrlRequest,
  PutAdminLaunchContextsByUserIdTenantRequest,
} from '../models/index';
import {
    PostAdminLaunchContextsByUserIdFhirContextRequestFromJSON,
    PostAdminLaunchContextsByUserIdFhirContextRequestToJSON,
    PutAdminLaunchContextsByUserIdIntentRequestFromJSON,
    PutAdminLaunchContextsByUserIdIntentRequestToJSON,
    PutAdminLaunchContextsByUserIdNeedPatientBannerRequestFromJSON,
    PutAdminLaunchContextsByUserIdNeedPatientBannerRequestToJSON,
    PutAdminLaunchContextsByUserIdSmartStyleUrlRequestFromJSON,
    PutAdminLaunchContextsByUserIdSmartStyleUrlRequestToJSON,
    PutAdminLaunchContextsByUserIdTenantRequestFromJSON,
    PutAdminLaunchContextsByUserIdTenantRequestToJSON,
} from '../models/index';

export interface DeleteAdminLaunchContextsByUserIdEncounterRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdFhirContextRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdFhirUserRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdIntentRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdPatientRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdTenantRequest {
    userId: string;
}

export interface PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest {
    userId: string;
    encounterId: string;
}

export interface PostAdminLaunchContextsByUserIdFhirContextOperationRequest {
    userId: string;
    postAdminLaunchContextsByUserIdFhirContextRequest: PostAdminLaunchContextsByUserIdFhirContextRequest;
}

export interface PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest {
    userId: string;
    fhirUserId: string;
}

export interface PostAdminLaunchContextsByUserIdPatientByPatientIdRequest {
    userId: string;
    patientId: string;
}

export interface PutAdminLaunchContextsByUserIdIntentOperationRequest {
    userId: string;
    putAdminLaunchContextsByUserIdIntentRequest: PutAdminLaunchContextsByUserIdIntentRequest;
}

export interface PutAdminLaunchContextsByUserIdNeedPatientBannerOperationRequest {
    userId: string;
    putAdminLaunchContextsByUserIdNeedPatientBannerRequest: PutAdminLaunchContextsByUserIdNeedPatientBannerRequest;
}

export interface PutAdminLaunchContextsByUserIdSmartStyleUrlOperationRequest {
    userId: string;
    putAdminLaunchContextsByUserIdSmartStyleUrlRequest: PutAdminLaunchContextsByUserIdSmartStyleUrlRequest;
}

export interface PutAdminLaunchContextsByUserIdTenantOperationRequest {
    userId: string;
    putAdminLaunchContextsByUserIdTenantRequest: PutAdminLaunchContextsByUserIdTenantRequest;
}

/**
 * 
 */
export class LaunchContextsApi extends runtime.BaseAPI {

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdEncounter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/encounter`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounter(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters, initOverrides);
    }

    /**
     * Remove additional FHIR resources in context
     * Remove FHIR Context
     */
    async deleteAdminLaunchContextsByUserIdFhirContextRaw(requestParameters: DeleteAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-context`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove additional FHIR resources in context
     * Remove FHIR Context
     */
    async deleteAdminLaunchContextsByUserIdFhirContext(requestParameters: DeleteAdminLaunchContextsByUserIdFhirContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdFhirContextRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the fhirUser context for a user
     * Remove FHIR User Context
     */
    async deleteAdminLaunchContextsByUserIdFhirUserRaw(requestParameters: DeleteAdminLaunchContextsByUserIdFhirUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdFhirUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-user`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the fhirUser context for a user
     * Remove FHIR User Context
     */
    async deleteAdminLaunchContextsByUserIdFhirUser(requestParameters: DeleteAdminLaunchContextsByUserIdFhirUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdFhirUserRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the intent context for a user
     * Remove Intent Context
     */
    async deleteAdminLaunchContextsByUserIdIntentRaw(requestParameters: DeleteAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdIntent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/intent`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the intent context for a user
     * Remove Intent Context
     */
    async deleteAdminLaunchContextsByUserIdIntent(requestParameters: DeleteAdminLaunchContextsByUserIdIntentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdIntentRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the need-patient-banner context for a user
     * Remove Need Patient Banner Context
     */
    async deleteAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters: DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/need-patient-banner`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the need-patient-banner context for a user
     * Remove Need Patient Banner Context
     */
    async deleteAdminLaunchContextsByUserIdNeedPatientBanner(requestParameters: DeleteAdminLaunchContextsByUserIdNeedPatientBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdPatient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/patient`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatient(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the smart-style-url context for a user
     * Remove Smart Style URL Context
     */
    async deleteAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters: DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/smart-style-url`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the smart-style-url context for a user
     * Remove Smart Style URL Context
     */
    async deleteAdminLaunchContextsByUserIdSmartStyleUrl(requestParameters: DeleteAdminLaunchContextsByUserIdSmartStyleUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters, initOverrides);
    }

    /**
     * Remove the tenant context for a user
     * Remove Tenant Context
     */
    async deleteAdminLaunchContextsByUserIdTenantRaw(requestParameters: DeleteAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/tenant`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the tenant context for a user
     * Remove Tenant Context
     */
    async deleteAdminLaunchContextsByUserIdTenant(requestParameters: DeleteAdminLaunchContextsByUserIdTenantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAdminLaunchContextsByUserIdTenantRaw(requestParameters, initOverrides);
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContextsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContexts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAdminLaunchContextsRaw(initOverrides);
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        if (requestParameters['encounterId'] == null) {
            throw new runtime.RequiredError(
                'encounterId',
                'Required parameter "encounterId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/encounter/{encounterId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"encounterId"}}`, encodeURIComponent(String(requestParameters['encounterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterId(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters, initOverrides);
    }

    /**
     * Set additional FHIR resources in context as per SMART 2.2.0 spec
     * Set FHIR Context
     */
    async postAdminLaunchContextsByUserIdFhirContextRaw(requestParameters: PostAdminLaunchContextsByUserIdFhirContextOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        if (requestParameters['postAdminLaunchContextsByUserIdFhirContextRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminLaunchContextsByUserIdFhirContextRequest',
                'Required parameter "postAdminLaunchContextsByUserIdFhirContextRequest" was null or undefined when calling postAdminLaunchContextsByUserIdFhirContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-context`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminLaunchContextsByUserIdFhirContextRequestToJSON(requestParameters['postAdminLaunchContextsByUserIdFhirContextRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set additional FHIR resources in context as per SMART 2.2.0 spec
     * Set FHIR Context
     */
    async postAdminLaunchContextsByUserIdFhirContext(requestParameters: PostAdminLaunchContextsByUserIdFhirContextOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminLaunchContextsByUserIdFhirContextRaw(requestParameters, initOverrides);
    }

    /**
     * Set the fhirUser context for a user (e.g., Practitioner/123)
     * Set FHIR User Context
     */
    async postAdminLaunchContextsByUserIdFhirUserByFhirUserIdRaw(requestParameters: PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirUserByFhirUserId().'
            );
        }

        if (requestParameters['fhirUserId'] == null) {
            throw new runtime.RequiredError(
                'fhirUserId',
                'Required parameter "fhirUserId" was null or undefined when calling postAdminLaunchContextsByUserIdFhirUserByFhirUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/fhir-user/{fhirUserId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"fhirUserId"}}`, encodeURIComponent(String(requestParameters['fhirUserId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the fhirUser context for a user (e.g., Practitioner/123)
     * Set FHIR User Context
     */
    async postAdminLaunchContextsByUserIdFhirUserByFhirUserId(requestParameters: PostAdminLaunchContextsByUserIdFhirUserByFhirUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminLaunchContextsByUserIdFhirUserByFhirUserIdRaw(requestParameters, initOverrides);
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/patient/{patientId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientId(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters, initOverrides);
    }

    /**
     * Set the intent context for a user
     * Set Intent Context
     */
    async putAdminLaunchContextsByUserIdIntentRaw(requestParameters: PutAdminLaunchContextsByUserIdIntentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdIntent().'
            );
        }

        if (requestParameters['putAdminLaunchContextsByUserIdIntentRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminLaunchContextsByUserIdIntentRequest',
                'Required parameter "putAdminLaunchContextsByUserIdIntentRequest" was null or undefined when calling putAdminLaunchContextsByUserIdIntent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/intent`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminLaunchContextsByUserIdIntentRequestToJSON(requestParameters['putAdminLaunchContextsByUserIdIntentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the intent context for a user
     * Set Intent Context
     */
    async putAdminLaunchContextsByUserIdIntent(requestParameters: PutAdminLaunchContextsByUserIdIntentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAdminLaunchContextsByUserIdIntentRaw(requestParameters, initOverrides);
    }

    /**
     * Set whether patient banner is required for a user
     * Set Need Patient Banner Context
     */
    async putAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters: PutAdminLaunchContextsByUserIdNeedPatientBannerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        if (requestParameters['putAdminLaunchContextsByUserIdNeedPatientBannerRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminLaunchContextsByUserIdNeedPatientBannerRequest',
                'Required parameter "putAdminLaunchContextsByUserIdNeedPatientBannerRequest" was null or undefined when calling putAdminLaunchContextsByUserIdNeedPatientBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/need-patient-banner`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminLaunchContextsByUserIdNeedPatientBannerRequestToJSON(requestParameters['putAdminLaunchContextsByUserIdNeedPatientBannerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set whether patient banner is required for a user
     * Set Need Patient Banner Context
     */
    async putAdminLaunchContextsByUserIdNeedPatientBanner(requestParameters: PutAdminLaunchContextsByUserIdNeedPatientBannerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAdminLaunchContextsByUserIdNeedPatientBannerRaw(requestParameters, initOverrides);
    }

    /**
     * Set the smart-style-url context for a user
     * Set Smart Style URL Context
     */
    async putAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters: PutAdminLaunchContextsByUserIdSmartStyleUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        if (requestParameters['putAdminLaunchContextsByUserIdSmartStyleUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminLaunchContextsByUserIdSmartStyleUrlRequest',
                'Required parameter "putAdminLaunchContextsByUserIdSmartStyleUrlRequest" was null or undefined when calling putAdminLaunchContextsByUserIdSmartStyleUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/smart-style-url`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminLaunchContextsByUserIdSmartStyleUrlRequestToJSON(requestParameters['putAdminLaunchContextsByUserIdSmartStyleUrlRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the smart-style-url context for a user
     * Set Smart Style URL Context
     */
    async putAdminLaunchContextsByUserIdSmartStyleUrl(requestParameters: PutAdminLaunchContextsByUserIdSmartStyleUrlOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAdminLaunchContextsByUserIdSmartStyleUrlRaw(requestParameters, initOverrides);
    }

    /**
     * Set the tenant context for a user
     * Set Tenant Context
     */
    async putAdminLaunchContextsByUserIdTenantRaw(requestParameters: PutAdminLaunchContextsByUserIdTenantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling putAdminLaunchContextsByUserIdTenant().'
            );
        }

        if (requestParameters['putAdminLaunchContextsByUserIdTenantRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminLaunchContextsByUserIdTenantRequest',
                'Required parameter "putAdminLaunchContextsByUserIdTenantRequest" was null or undefined when calling putAdminLaunchContextsByUserIdTenant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/launch-contexts/{userId}/tenant`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminLaunchContextsByUserIdTenantRequestToJSON(requestParameters['putAdminLaunchContextsByUserIdTenantRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the tenant context for a user
     * Set Tenant Context
     */
    async putAdminLaunchContextsByUserIdTenant(requestParameters: PutAdminLaunchContextsByUserIdTenantOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putAdminLaunchContextsByUserIdTenantRaw(requestParameters, initOverrides);
    }

}
