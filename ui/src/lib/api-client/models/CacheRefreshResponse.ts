/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FhirServerMetadata } from './FhirServerMetadata';
import {
    FhirServerMetadataFromJSON,
    FhirServerMetadataFromJSONTyped,
    FhirServerMetadataToJSON,
    FhirServerMetadataToJSONTyped,
} from './FhirServerMetadata';

/**
 * 
 * @export
 * @interface CacheRefreshResponse
 */
export interface CacheRefreshResponse {
    /**
     * Whether refresh was successful
     * @type {boolean}
     * @memberof CacheRefreshResponse
     */
    success: boolean;
    /**
     * Success message
     * @type {string}
     * @memberof CacheRefreshResponse
     */
    message: string;
    /**
     * 
     * @type {FhirServerMetadata}
     * @memberof CacheRefreshResponse
     */
    serverInfo: FhirServerMetadata;
}

/**
 * Check if a given object implements the CacheRefreshResponse interface.
 */
export function instanceOfCacheRefreshResponse(value: object): value is CacheRefreshResponse {
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('serverInfo' in value) || value['serverInfo'] === undefined) return false;
    return true;
}

export function CacheRefreshResponseFromJSON(json: any): CacheRefreshResponse {
    return CacheRefreshResponseFromJSONTyped(json, false);
}

export function CacheRefreshResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CacheRefreshResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'success': json['success'],
        'message': json['message'],
        'serverInfo': FhirServerMetadataFromJSON(json['serverInfo']),
    };
}

export function CacheRefreshResponseToJSON(json: any): CacheRefreshResponse {
    return CacheRefreshResponseToJSONTyped(json, false);
}

export function CacheRefreshResponseToJSONTyped(value?: CacheRefreshResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'success': value['success'],
        'message': value['message'],
        'serverInfo': FhirServerMetadataToJSON(value['serverInfo']),
    };
}

