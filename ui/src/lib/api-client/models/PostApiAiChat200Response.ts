/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PostApiAiChat200ResponseSourcesInner } from './PostApiAiChat200ResponseSourcesInner';
import {
    PostApiAiChat200ResponseSourcesInnerFromJSON,
    PostApiAiChat200ResponseSourcesInnerFromJSONTyped,
    PostApiAiChat200ResponseSourcesInnerToJSON,
    PostApiAiChat200ResponseSourcesInnerToJSONTyped,
} from './PostApiAiChat200ResponseSourcesInner';
import type { PostApiAiChat200ResponseMode } from './PostApiAiChat200ResponseMode';
import {
    PostApiAiChat200ResponseModeFromJSON,
    PostApiAiChat200ResponseModeFromJSONTyped,
    PostApiAiChat200ResponseModeToJSON,
    PostApiAiChat200ResponseModeToJSONTyped,
} from './PostApiAiChat200ResponseMode';

/**
 * 
 * @export
 * @interface PostApiAiChat200Response
 */
export interface PostApiAiChat200Response {
    /**
     * AI generated answer
     * @type {string}
     * @memberof PostApiAiChat200Response
     */
    answer: string;
    /**
     * Knowledge base documents referenced in the response
     * @type {Array<PostApiAiChat200ResponseSourcesInner>}
     * @memberof PostApiAiChat200Response
     */
    sources: Array<PostApiAiChat200ResponseSourcesInner>;
    /**
     * Confidence score from 0-1
     * @type {number}
     * @memberof PostApiAiChat200Response
     */
    confidence: number;
    /**
     * 
     * @type {PostApiAiChat200ResponseMode}
     * @memberof PostApiAiChat200Response
     */
    mode: PostApiAiChat200ResponseMode;
    /**
     * Timestamp (ISO 8601) when the response was generated
     * @type {string}
     * @memberof PostApiAiChat200Response
     */
    timestamp: string;
}

/**
 * Check if a given object implements the PostApiAiChat200Response interface.
 */
export function instanceOfPostApiAiChat200Response(value: object): value is PostApiAiChat200Response {
    if (!('answer' in value) || value['answer'] === undefined) return false;
    if (!('sources' in value) || value['sources'] === undefined) return false;
    if (!('confidence' in value) || value['confidence'] === undefined) return false;
    if (!('mode' in value) || value['mode'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function PostApiAiChat200ResponseFromJSON(json: any): PostApiAiChat200Response {
    return PostApiAiChat200ResponseFromJSONTyped(json, false);
}

export function PostApiAiChat200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostApiAiChat200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'answer': json['answer'],
        'sources': ((json['sources'] as Array<any>).map(PostApiAiChat200ResponseSourcesInnerFromJSON)),
        'confidence': json['confidence'],
        'mode': PostApiAiChat200ResponseModeFromJSON(json['mode']),
        'timestamp': json['timestamp'],
    };
}

export function PostApiAiChat200ResponseToJSON(json: any): PostApiAiChat200Response {
    return PostApiAiChat200ResponseToJSONTyped(json, false);
}

export function PostApiAiChat200ResponseToJSONTyped(value?: PostApiAiChat200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'answer': value['answer'],
        'sources': ((value['sources'] as Array<any>).map(PostApiAiChat200ResponseSourcesInnerToJSON)),
        'confidence': value['confidence'],
        'mode': PostApiAiChat200ResponseModeToJSON(value['mode']),
        'timestamp': value['timestamp'],
    };
}

