/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LaunchContextUser
 */
export interface LaunchContextUser {
    /**
     * User ID
     * @type {string}
     * @memberof LaunchContextUser
     */
    userId: string;
    /**
     * Username
     * @type {string}
     * @memberof LaunchContextUser
     */
    username: string;
    /**
     * FHIR resource representing the current user (e.g., Practitioner/123)
     * @type {string}
     * @memberof LaunchContextUser
     */
    fhirUser?: string;
    /**
     * Patient context (e.g., Patient/456)
     * @type {string}
     * @memberof LaunchContextUser
     */
    patient?: string;
    /**
     * Encounter context (e.g., Encounter/789)
     * @type {string}
     * @memberof LaunchContextUser
     */
    encounter?: string;
    /**
     * Additional FHIR resources in context (JSON array)
     * @type {string}
     * @memberof LaunchContextUser
     */
    fhirContext?: string;
    /**
     * Intent string (e.g., reconcile-medications)
     * @type {string}
     * @memberof LaunchContextUser
     */
    intent?: string;
    /**
     * URL to CSS stylesheet for styling
     * @type {string}
     * @memberof LaunchContextUser
     */
    smartStyleUrl?: string;
    /**
     * Tenant identifier
     * @type {string}
     * @memberof LaunchContextUser
     */
    tenant?: string;
    /**
     * Whether patient banner is required
     * @type {boolean}
     * @memberof LaunchContextUser
     */
    needPatientBanner?: boolean;
    /**
     * Legacy patient context
     * @type {string}
     * @memberof LaunchContextUser
     */
    launchPatient?: string;
    /**
     * Legacy encounter context
     * @type {string}
     * @memberof LaunchContextUser
     */
    launchEncounter?: string;
}

/**
 * Check if a given object implements the LaunchContextUser interface.
 */
export function instanceOfLaunchContextUser(value: object): value is LaunchContextUser {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    return true;
}

export function LaunchContextUserFromJSON(json: any): LaunchContextUser {
    return LaunchContextUserFromJSONTyped(json, false);
}

export function LaunchContextUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): LaunchContextUser {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'username': json['username'],
        'fhirUser': json['fhirUser'] == null ? undefined : json['fhirUser'],
        'patient': json['patient'] == null ? undefined : json['patient'],
        'encounter': json['encounter'] == null ? undefined : json['encounter'],
        'fhirContext': json['fhirContext'] == null ? undefined : json['fhirContext'],
        'intent': json['intent'] == null ? undefined : json['intent'],
        'smartStyleUrl': json['smartStyleUrl'] == null ? undefined : json['smartStyleUrl'],
        'tenant': json['tenant'] == null ? undefined : json['tenant'],
        'needPatientBanner': json['needPatientBanner'] == null ? undefined : json['needPatientBanner'],
        'launchPatient': json['launchPatient'] == null ? undefined : json['launchPatient'],
        'launchEncounter': json['launchEncounter'] == null ? undefined : json['launchEncounter'],
    };
}

export function LaunchContextUserToJSON(json: any): LaunchContextUser {
    return LaunchContextUserToJSONTyped(json, false);
}

export function LaunchContextUserToJSONTyped(value?: LaunchContextUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'username': value['username'],
        'fhirUser': value['fhirUser'],
        'patient': value['patient'],
        'encounter': value['encounter'],
        'fhirContext': value['fhirContext'],
        'intent': value['intent'],
        'smartStyleUrl': value['smartStyleUrl'],
        'tenant': value['tenant'],
        'needPatientBanner': value['needPatientBanner'],
        'launchPatient': value['launchPatient'],
        'launchEncounter': value['launchEncounter'],
    };
}

