/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserName } from './UserName';
import {
    UserNameFromJSON,
    UserNameFromJSONTyped,
    UserNameToJSON,
    UserNameToJSONTyped,
} from './UserName';

/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * User ID
     * @type {string}
     * @memberof UserInfoResponse
     */
    id: string;
    /**
     * FHIR user resource reference (e.g., Practitioner/123)
     * @type {string}
     * @memberof UserInfoResponse
     */
    fhirUser?: string;
    /**
     * 
     * @type {Array<UserName>}
     * @memberof UserInfoResponse
     */
    name: Array<UserName>;
    /**
     * Username
     * @type {string}
     * @memberof UserInfoResponse
     */
    username: string;
    /**
     * Email address
     * @type {string}
     * @memberof UserInfoResponse
     */
    email?: string;
    /**
     * First name
     * @type {string}
     * @memberof UserInfoResponse
     */
    firstName?: string;
    /**
     * Last name
     * @type {string}
     * @memberof UserInfoResponse
     */
    lastName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInfoResponse
     */
    roles: Array<string>;
}

/**
 * Check if a given object implements the UserInfoResponse interface.
 */
export function instanceOfUserInfoResponse(value: object): value is UserInfoResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('roles' in value) || value['roles'] === undefined) return false;
    return true;
}

export function UserInfoResponseFromJSON(json: any): UserInfoResponse {
    return UserInfoResponseFromJSONTyped(json, false);
}

export function UserInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfoResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'fhirUser': json['fhirUser'] == null ? undefined : json['fhirUser'],
        'name': ((json['name'] as Array<any>).map(UserNameFromJSON)),
        'username': json['username'],
        'email': json['email'] == null ? undefined : json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'roles': json['roles'],
    };
}

export function UserInfoResponseToJSON(json: any): UserInfoResponse {
    return UserInfoResponseToJSONTyped(json, false);
}

export function UserInfoResponseToJSONTyped(value?: UserInfoResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'fhirUser': value['fhirUser'],
        'name': ((value['name'] as Array<any>).map(UserNameToJSON)),
        'username': value['username'],
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'roles': value['roles'],
    };
}

