/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UploadCertificateRequest
 */
export interface UploadCertificateRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadCertificateRequest
     */
    type: UploadCertificateRequestTypeEnum;
    /**
     * Base64-encoded certificate or key content
     * @type {string}
     * @memberof UploadCertificateRequest
     */
    content: string;
    /**
     * Original filename (for reference)
     * @type {string}
     * @memberof UploadCertificateRequest
     */
    filename?: string;
}


/**
 * @export
 */
export const UploadCertificateRequestTypeEnum = {
    Client: 'client',
    Key: 'key',
    Ca: 'ca'
} as const;
export type UploadCertificateRequestTypeEnum = typeof UploadCertificateRequestTypeEnum[keyof typeof UploadCertificateRequestTypeEnum];


/**
 * Check if a given object implements the UploadCertificateRequest interface.
 */
export function instanceOfUploadCertificateRequest(value: object): value is UploadCertificateRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function UploadCertificateRequestFromJSON(json: any): UploadCertificateRequest {
    return UploadCertificateRequestFromJSONTyped(json, false);
}

export function UploadCertificateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadCertificateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'content': json['content'],
        'filename': json['filename'] == null ? undefined : json['filename'],
    };
}

export function UploadCertificateRequestToJSON(json: any): UploadCertificateRequest {
    return UploadCertificateRequestToJSONTyped(json, false);
}

export function UploadCertificateRequestToJSONTyped(value?: UploadCertificateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'content': value['content'],
        'filename': value['filename'],
    };
}

