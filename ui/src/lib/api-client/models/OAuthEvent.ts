/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OAuthEventFhirContext } from './OAuthEventFhirContext';
import {
    OAuthEventFhirContextFromJSON,
    OAuthEventFhirContextFromJSONTyped,
    OAuthEventFhirContextToJSON,
    OAuthEventFhirContextToJSONTyped,
} from './OAuthEventFhirContext';

/**
 * 
 * @export
 * @interface OAuthEvent
 */
export interface OAuthEvent {
    /**
     * Event ID
     * @type {string}
     * @memberof OAuthEvent
     */
    id: string;
    /**
     * Event timestamp
     * @type {string}
     * @memberof OAuthEvent
     */
    timestamp: string;
    /**
     * Event type
     * @type {string}
     * @memberof OAuthEvent
     */
    type: string;
    /**
     * Event status
     * @type {string}
     * @memberof OAuthEvent
     */
    status: string;
    /**
     * OAuth client ID
     * @type {string}
     * @memberof OAuthEvent
     */
    clientId: string;
    /**
     * Client display name
     * @type {string}
     * @memberof OAuthEvent
     */
    clientName?: string;
    /**
     * User ID
     * @type {string}
     * @memberof OAuthEvent
     */
    userId?: string;
    /**
     * User name
     * @type {string}
     * @memberof OAuthEvent
     */
    userName?: string;
    /**
     * Requested scopes
     * @type {Array<string>}
     * @memberof OAuthEvent
     */
    scopes: Array<string>;
    /**
     * OAuth grant type
     * @type {string}
     * @memberof OAuthEvent
     */
    grantType: string;
    /**
     * Response time in ms
     * @type {number}
     * @memberof OAuthEvent
     */
    responseTime: number;
    /**
     * Client IP address
     * @type {string}
     * @memberof OAuthEvent
     */
    ipAddress: string;
    /**
     * User agent
     * @type {string}
     * @memberof OAuthEvent
     */
    userAgent: string;
    /**
     * Error message if failed
     * @type {string}
     * @memberof OAuthEvent
     */
    errorMessage?: string;
    /**
     * Error code
     * @type {string}
     * @memberof OAuthEvent
     */
    errorCode?: string;
    /**
     * Token type
     * @type {string}
     * @memberof OAuthEvent
     */
    tokenType?: string;
    /**
     * Token expiration in seconds
     * @type {number}
     * @memberof OAuthEvent
     */
    expiresIn?: number;
    /**
     * Whether refresh token was issued
     * @type {boolean}
     * @memberof OAuthEvent
     */
    refreshToken?: boolean;
    /**
     * 
     * @type {OAuthEventFhirContext}
     * @memberof OAuthEvent
     */
    fhirContext?: OAuthEventFhirContext;
}

/**
 * Check if a given object implements the OAuthEvent interface.
 */
export function instanceOfOAuthEvent(value: object): value is OAuthEvent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('scopes' in value) || value['scopes'] === undefined) return false;
    if (!('grantType' in value) || value['grantType'] === undefined) return false;
    if (!('responseTime' in value) || value['responseTime'] === undefined) return false;
    if (!('ipAddress' in value) || value['ipAddress'] === undefined) return false;
    if (!('userAgent' in value) || value['userAgent'] === undefined) return false;
    return true;
}

export function OAuthEventFromJSON(json: any): OAuthEvent {
    return OAuthEventFromJSONTyped(json, false);
}

export function OAuthEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': json['timestamp'],
        'type': json['type'],
        'status': json['status'],
        'clientId': json['clientId'],
        'clientName': json['clientName'] == null ? undefined : json['clientName'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'userName': json['userName'] == null ? undefined : json['userName'],
        'scopes': json['scopes'],
        'grantType': json['grantType'],
        'responseTime': json['responseTime'],
        'ipAddress': json['ipAddress'],
        'userAgent': json['userAgent'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
        'errorCode': json['errorCode'] == null ? undefined : json['errorCode'],
        'tokenType': json['tokenType'] == null ? undefined : json['tokenType'],
        'expiresIn': json['expiresIn'] == null ? undefined : json['expiresIn'],
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'fhirContext': json['fhirContext'] == null ? undefined : OAuthEventFhirContextFromJSON(json['fhirContext']),
    };
}

export function OAuthEventToJSON(json: any): OAuthEvent {
    return OAuthEventToJSONTyped(json, false);
}

export function OAuthEventToJSONTyped(value?: OAuthEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'timestamp': value['timestamp'],
        'type': value['type'],
        'status': value['status'],
        'clientId': value['clientId'],
        'clientName': value['clientName'],
        'userId': value['userId'],
        'userName': value['userName'],
        'scopes': value['scopes'],
        'grantType': value['grantType'],
        'responseTime': value['responseTime'],
        'ipAddress': value['ipAddress'],
        'userAgent': value['userAgent'],
        'errorMessage': value['errorMessage'],
        'errorCode': value['errorCode'],
        'tokenType': value['tokenType'],
        'expiresIn': value['expiresIn'],
        'refreshToken': value['refreshToken'],
        'fhirContext': OAuthEventFhirContextToJSON(value['fhirContext']),
    };
}

