/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateSmartAppRequest
 */
export interface CreateSmartAppRequest {
    /**
     * OAuth2 client ID (must be unique)
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    clientId: string;
    /**
     * Application name
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    name: string;
    /**
     * Application description
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    description?: string;
    /**
     * Whether this is a public client
     * @type {boolean}
     * @memberof CreateSmartAppRequest
     */
    publicClient?: boolean;
    /**
     * Allowed redirect URIs
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    redirectUris?: Array<string>;
    /**
     * Allowed web origins
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    webOrigins?: Array<string>;
    /**
     * Default SMART scopes
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    defaultClientScopes?: Array<string>;
    /**
     * Optional SMART scopes
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    optionalClientScopes?: Array<string>;
    /**
     * SMART App Launch version
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    smartVersion?: string;
    /**
     * FHIR version
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    fhirVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    appType?: CreateSmartAppRequestAppTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    clientType?: CreateSmartAppRequestClientTypeEnum;
    /**
     * Client secret for symmetric authentication (only for confidential clients)
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    secret?: string;
    /**
     * Public key for JWT authentication (PEM format)
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    publicKey?: string;
    /**
     * JWKS URI for JWT authentication
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    jwksUri?: string;
    /**
     * System-level scopes for backend services
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    systemScopes?: Array<string>;
    /**
     * SMART App launch URL
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    launchUrl?: string;
    /**
     * Logo URI for application display
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    logoUri?: string;
    /**
     * Terms of Service URI
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    tosUri?: string;
    /**
     * Privacy Policy URI
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    policyUri?: string;
    /**
     * Contact emails or names
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    contacts?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    serverAccessType?: CreateSmartAppRequestServerAccessTypeEnum;
    /**
     * List of allowed FHIR server IDs (when serverAccessType is selected-servers)
     * @type {Array<string>}
     * @memberof CreateSmartAppRequest
     */
    allowedServerIds?: Array<string>;
    /**
     * Reference to a predefined scope set configuration
     * @type {string}
     * @memberof CreateSmartAppRequest
     */
    scopeSetId?: string;
    /**
     * Require Proof Key for Code Exchange (PKCE) for public clients
     * @type {boolean}
     * @memberof CreateSmartAppRequest
     */
    requirePkce?: boolean;
    /**
     * Allow offline access (refresh tokens)
     * @type {boolean}
     * @memberof CreateSmartAppRequest
     */
    allowOfflineAccess?: boolean;
}


/**
 * @export
 */
export const CreateSmartAppRequestAppTypeEnum = {
    StandaloneApp: 'standalone-app',
    EhrLaunch: 'ehr-launch',
    BackendService: 'backend-service',
    Agent: 'agent'
} as const;
export type CreateSmartAppRequestAppTypeEnum = typeof CreateSmartAppRequestAppTypeEnum[keyof typeof CreateSmartAppRequestAppTypeEnum];

/**
 * @export
 */
export const CreateSmartAppRequestClientTypeEnum = {
    Public: 'public',
    Confidential: 'confidential',
    BackendService: 'backend-service'
} as const;
export type CreateSmartAppRequestClientTypeEnum = typeof CreateSmartAppRequestClientTypeEnum[keyof typeof CreateSmartAppRequestClientTypeEnum];

/**
 * @export
 */
export const CreateSmartAppRequestServerAccessTypeEnum = {
    AllServers: 'all-servers',
    SelectedServers: 'selected-servers',
    UserPersonServers: 'user-person-servers'
} as const;
export type CreateSmartAppRequestServerAccessTypeEnum = typeof CreateSmartAppRequestServerAccessTypeEnum[keyof typeof CreateSmartAppRequestServerAccessTypeEnum];


/**
 * Check if a given object implements the CreateSmartAppRequest interface.
 */
export function instanceOfCreateSmartAppRequest(value: object): value is CreateSmartAppRequest {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CreateSmartAppRequestFromJSON(json: any): CreateSmartAppRequest {
    return CreateSmartAppRequestFromJSONTyped(json, false);
}

export function CreateSmartAppRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSmartAppRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'clientId': json['clientId'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'publicClient': json['publicClient'] == null ? undefined : json['publicClient'],
        'redirectUris': json['redirectUris'] == null ? undefined : json['redirectUris'],
        'webOrigins': json['webOrigins'] == null ? undefined : json['webOrigins'],
        'defaultClientScopes': json['defaultClientScopes'] == null ? undefined : json['defaultClientScopes'],
        'optionalClientScopes': json['optionalClientScopes'] == null ? undefined : json['optionalClientScopes'],
        'smartVersion': json['smartVersion'] == null ? undefined : json['smartVersion'],
        'fhirVersion': json['fhirVersion'] == null ? undefined : json['fhirVersion'],
        'appType': json['appType'] == null ? undefined : json['appType'],
        'clientType': json['clientType'] == null ? undefined : json['clientType'],
        'secret': json['secret'] == null ? undefined : json['secret'],
        'publicKey': json['publicKey'] == null ? undefined : json['publicKey'],
        'jwksUri': json['jwksUri'] == null ? undefined : json['jwksUri'],
        'systemScopes': json['systemScopes'] == null ? undefined : json['systemScopes'],
        'launchUrl': json['launchUrl'] == null ? undefined : json['launchUrl'],
        'logoUri': json['logoUri'] == null ? undefined : json['logoUri'],
        'tosUri': json['tosUri'] == null ? undefined : json['tosUri'],
        'policyUri': json['policyUri'] == null ? undefined : json['policyUri'],
        'contacts': json['contacts'] == null ? undefined : json['contacts'],
        'serverAccessType': json['serverAccessType'] == null ? undefined : json['serverAccessType'],
        'allowedServerIds': json['allowedServerIds'] == null ? undefined : json['allowedServerIds'],
        'scopeSetId': json['scopeSetId'] == null ? undefined : json['scopeSetId'],
        'requirePkce': json['requirePkce'] == null ? undefined : json['requirePkce'],
        'allowOfflineAccess': json['allowOfflineAccess'] == null ? undefined : json['allowOfflineAccess'],
    };
}

export function CreateSmartAppRequestToJSON(json: any): CreateSmartAppRequest {
    return CreateSmartAppRequestToJSONTyped(json, false);
}

export function CreateSmartAppRequestToJSONTyped(value?: CreateSmartAppRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clientId': value['clientId'],
        'name': value['name'],
        'description': value['description'],
        'publicClient': value['publicClient'],
        'redirectUris': value['redirectUris'],
        'webOrigins': value['webOrigins'],
        'defaultClientScopes': value['defaultClientScopes'],
        'optionalClientScopes': value['optionalClientScopes'],
        'smartVersion': value['smartVersion'],
        'fhirVersion': value['fhirVersion'],
        'appType': value['appType'],
        'clientType': value['clientType'],
        'secret': value['secret'],
        'publicKey': value['publicKey'],
        'jwksUri': value['jwksUri'],
        'systemScopes': value['systemScopes'],
        'launchUrl': value['launchUrl'],
        'logoUri': value['logoUri'],
        'tosUri': value['tosUri'],
        'policyUri': value['policyUri'],
        'contacts': value['contacts'],
        'serverAccessType': value['serverAccessType'],
        'allowedServerIds': value['allowedServerIds'],
        'scopeSetId': value['scopeSetId'],
        'requirePkce': value['requirePkce'],
        'allowOfflineAccess': value['allowOfflineAccess'],
    };
}

