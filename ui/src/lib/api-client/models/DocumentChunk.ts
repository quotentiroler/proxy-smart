/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DocumentChunk
 */
export interface DocumentChunk {
    /**
     * Document chunk ID
     * @type {string}
     * @memberof DocumentChunk
     */
    id: string;
    /**
     * Document content
     * @type {string}
     * @memberof DocumentChunk
     */
    content: string;
    /**
     * Source document/file
     * @type {string}
     * @memberof DocumentChunk
     */
    source: string;
    /**
     * Document title
     * @type {string}
     * @memberof DocumentChunk
     */
    title: string;
    /**
     * Document category
     * @type {string}
     * @memberof DocumentChunk
     */
    category: string;
    /**
     * Relevance score (0-1)
     * @type {number}
     * @memberof DocumentChunk
     */
    relevanceScore?: number;
}

/**
 * Check if a given object implements the DocumentChunk interface.
 */
export function instanceOfDocumentChunk(value: object): value is DocumentChunk {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    return true;
}

export function DocumentChunkFromJSON(json: any): DocumentChunk {
    return DocumentChunkFromJSONTyped(json, false);
}

export function DocumentChunkFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentChunk {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'content': json['content'],
        'source': json['source'],
        'title': json['title'],
        'category': json['category'],
        'relevanceScore': json['relevance_score'] == null ? undefined : json['relevance_score'],
    };
}

export function DocumentChunkToJSON(json: any): DocumentChunk {
    return DocumentChunkToJSONTyped(json, false);
}

export function DocumentChunkToJSONTyped(value?: DocumentChunk | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'content': value['content'],
        'source': value['source'],
        'title': value['title'],
        'category': value['category'],
        'relevance_score': value['relevanceScore'],
    };
}

