/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SmartApp
 */
export interface SmartApp {
    /**
     * Internal ID
     * @type {string}
     * @memberof SmartApp
     */
    id?: string;
    /**
     * OAuth2 client ID
     * @type {string}
     * @memberof SmartApp
     */
    clientId?: string;
    /**
     * Application name
     * @type {string}
     * @memberof SmartApp
     */
    name?: string;
    /**
     * Application description
     * @type {string}
     * @memberof SmartApp
     */
    description?: string;
    /**
     * Whether the app is enabled
     * @type {boolean}
     * @memberof SmartApp
     */
    enabled?: boolean;
    /**
     * Protocol (openid-connect)
     * @type {string}
     * @memberof SmartApp
     */
    protocol?: string;
    /**
     * Whether this is a public client
     * @type {boolean}
     * @memberof SmartApp
     */
    publicClient?: boolean;
    /**
     * Allowed redirect URIs
     * @type {Array<string>}
     * @memberof SmartApp
     */
    redirectUris?: Array<string>;
    /**
     * Allowed web origins (CORS)
     * @type {Array<string>}
     * @memberof SmartApp
     */
    webOrigins?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof SmartApp
     */
    attributes?: object;
    /**
     * Client authentication method
     * @type {string}
     * @memberof SmartApp
     */
    clientAuthenticatorType?: string;
    /**
     * Enable service accounts
     * @type {boolean}
     * @memberof SmartApp
     */
    serviceAccountsEnabled?: boolean;
    /**
     * Enable authorization code flow
     * @type {boolean}
     * @memberof SmartApp
     */
    standardFlowEnabled?: boolean;
    /**
     * Enable implicit flow
     * @type {boolean}
     * @memberof SmartApp
     */
    implicitFlowEnabled?: boolean;
    /**
     * Enable direct access grants
     * @type {boolean}
     * @memberof SmartApp
     */
    directAccessGrantsEnabled?: boolean;
    /**
     * Default scopes
     * @type {Array<string>}
     * @memberof SmartApp
     */
    defaultClientScopes?: Array<string>;
    /**
     * Optional scopes
     * @type {Array<string>}
     * @memberof SmartApp
     */
    optionalClientScopes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SmartApp
     */
    appType?: SmartAppAppTypeEnum;
    /**
     * 
     * @type {object}
     * @memberof SmartApp
     */
    access?: object;
}


/**
 * @export
 */
export const SmartAppAppTypeEnum = {
    StandaloneApp: 'standalone-app',
    EhrLaunch: 'ehr-launch',
    BackendService: 'backend-service',
    Agent: 'agent'
} as const;
export type SmartAppAppTypeEnum = typeof SmartAppAppTypeEnum[keyof typeof SmartAppAppTypeEnum];


/**
 * Check if a given object implements the SmartApp interface.
 */
export function instanceOfSmartApp(value: object): value is SmartApp {
    return true;
}

export function SmartAppFromJSON(json: any): SmartApp {
    return SmartAppFromJSONTyped(json, false);
}

export function SmartAppFromJSONTyped(json: any, ignoreDiscriminator: boolean): SmartApp {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'clientId': json['clientId'] == null ? undefined : json['clientId'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'protocol': json['protocol'] == null ? undefined : json['protocol'],
        'publicClient': json['publicClient'] == null ? undefined : json['publicClient'],
        'redirectUris': json['redirectUris'] == null ? undefined : json['redirectUris'],
        'webOrigins': json['webOrigins'] == null ? undefined : json['webOrigins'],
        'attributes': json['attributes'] == null ? undefined : json['attributes'],
        'clientAuthenticatorType': json['clientAuthenticatorType'] == null ? undefined : json['clientAuthenticatorType'],
        'serviceAccountsEnabled': json['serviceAccountsEnabled'] == null ? undefined : json['serviceAccountsEnabled'],
        'standardFlowEnabled': json['standardFlowEnabled'] == null ? undefined : json['standardFlowEnabled'],
        'implicitFlowEnabled': json['implicitFlowEnabled'] == null ? undefined : json['implicitFlowEnabled'],
        'directAccessGrantsEnabled': json['directAccessGrantsEnabled'] == null ? undefined : json['directAccessGrantsEnabled'],
        'defaultClientScopes': json['defaultClientScopes'] == null ? undefined : json['defaultClientScopes'],
        'optionalClientScopes': json['optionalClientScopes'] == null ? undefined : json['optionalClientScopes'],
        'appType': json['appType'] == null ? undefined : json['appType'],
        'access': json['access'] == null ? undefined : json['access'],
    };
}

export function SmartAppToJSON(json: any): SmartApp {
    return SmartAppToJSONTyped(json, false);
}

export function SmartAppToJSONTyped(value?: SmartApp | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'clientId': value['clientId'],
        'name': value['name'],
        'description': value['description'],
        'enabled': value['enabled'],
        'protocol': value['protocol'],
        'publicClient': value['publicClient'],
        'redirectUris': value['redirectUris'],
        'webOrigins': value['webOrigins'],
        'attributes': value['attributes'],
        'clientAuthenticatorType': value['clientAuthenticatorType'],
        'serviceAccountsEnabled': value['serviceAccountsEnabled'],
        'standardFlowEnabled': value['standardFlowEnabled'],
        'implicitFlowEnabled': value['implicitFlowEnabled'],
        'directAccessGrantsEnabled': value['directAccessGrantsEnabled'],
        'defaultClientScopes': value['defaultClientScopes'],
        'optionalClientScopes': value['optionalClientScopes'],
        'appType': value['appType'],
        'access': value['access'],
    };
}

