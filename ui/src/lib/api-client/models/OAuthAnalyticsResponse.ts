/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OAuthAnalyticsHourlyStats } from './OAuthAnalyticsHourlyStats';
import {
    OAuthAnalyticsHourlyStatsFromJSON,
    OAuthAnalyticsHourlyStatsFromJSONTyped,
    OAuthAnalyticsHourlyStatsToJSON,
    OAuthAnalyticsHourlyStatsToJSONTyped,
} from './OAuthAnalyticsHourlyStats';
import type { OAuthAnalyticsTopClient } from './OAuthAnalyticsTopClient';
import {
    OAuthAnalyticsTopClientFromJSON,
    OAuthAnalyticsTopClientFromJSONTyped,
    OAuthAnalyticsTopClientToJSON,
    OAuthAnalyticsTopClientToJSONTyped,
} from './OAuthAnalyticsTopClient';

/**
 * 
 * @export
 * @interface OAuthAnalyticsResponse
 */
export interface OAuthAnalyticsResponse {
    /**
     * Total requests in period
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    totalRequests: number;
    /**
     * Successful requests
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    successfulRequests: number;
    /**
     * Failed requests
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    failedRequests: number;
    /**
     * Success rate percentage
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    successRate: number;
    /**
     * Average response time in ms
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    averageResponseTime: number;
    /**
     * Currently active tokens
     * @type {number}
     * @memberof OAuthAnalyticsResponse
     */
    activeTokens: number;
    /**
     * Top OAuth clients by request count
     * @type {Array<OAuthAnalyticsTopClient>}
     * @memberof OAuthAnalyticsResponse
     */
    topClients: Array<OAuthAnalyticsTopClient>;
    /**
     * OAuth flows by type
     * @type {object}
     * @memberof OAuthAnalyticsResponse
     */
    flowsByType: object;
    /**
     * Errors by type
     * @type {object}
     * @memberof OAuthAnalyticsResponse
     */
    errorsByType: object;
    /**
     * Hourly statistics
     * @type {Array<OAuthAnalyticsHourlyStats>}
     * @memberof OAuthAnalyticsResponse
     */
    hourlyStats: Array<OAuthAnalyticsHourlyStats>;
    /**
     * Response timestamp
     * @type {string}
     * @memberof OAuthAnalyticsResponse
     */
    timestamp: string;
}

/**
 * Check if a given object implements the OAuthAnalyticsResponse interface.
 */
export function instanceOfOAuthAnalyticsResponse(value: object): value is OAuthAnalyticsResponse {
    if (!('totalRequests' in value) || value['totalRequests'] === undefined) return false;
    if (!('successfulRequests' in value) || value['successfulRequests'] === undefined) return false;
    if (!('failedRequests' in value) || value['failedRequests'] === undefined) return false;
    if (!('successRate' in value) || value['successRate'] === undefined) return false;
    if (!('averageResponseTime' in value) || value['averageResponseTime'] === undefined) return false;
    if (!('activeTokens' in value) || value['activeTokens'] === undefined) return false;
    if (!('topClients' in value) || value['topClients'] === undefined) return false;
    if (!('flowsByType' in value) || value['flowsByType'] === undefined) return false;
    if (!('errorsByType' in value) || value['errorsByType'] === undefined) return false;
    if (!('hourlyStats' in value) || value['hourlyStats'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function OAuthAnalyticsResponseFromJSON(json: any): OAuthAnalyticsResponse {
    return OAuthAnalyticsResponseFromJSONTyped(json, false);
}

export function OAuthAnalyticsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthAnalyticsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalRequests': json['totalRequests'],
        'successfulRequests': json['successfulRequests'],
        'failedRequests': json['failedRequests'],
        'successRate': json['successRate'],
        'averageResponseTime': json['averageResponseTime'],
        'activeTokens': json['activeTokens'],
        'topClients': ((json['topClients'] as Array<any>).map(OAuthAnalyticsTopClientFromJSON)),
        'flowsByType': json['flowsByType'],
        'errorsByType': json['errorsByType'],
        'hourlyStats': ((json['hourlyStats'] as Array<any>).map(OAuthAnalyticsHourlyStatsFromJSON)),
        'timestamp': json['timestamp'],
    };
}

export function OAuthAnalyticsResponseToJSON(json: any): OAuthAnalyticsResponse {
    return OAuthAnalyticsResponseToJSONTyped(json, false);
}

export function OAuthAnalyticsResponseToJSONTyped(value?: OAuthAnalyticsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'totalRequests': value['totalRequests'],
        'successfulRequests': value['successfulRequests'],
        'failedRequests': value['failedRequests'],
        'successRate': value['successRate'],
        'averageResponseTime': value['averageResponseTime'],
        'activeTokens': value['activeTokens'],
        'topClients': ((value['topClients'] as Array<any>).map(OAuthAnalyticsTopClientToJSON)),
        'flowsByType': value['flowsByType'],
        'errorsByType': value['errorsByType'],
        'hourlyStats': ((value['hourlyStats'] as Array<any>).map(OAuthAnalyticsHourlyStatsToJSON)),
        'timestamp': value['timestamp'],
    };
}

