/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SmartConfigRefreshResponse
 */
export interface SmartConfigRefreshResponse {
    /**
     * Refresh status message
     * @type {string}
     * @memberof SmartConfigRefreshResponse
     */
    message: string;
    /**
     * Timestamp of refresh
     * @type {string}
     * @memberof SmartConfigRefreshResponse
     */
    timestamp: string;
    /**
     * Refreshed SMART configuration
     * @type {{ [key: string]: any; }}
     * @memberof SmartConfigRefreshResponse
     */
    config: { [key: string]: any; };
}

/**
 * Check if a given object implements the SmartConfigRefreshResponse interface.
 */
export function instanceOfSmartConfigRefreshResponse(value: object): value is SmartConfigRefreshResponse {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function SmartConfigRefreshResponseFromJSON(json: any): SmartConfigRefreshResponse {
    return SmartConfigRefreshResponseFromJSONTyped(json, false);
}

export function SmartConfigRefreshResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SmartConfigRefreshResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'timestamp': json['timestamp'],
        'config': json['config'],
    };
}

export function SmartConfigRefreshResponseToJSON(json: any): SmartConfigRefreshResponse {
    return SmartConfigRefreshResponseToJSONTyped(json, false);
}

export function SmartConfigRefreshResponseToJSONTyped(value?: SmartConfigRefreshResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'timestamp': value['timestamp'],
        'config': value['config'],
    };
}

