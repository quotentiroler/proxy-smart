/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthConfigKeycloakResponse } from './AuthConfigKeycloakResponse';
import {
    AuthConfigKeycloakResponseFromJSON,
    AuthConfigKeycloakResponseFromJSONTyped,
    AuthConfigKeycloakResponseToJSON,
    AuthConfigKeycloakResponseToJSONTyped,
} from './AuthConfigKeycloakResponse';

/**
 * 
 * @export
 * @interface AuthConfigResponse
 */
export interface AuthConfigResponse {
    /**
     * 
     * @type {AuthConfigKeycloakResponse}
     * @memberof AuthConfigResponse
     */
    keycloak: AuthConfigKeycloakResponse;
}

/**
 * Check if a given object implements the AuthConfigResponse interface.
 */
export function instanceOfAuthConfigResponse(value: object): value is AuthConfigResponse {
    if (!('keycloak' in value) || value['keycloak'] === undefined) return false;
    return true;
}

export function AuthConfigResponseFromJSON(json: any): AuthConfigResponse {
    return AuthConfigResponseFromJSONTyped(json, false);
}

export function AuthConfigResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthConfigResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'keycloak': AuthConfigKeycloakResponseFromJSON(json['keycloak']),
    };
}

export function AuthConfigResponseToJSON(json: any): AuthConfigResponse {
    return AuthConfigResponseToJSONTyped(json, false);
}

export function AuthConfigResponseToJSONTyped(value?: AuthConfigResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'keycloak': AuthConfigKeycloakResponseToJSON(value['keycloak']),
    };
}

