/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClientRegistrationSettings
 */
export interface ClientRegistrationSettings {
    /**
     * Whether dynamic client registration is enabled
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    enabled: boolean;
    /**
     * Whether HTTPS is required for redirect URIs
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    requireHttps: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRegistrationSettings
     */
    allowedScopes: Array<string>;
    /**
     * Maximum client lifetime in days (0 = no limit)
     * @type {number}
     * @memberof ClientRegistrationSettings
     */
    maxClientLifetime: number;
    /**
     * Whether terms of service URI is required
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    requireTermsOfService: boolean;
    /**
     * Whether privacy policy URI is required
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    requirePrivacyPolicy: boolean;
    /**
     * Whether public clients are allowed
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    allowPublicClients: boolean;
    /**
     * Whether confidential clients are allowed
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    allowConfidentialClients: boolean;
    /**
     * Whether backend service clients are allowed
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    allowBackendServices: boolean;
    /**
     * Whether admin approval is required for new registrations
     * @type {boolean}
     * @memberof ClientRegistrationSettings
     */
    adminApprovalRequired: boolean;
    /**
     * Rate limit for registration requests per minute
     * @type {number}
     * @memberof ClientRegistrationSettings
     */
    rateLimitPerMinute: number;
    /**
     * Maximum number of redirect URIs allowed per client
     * @type {number}
     * @memberof ClientRegistrationSettings
     */
    maxRedirectUris: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientRegistrationSettings
     */
    allowedRedirectUriPatterns: Array<string>;
    /**
     * Email to notify of new registrations
     * @type {string}
     * @memberof ClientRegistrationSettings
     */
    notificationEmail?: string;
}

/**
 * Check if a given object implements the ClientRegistrationSettings interface.
 */
export function instanceOfClientRegistrationSettings(value: object): value is ClientRegistrationSettings {
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('requireHttps' in value) || value['requireHttps'] === undefined) return false;
    if (!('allowedScopes' in value) || value['allowedScopes'] === undefined) return false;
    if (!('maxClientLifetime' in value) || value['maxClientLifetime'] === undefined) return false;
    if (!('requireTermsOfService' in value) || value['requireTermsOfService'] === undefined) return false;
    if (!('requirePrivacyPolicy' in value) || value['requirePrivacyPolicy'] === undefined) return false;
    if (!('allowPublicClients' in value) || value['allowPublicClients'] === undefined) return false;
    if (!('allowConfidentialClients' in value) || value['allowConfidentialClients'] === undefined) return false;
    if (!('allowBackendServices' in value) || value['allowBackendServices'] === undefined) return false;
    if (!('adminApprovalRequired' in value) || value['adminApprovalRequired'] === undefined) return false;
    if (!('rateLimitPerMinute' in value) || value['rateLimitPerMinute'] === undefined) return false;
    if (!('maxRedirectUris' in value) || value['maxRedirectUris'] === undefined) return false;
    if (!('allowedRedirectUriPatterns' in value) || value['allowedRedirectUriPatterns'] === undefined) return false;
    return true;
}

export function ClientRegistrationSettingsFromJSON(json: any): ClientRegistrationSettings {
    return ClientRegistrationSettingsFromJSONTyped(json, false);
}

export function ClientRegistrationSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientRegistrationSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'enabled': json['enabled'],
        'requireHttps': json['requireHttps'],
        'allowedScopes': json['allowedScopes'],
        'maxClientLifetime': json['maxClientLifetime'],
        'requireTermsOfService': json['requireTermsOfService'],
        'requirePrivacyPolicy': json['requirePrivacyPolicy'],
        'allowPublicClients': json['allowPublicClients'],
        'allowConfidentialClients': json['allowConfidentialClients'],
        'allowBackendServices': json['allowBackendServices'],
        'adminApprovalRequired': json['adminApprovalRequired'],
        'rateLimitPerMinute': json['rateLimitPerMinute'],
        'maxRedirectUris': json['maxRedirectUris'],
        'allowedRedirectUriPatterns': json['allowedRedirectUriPatterns'],
        'notificationEmail': json['notificationEmail'] == null ? undefined : json['notificationEmail'],
    };
}

export function ClientRegistrationSettingsToJSON(json: any): ClientRegistrationSettings {
    return ClientRegistrationSettingsToJSONTyped(json, false);
}

export function ClientRegistrationSettingsToJSONTyped(value?: ClientRegistrationSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'enabled': value['enabled'],
        'requireHttps': value['requireHttps'],
        'allowedScopes': value['allowedScopes'],
        'maxClientLifetime': value['maxClientLifetime'],
        'requireTermsOfService': value['requireTermsOfService'],
        'requirePrivacyPolicy': value['requirePrivacyPolicy'],
        'allowPublicClients': value['allowPublicClients'],
        'allowConfidentialClients': value['allowConfidentialClients'],
        'allowBackendServices': value['allowBackendServices'],
        'adminApprovalRequired': value['adminApprovalRequired'],
        'rateLimitPerMinute': value['rateLimitPerMinute'],
        'maxRedirectUris': value['maxRedirectUris'],
        'allowedRedirectUriPatterns': value['allowedRedirectUriPatterns'],
        'notificationEmail': value['notificationEmail'],
    };
}

