/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FhirPersonAssociation } from './FhirPersonAssociation';
import {
    FhirPersonAssociationFromJSON,
    FhirPersonAssociationFromJSONTyped,
    FhirPersonAssociationToJSON,
    FhirPersonAssociationToJSONTyped,
} from './FhirPersonAssociation';

/**
 * 
 * @export
 * @interface CreateHealthcareUserRequest
 */
export interface CreateHealthcareUserRequest {
    /**
     * Username (must be unique)
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    username: string;
    /**
     * Email address
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    email: string;
    /**
     * First name
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    firstName: string;
    /**
     * Last name
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    lastName: string;
    /**
     * Organization identifier
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    organization?: string;
    /**
     * FHIR Person associations to create
     * @type {Array<FhirPersonAssociation>}
     * @memberof CreateHealthcareUserRequest
     */
    fhirPersons?: Array<FhirPersonAssociation>;
    /**
     * User password
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    password?: string;
    /**
     * Whether password is temporary and must be changed
     * @type {boolean}
     * @memberof CreateHealthcareUserRequest
     */
    temporaryPassword?: boolean;
    /**
     * Realm-level roles to assign
     * @type {Array<string>}
     * @memberof CreateHealthcareUserRequest
     */
    realmRoles?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof CreateHealthcareUserRequest
     */
    clientRoles?: object;
    /**
     * Whether the user is enabled
     * @type {boolean}
     * @memberof CreateHealthcareUserRequest
     */
    enabled?: boolean;
    /**
     * Whether the email is verified
     * @type {boolean}
     * @memberof CreateHealthcareUserRequest
     */
    emailVerified?: boolean;
    /**
     * National Provider Identifier (NPI) for healthcare providers
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    npi?: string;
    /**
     * FHIR Practitioner resource ID
     * @type {string}
     * @memberof CreateHealthcareUserRequest
     */
    practitionerId?: string;
}

/**
 * Check if a given object implements the CreateHealthcareUserRequest interface.
 */
export function instanceOfCreateHealthcareUserRequest(value: object): value is CreateHealthcareUserRequest {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    return true;
}

export function CreateHealthcareUserRequestFromJSON(json: any): CreateHealthcareUserRequest {
    return CreateHealthcareUserRequestFromJSONTyped(json, false);
}

export function CreateHealthcareUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateHealthcareUserRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'username': json['username'],
        'email': json['email'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'organization': json['organization'] == null ? undefined : json['organization'],
        'fhirPersons': json['fhirPersons'] == null ? undefined : ((json['fhirPersons'] as Array<any>).map(FhirPersonAssociationFromJSON)),
        'password': json['password'] == null ? undefined : json['password'],
        'temporaryPassword': json['temporaryPassword'] == null ? undefined : json['temporaryPassword'],
        'realmRoles': json['realmRoles'] == null ? undefined : json['realmRoles'],
        'clientRoles': json['clientRoles'] == null ? undefined : json['clientRoles'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'emailVerified': json['emailVerified'] == null ? undefined : json['emailVerified'],
        'npi': json['npi'] == null ? undefined : json['npi'],
        'practitionerId': json['practitionerId'] == null ? undefined : json['practitionerId'],
    };
}

export function CreateHealthcareUserRequestToJSON(json: any): CreateHealthcareUserRequest {
    return CreateHealthcareUserRequestToJSONTyped(json, false);
}

export function CreateHealthcareUserRequestToJSONTyped(value?: CreateHealthcareUserRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'username': value['username'],
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'organization': value['organization'],
        'fhirPersons': value['fhirPersons'] == null ? undefined : ((value['fhirPersons'] as Array<any>).map(FhirPersonAssociationToJSON)),
        'password': value['password'],
        'temporaryPassword': value['temporaryPassword'],
        'realmRoles': value['realmRoles'],
        'clientRoles': value['clientRoles'],
        'enabled': value['enabled'],
        'emailVerified': value['emailVerified'],
        'npi': value['npi'],
        'practitionerId': value['practitionerId'],
    };
}

