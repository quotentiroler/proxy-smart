/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FhirContextItem } from './FhirContextItem';
import {
    FhirContextItemFromJSON,
    FhirContextItemFromJSONTyped,
    FhirContextItemToJSON,
    FhirContextItemToJSONTyped,
} from './FhirContextItem';

/**
 * 
 * @export
 * @interface AuthorizationDetail
 */
export interface AuthorizationDetail {
    /**
     * Authorization details type (smart_on_fhir)
     * @type {string}
     * @memberof AuthorizationDetail
     */
    type: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationDetail
     */
    locations: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationDetail
     */
    fhirVersions: Array<string>;
    /**
     * Space-separated SMART scopes for these locations
     * @type {string}
     * @memberof AuthorizationDetail
     */
    scope?: string;
    /**
     * Patient context for these locations
     * @type {string}
     * @memberof AuthorizationDetail
     */
    patient?: string;
    /**
     * Encounter context for these locations
     * @type {string}
     * @memberof AuthorizationDetail
     */
    encounter?: string;
    /**
     * FHIR context for these locations
     * @type {Array<FhirContextItem>}
     * @memberof AuthorizationDetail
     */
    fhirContext?: Array<FhirContextItem>;
}

/**
 * Check if a given object implements the AuthorizationDetail interface.
 */
export function instanceOfAuthorizationDetail(value: object): value is AuthorizationDetail {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('locations' in value) || value['locations'] === undefined) return false;
    if (!('fhirVersions' in value) || value['fhirVersions'] === undefined) return false;
    return true;
}

export function AuthorizationDetailFromJSON(json: any): AuthorizationDetail {
    return AuthorizationDetailFromJSONTyped(json, false);
}

export function AuthorizationDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizationDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'locations': json['locations'],
        'fhirVersions': json['fhirVersions'],
        'scope': json['scope'] == null ? undefined : json['scope'],
        'patient': json['patient'] == null ? undefined : json['patient'],
        'encounter': json['encounter'] == null ? undefined : json['encounter'],
        'fhirContext': json['fhirContext'] == null ? undefined : ((json['fhirContext'] as Array<any>).map(FhirContextItemFromJSON)),
    };
}

export function AuthorizationDetailToJSON(json: any): AuthorizationDetail {
    return AuthorizationDetailToJSONTyped(json, false);
}

export function AuthorizationDetailToJSONTyped(value?: AuthorizationDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'locations': value['locations'],
        'fhirVersions': value['fhirVersions'],
        'scope': value['scope'],
        'patient': value['patient'],
        'encounter': value['encounter'],
        'fhirContext': value['fhirContext'] == null ? undefined : ((value['fhirContext'] as Array<any>).map(FhirContextItemToJSON)),
    };
}

