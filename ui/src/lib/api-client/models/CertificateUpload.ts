/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MtlsConfigCertDetails } from './MtlsConfigCertDetails';
import {
    MtlsConfigCertDetailsFromJSON,
    MtlsConfigCertDetailsFromJSONTyped,
    MtlsConfigCertDetailsToJSON,
    MtlsConfigCertDetailsToJSONTyped,
} from './MtlsConfigCertDetails';

/**
 * 
 * @export
 * @interface CertificateUpload
 */
export interface CertificateUpload {
    /**
     * Whether the upload was successful
     * @type {boolean}
     * @memberof CertificateUpload
     */
    success: boolean;
    /**
     * Success or error message
     * @type {string}
     * @memberof CertificateUpload
     */
    message: string;
    /**
     * 
     * @type {MtlsConfigCertDetails}
     * @memberof CertificateUpload
     */
    certDetails?: MtlsConfigCertDetails;
}

/**
 * Check if a given object implements the CertificateUpload interface.
 */
export function instanceOfCertificateUpload(value: object): value is CertificateUpload {
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function CertificateUploadFromJSON(json: any): CertificateUpload {
    return CertificateUploadFromJSONTyped(json, false);
}

export function CertificateUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateUpload {
    if (json == null) {
        return json;
    }
    return {
        
        'success': json['success'],
        'message': json['message'],
        'certDetails': json['certDetails'] == null ? undefined : MtlsConfigCertDetailsFromJSON(json['certDetails']),
    };
}

export function CertificateUploadToJSON(json: any): CertificateUpload {
    return CertificateUploadToJSONTyped(json, false);
}

export function CertificateUploadToJSONTyped(value?: CertificateUpload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'success': value['success'],
        'message': value['message'],
        'certDetails': MtlsConfigCertDetailsToJSON(value['certDetails']),
    };
}

