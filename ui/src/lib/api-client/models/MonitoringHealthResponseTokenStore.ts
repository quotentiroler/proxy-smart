/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MonitoringHealthResponseTokenStore
 */
export interface MonitoringHealthResponseTokenStore {
    /**
     * Token store status
     * @type {string}
     * @memberof MonitoringHealthResponseTokenStore
     */
    status: string;
    /**
     * Number of active tokens
     * @type {number}
     * @memberof MonitoringHealthResponseTokenStore
     */
    activeTokens: number;
    /**
     * Storage used percentage
     * @type {number}
     * @memberof MonitoringHealthResponseTokenStore
     */
    storageUsed: number;
}

/**
 * Check if a given object implements the MonitoringHealthResponseTokenStore interface.
 */
export function instanceOfMonitoringHealthResponseTokenStore(value: object): value is MonitoringHealthResponseTokenStore {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('activeTokens' in value) || value['activeTokens'] === undefined) return false;
    if (!('storageUsed' in value) || value['storageUsed'] === undefined) return false;
    return true;
}

export function MonitoringHealthResponseTokenStoreFromJSON(json: any): MonitoringHealthResponseTokenStore {
    return MonitoringHealthResponseTokenStoreFromJSONTyped(json, false);
}

export function MonitoringHealthResponseTokenStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonitoringHealthResponseTokenStore {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'],
        'activeTokens': json['activeTokens'],
        'storageUsed': json['storageUsed'],
    };
}

export function MonitoringHealthResponseTokenStoreToJSON(json: any): MonitoringHealthResponseTokenStore {
    return MonitoringHealthResponseTokenStoreToJSONTyped(json, false);
}

export function MonitoringHealthResponseTokenStoreToJSONTyped(value?: MonitoringHealthResponseTokenStore | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'activeTokens': value['activeTokens'],
        'storageUsed': value['storageUsed'],
    };
}

