/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IdentityProviderConfig
 */
export interface IdentityProviderConfig {
    /**
     * Display name for UI
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    displayName?: string;
    /**
     * Whether the provider is enabled
     * @type {boolean}
     * @memberof IdentityProviderConfig
     */
    enabled?: boolean;
    /**
     * OAuth2 client secret
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    clientSecret?: string;
    /**
     * Token endpoint URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    tokenUrl?: string;
    /**
     * UserInfo endpoint URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    userInfoUrl?: string;
    /**
     * OIDC issuer URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    issuer?: string;
    /**
     * Default OAuth2 scopes
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    defaultScopes?: string;
    /**
     * Logout endpoint URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    logoutUrl?: string;
    /**
     * SAML entity ID
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    entityId?: string;
    /**
     * SAML SSO URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    singleSignOnServiceUrl?: string;
    /**
     * SAML SLO URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    singleLogoutServiceUrl?: string;
    /**
     * SAML metadata URL
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    metadataDescriptorUrl?: string;
    /**
     * SAML signature algorithm
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    signatureAlgorithm?: string;
    /**
     * SAML NameID format
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    nameIdPolicyFormat?: string;
    /**
     * SAML signing certificate
     * @type {string}
     * @memberof IdentityProviderConfig
     */
    signingCertificate?: string;
    /**
     * Validate SAML signatures
     * @type {boolean}
     * @memberof IdentityProviderConfig
     */
    validateSignature?: boolean;
    /**
     * Require signed AuthN requests
     * @type {boolean}
     * @memberof IdentityProviderConfig
     */
    wantAuthnRequestsSigned?: boolean;
    /**
     * 
     * @type {object}
     * @memberof IdentityProviderConfig
     */
    additionalConfig?: object;
}

/**
 * Check if a given object implements the IdentityProviderConfig interface.
 */
export function instanceOfIdentityProviderConfig(value: object): value is IdentityProviderConfig {
    return true;
}

export function IdentityProviderConfigFromJSON(json: any): IdentityProviderConfig {
    return IdentityProviderConfigFromJSONTyped(json, false);
}

export function IdentityProviderConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityProviderConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'clientSecret': json['clientSecret'] == null ? undefined : json['clientSecret'],
        'tokenUrl': json['tokenUrl'] == null ? undefined : json['tokenUrl'],
        'userInfoUrl': json['userInfoUrl'] == null ? undefined : json['userInfoUrl'],
        'issuer': json['issuer'] == null ? undefined : json['issuer'],
        'defaultScopes': json['defaultScopes'] == null ? undefined : json['defaultScopes'],
        'logoutUrl': json['logoutUrl'] == null ? undefined : json['logoutUrl'],
        'entityId': json['entityId'] == null ? undefined : json['entityId'],
        'singleSignOnServiceUrl': json['singleSignOnServiceUrl'] == null ? undefined : json['singleSignOnServiceUrl'],
        'singleLogoutServiceUrl': json['singleLogoutServiceUrl'] == null ? undefined : json['singleLogoutServiceUrl'],
        'metadataDescriptorUrl': json['metadataDescriptorUrl'] == null ? undefined : json['metadataDescriptorUrl'],
        'signatureAlgorithm': json['signatureAlgorithm'] == null ? undefined : json['signatureAlgorithm'],
        'nameIdPolicyFormat': json['nameIdPolicyFormat'] == null ? undefined : json['nameIdPolicyFormat'],
        'signingCertificate': json['signingCertificate'] == null ? undefined : json['signingCertificate'],
        'validateSignature': json['validateSignature'] == null ? undefined : json['validateSignature'],
        'wantAuthnRequestsSigned': json['wantAuthnRequestsSigned'] == null ? undefined : json['wantAuthnRequestsSigned'],
        'additionalConfig': json['additionalConfig'] == null ? undefined : json['additionalConfig'],
    };
}

export function IdentityProviderConfigToJSON(json: any): IdentityProviderConfig {
    return IdentityProviderConfigToJSONTyped(json, false);
}

export function IdentityProviderConfigToJSONTyped(value?: IdentityProviderConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'displayName': value['displayName'],
        'enabled': value['enabled'],
        'clientSecret': value['clientSecret'],
        'tokenUrl': value['tokenUrl'],
        'userInfoUrl': value['userInfoUrl'],
        'issuer': value['issuer'],
        'defaultScopes': value['defaultScopes'],
        'logoutUrl': value['logoutUrl'],
        'entityId': value['entityId'],
        'singleSignOnServiceUrl': value['singleSignOnServiceUrl'],
        'singleLogoutServiceUrl': value['singleLogoutServiceUrl'],
        'metadataDescriptorUrl': value['metadataDescriptorUrl'],
        'signatureAlgorithm': value['signatureAlgorithm'],
        'nameIdPolicyFormat': value['nameIdPolicyFormat'],
        'signingCertificate': value['signingCertificate'],
        'validateSignature': value['validateSignature'],
        'wantAuthnRequestsSigned': value['wantAuthnRequestsSigned'],
        'additionalConfig': value['additionalConfig'],
    };
}

