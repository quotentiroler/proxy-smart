/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MonitoringHealthResponseOauthServer } from './MonitoringHealthResponseOauthServer';
import {
    MonitoringHealthResponseOauthServerFromJSON,
    MonitoringHealthResponseOauthServerFromJSONTyped,
    MonitoringHealthResponseOauthServerToJSON,
    MonitoringHealthResponseOauthServerToJSONTyped,
} from './MonitoringHealthResponseOauthServer';
import type { AlertInfo } from './AlertInfo';
import {
    AlertInfoFromJSON,
    AlertInfoFromJSONTyped,
    AlertInfoToJSON,
    AlertInfoToJSONTyped,
} from './AlertInfo';
import type { MonitoringHealthResponseNetwork } from './MonitoringHealthResponseNetwork';
import {
    MonitoringHealthResponseNetworkFromJSON,
    MonitoringHealthResponseNetworkFromJSONTyped,
    MonitoringHealthResponseNetworkToJSON,
    MonitoringHealthResponseNetworkToJSONTyped,
} from './MonitoringHealthResponseNetwork';
import type { MonitoringHealthResponseTokenStore } from './MonitoringHealthResponseTokenStore';
import {
    MonitoringHealthResponseTokenStoreFromJSON,
    MonitoringHealthResponseTokenStoreFromJSONTyped,
    MonitoringHealthResponseTokenStoreToJSON,
    MonitoringHealthResponseTokenStoreToJSONTyped,
} from './MonitoringHealthResponseTokenStore';

/**
 * 
 * @export
 * @interface MonitoringHealthResponse
 */
export interface MonitoringHealthResponse {
    /**
     * 
     * @type {MonitoringHealthResponseOauthServer}
     * @memberof MonitoringHealthResponse
     */
    oauthServer: MonitoringHealthResponseOauthServer;
    /**
     * 
     * @type {MonitoringHealthResponseTokenStore}
     * @memberof MonitoringHealthResponse
     */
    tokenStore: MonitoringHealthResponseTokenStore;
    /**
     * 
     * @type {MonitoringHealthResponseNetwork}
     * @memberof MonitoringHealthResponse
     */
    network: MonitoringHealthResponseNetwork;
    /**
     * System alerts
     * @type {Array<AlertInfo>}
     * @memberof MonitoringHealthResponse
     */
    alerts: Array<AlertInfo>;
    /**
     * Timestamp (ISO 8601)
     * @type {string}
     * @memberof MonitoringHealthResponse
     */
    timestamp: string;
}

/**
 * Check if a given object implements the MonitoringHealthResponse interface.
 */
export function instanceOfMonitoringHealthResponse(value: object): value is MonitoringHealthResponse {
    if (!('oauthServer' in value) || value['oauthServer'] === undefined) return false;
    if (!('tokenStore' in value) || value['tokenStore'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('alerts' in value) || value['alerts'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function MonitoringHealthResponseFromJSON(json: any): MonitoringHealthResponse {
    return MonitoringHealthResponseFromJSONTyped(json, false);
}

export function MonitoringHealthResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonitoringHealthResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'oauthServer': MonitoringHealthResponseOauthServerFromJSON(json['oauthServer']),
        'tokenStore': MonitoringHealthResponseTokenStoreFromJSON(json['tokenStore']),
        'network': MonitoringHealthResponseNetworkFromJSON(json['network']),
        'alerts': ((json['alerts'] as Array<any>).map(AlertInfoFromJSON)),
        'timestamp': json['timestamp'],
    };
}

export function MonitoringHealthResponseToJSON(json: any): MonitoringHealthResponse {
    return MonitoringHealthResponseToJSONTyped(json, false);
}

export function MonitoringHealthResponseToJSONTyped(value?: MonitoringHealthResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'oauthServer': MonitoringHealthResponseOauthServerToJSON(value['oauthServer']),
        'tokenStore': MonitoringHealthResponseTokenStoreToJSON(value['tokenStore']),
        'network': MonitoringHealthResponseNetworkToJSON(value['network']),
        'alerts': ((value['alerts'] as Array<any>).map(AlertInfoToJSON)),
        'timestamp': value['timestamp'],
    };
}

