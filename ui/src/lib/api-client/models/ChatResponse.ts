/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentChunk } from './DocumentChunk';
import {
    DocumentChunkFromJSON,
    DocumentChunkFromJSONTyped,
    DocumentChunkToJSON,
    DocumentChunkToJSONTyped,
} from './DocumentChunk';

/**
 * 
 * @export
 * @interface ChatResponse
 */
export interface ChatResponse {
    /**
     * AI-generated answer
     * @type {string}
     * @memberof ChatResponse
     */
    answer: string;
    /**
     * Source documents used
     * @type {Array<DocumentChunk>}
     * @memberof ChatResponse
     */
    sources: Array<DocumentChunk>;
    /**
     * Confidence score (0-1)
     * @type {number}
     * @memberof ChatResponse
     */
    confidence: number;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    mode: ChatResponseModeEnum;
    /**
     * Response timestamp (ISO 8601)
     * @type {string}
     * @memberof ChatResponse
     */
    timestamp: string;
}


/**
 * @export
 */
export const ChatResponseModeEnum = {
    Openai: 'openai',
    RuleBased: 'rule-based'
} as const;
export type ChatResponseModeEnum = typeof ChatResponseModeEnum[keyof typeof ChatResponseModeEnum];


/**
 * Check if a given object implements the ChatResponse interface.
 */
export function instanceOfChatResponse(value: object): value is ChatResponse {
    if (!('answer' in value) || value['answer'] === undefined) return false;
    if (!('sources' in value) || value['sources'] === undefined) return false;
    if (!('confidence' in value) || value['confidence'] === undefined) return false;
    if (!('mode' in value) || value['mode'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function ChatResponseFromJSON(json: any): ChatResponse {
    return ChatResponseFromJSONTyped(json, false);
}

export function ChatResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'answer': json['answer'],
        'sources': ((json['sources'] as Array<any>).map(DocumentChunkFromJSON)),
        'confidence': json['confidence'],
        'mode': json['mode'],
        'timestamp': json['timestamp'],
    };
}

export function ChatResponseToJSON(json: any): ChatResponse {
    return ChatResponseToJSONTyped(json, false);
}

export function ChatResponseToJSONTyped(value?: ChatResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'answer': value['answer'],
        'sources': ((value['sources'] as Array<any>).map(DocumentChunkToJSON)),
        'confidence': value['confidence'],
        'mode': value['mode'],
        'timestamp': value['timestamp'],
    };
}

