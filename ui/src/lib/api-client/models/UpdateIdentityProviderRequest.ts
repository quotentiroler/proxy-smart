/* tslint:disable */
/* eslint-disable */
/**
 * Proxy Smart
 * SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia
 *
 * The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityProviderConfig } from './IdentityProviderConfig';
import {
    IdentityProviderConfigFromJSON,
    IdentityProviderConfigFromJSONTyped,
    IdentityProviderConfigToJSON,
    IdentityProviderConfigToJSONTyped,
} from './IdentityProviderConfig';

/**
 * 
 * @export
 * @interface UpdateIdentityProviderRequest
 */
export interface UpdateIdentityProviderRequest {
    /**
     * Display name
     * @type {string}
     * @memberof UpdateIdentityProviderRequest
     */
    displayName?: string;
    /**
     * Enable or disable the provider
     * @type {boolean}
     * @memberof UpdateIdentityProviderRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {IdentityProviderConfig}
     * @memberof UpdateIdentityProviderRequest
     */
    config?: IdentityProviderConfig;
}

/**
 * Check if a given object implements the UpdateIdentityProviderRequest interface.
 */
export function instanceOfUpdateIdentityProviderRequest(value: object): value is UpdateIdentityProviderRequest {
    return true;
}

export function UpdateIdentityProviderRequestFromJSON(json: any): UpdateIdentityProviderRequest {
    return UpdateIdentityProviderRequestFromJSONTyped(json, false);
}

export function UpdateIdentityProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateIdentityProviderRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'config': json['config'] == null ? undefined : IdentityProviderConfigFromJSON(json['config']),
    };
}

export function UpdateIdentityProviderRequestToJSON(json: any): UpdateIdentityProviderRequest {
    return UpdateIdentityProviderRequestToJSONTyped(json, false);
}

export function UpdateIdentityProviderRequestToJSONTyped(value?: UpdateIdentityProviderRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'displayName': value['displayName'],
        'enabled': value['enabled'],
        'config': IdentityProviderConfigToJSON(value['config']),
    };
}

