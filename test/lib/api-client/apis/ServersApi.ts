/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFhirServers200Response,
  GetFhirServers500Response,
  GetFhirServersByServerName200Response,
  GetFhirServersByServerName404Response,
  GetFhirServersByServerName500Response,
} from '../models/index';
import {
    GetFhirServers200ResponseFromJSON,
    GetFhirServers200ResponseToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    GetFhirServersByServerName200ResponseFromJSON,
    GetFhirServersByServerName200ResponseToJSON,
    GetFhirServersByServerName404ResponseFromJSON,
    GetFhirServersByServerName404ResponseToJSON,
    GetFhirServersByServerName500ResponseFromJSON,
    GetFhirServersByServerName500ResponseToJSON,
} from '../models/index';

export interface GetFhirServersByServerNameRequest {
    serverName: string;
}

/**
 * 
 */
export class ServersApi extends runtime.BaseAPI {

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFhirServers200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFhirServers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFhirServers200Response> {
        const response = await this.getFhirServersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerNameRaw(requestParameters: GetFhirServersByServerNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFhirServersByServerName200Response>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling getFhirServersByServerName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/{server_name}`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFhirServersByServerName200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerName(requestParameters: GetFhirServersByServerNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFhirServersByServerName200Response> {
        const response = await this.getFhirServersByServerNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
