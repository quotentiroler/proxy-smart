/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetFhirServers200Response,
  GetFhirServers500Response,
  GetFhirServersByServerName200Response,
  GetFhirServersByServerName500Response,
  PostFhirServers200Response,
  PostFhirServers401Response,
  PostFhirServersRequest,
  PutFhirServersByServerId200Response,
  PutFhirServersByServerId400Response,
  PutFhirServersByServerIdRequest,
} from '../models/index';
import {
    GetFhirServers200ResponseFromJSON,
    GetFhirServers200ResponseToJSON,
    GetFhirServers500ResponseFromJSON,
    GetFhirServers500ResponseToJSON,
    GetFhirServersByServerName200ResponseFromJSON,
    GetFhirServersByServerName200ResponseToJSON,
    GetFhirServersByServerName500ResponseFromJSON,
    GetFhirServersByServerName500ResponseToJSON,
    PostFhirServers200ResponseFromJSON,
    PostFhirServers200ResponseToJSON,
    PostFhirServers401ResponseFromJSON,
    PostFhirServers401ResponseToJSON,
    PostFhirServersRequestFromJSON,
    PostFhirServersRequestToJSON,
    PutFhirServersByServerId200ResponseFromJSON,
    PutFhirServersByServerId200ResponseToJSON,
    PutFhirServersByServerId400ResponseFromJSON,
    PutFhirServersByServerId400ResponseToJSON,
    PutFhirServersByServerIdRequestFromJSON,
    PutFhirServersByServerIdRequestToJSON,
} from '../models/index';

export interface GetFhirServersByServerNameRequest {
    serverName: string;
}

export interface PostFhirServersOperationRequest {
    postFhirServersRequest: PostFhirServersRequest;
}

export interface PutFhirServersByServerIdOperationRequest {
    serverId: string;
    putFhirServersByServerIdRequest: PutFhirServersByServerIdRequest;
}

/**
 * 
 */
export class ServersApi extends runtime.BaseAPI {

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFhirServers200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFhirServers200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all configured FHIR servers with their connection information and endpoints
     * List Available FHIR Servers
     */
    async getFhirServers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFhirServers200Response> {
        const response = await this.getFhirServersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerNameRaw(requestParameters: GetFhirServersByServerNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFhirServersByServerName200Response>> {
        if (requestParameters['serverName'] == null) {
            throw new runtime.RequiredError(
                'serverName',
                'Required parameter "serverName" was null or undefined when calling getFhirServersByServerName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/fhir-servers/{server_name}`;
        urlPath = urlPath.replace(`{${"server_name"}}`, encodeURIComponent(String(requestParameters['serverName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFhirServersByServerName200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific FHIR server
     * Get Server Information
     */
    async getFhirServersByServerName(requestParameters: GetFhirServersByServerNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFhirServersByServerName200Response> {
        const response = await this.getFhirServersByServerNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new FHIR server to the system by providing its base URL
     * Add New FHIR Server
     */
    async postFhirServersRaw(requestParameters: PostFhirServersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostFhirServers200Response>> {
        if (requestParameters['postFhirServersRequest'] == null) {
            throw new runtime.RequiredError(
                'postFhirServersRequest',
                'Required parameter "postFhirServersRequest" was null or undefined when calling postFhirServers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFhirServersRequestToJSON(requestParameters['postFhirServersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFhirServers200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a new FHIR server to the system by providing its base URL
     * Add New FHIR Server
     */
    async postFhirServers(requestParameters: PostFhirServersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostFhirServers200Response> {
        const response = await this.postFhirServersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing FHIR server by providing its new base URL
     * Update FHIR Server
     */
    async putFhirServersByServerIdRaw(requestParameters: PutFhirServersByServerIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutFhirServersByServerId200Response>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling putFhirServersByServerId().'
            );
        }

        if (requestParameters['putFhirServersByServerIdRequest'] == null) {
            throw new runtime.RequiredError(
                'putFhirServersByServerIdRequest',
                'Required parameter "putFhirServersByServerIdRequest" was null or undefined when calling putFhirServersByServerId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/fhir-servers/{serverId}`;
        urlPath = urlPath.replace(`{${"serverId"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutFhirServersByServerIdRequestToJSON(requestParameters['putFhirServersByServerIdRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutFhirServersByServerId200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing FHIR server by providing its new base URL
     * Update FHIR Server
     */
    async putFhirServersByServerId(requestParameters: PutFhirServersByServerIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutFhirServersByServerId200Response> {
        const response = await this.putFhirServersByServerIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
