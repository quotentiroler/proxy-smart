/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteAdminRolesByRoleName200Response,
  GetAdminLaunchContexts200ResponseInner,
  PutAdminRolesByRoleName200Response,
} from '../models/index';
import {
    DeleteAdminRolesByRoleName200ResponseFromJSON,
    DeleteAdminRolesByRoleName200ResponseToJSON,
    GetAdminLaunchContexts200ResponseInnerFromJSON,
    GetAdminLaunchContexts200ResponseInnerToJSON,
    PutAdminRolesByRoleName200ResponseFromJSON,
    PutAdminRolesByRoleName200ResponseToJSON,
} from '../models/index';

export interface DeleteAdminLaunchContextsByUserIdEncounterRequest {
    userId: string;
}

export interface DeleteAdminLaunchContextsByUserIdPatientRequest {
    userId: string;
}

export interface PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest {
    userId: string;
    encounterId: string;
}

export interface PostAdminLaunchContextsByUserIdPatientByPatientIdRequest {
    userId: string;
    patientId: string;
}

/**
 * 
 */
export class LaunchContextsApi extends runtime.BaseAPI {

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAdminRolesByRoleName200Response>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdEncounter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/launch-contexts/{userId}/encounter`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove the encounter context for a user
     * Remove Encounter Context
     */
    async deleteAdminLaunchContextsByUserIdEncounter(requestParameters: DeleteAdminLaunchContextsByUserIdEncounterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAdminRolesByRoleName200Response> {
        const response = await this.deleteAdminLaunchContextsByUserIdEncounterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAdminRolesByRoleName200Response>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteAdminLaunchContextsByUserIdPatient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/launch-contexts/{userId}/patient`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove the patient context for a user
     * Remove Patient Context
     */
    async deleteAdminLaunchContextsByUserIdPatient(requestParameters: DeleteAdminLaunchContextsByUserIdPatientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAdminRolesByRoleName200Response> {
        const response = await this.deleteAdminLaunchContextsByUserIdPatientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContextsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminLaunchContexts200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/launch-contexts/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminLaunchContexts200ResponseInnerFromJSON));
    }

    /**
     * Get all users with launch context attributes
     * List Launch Contexts
     */
    async getAdminLaunchContexts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminLaunchContexts200ResponseInner>> {
        const response = await this.getAdminLaunchContextsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminRolesByRoleName200Response>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        if (requestParameters['encounterId'] == null) {
            throw new runtime.RequiredError(
                'encounterId',
                'Required parameter "encounterId" was null or undefined when calling postAdminLaunchContextsByUserIdEncounterByEncounterId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/launch-contexts/{userId}/encounter/{encounterId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"encounterId"}}`, encodeURIComponent(String(requestParameters['encounterId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the encounter context for a user
     * Set Encounter Context
     */
    async postAdminLaunchContextsByUserIdEncounterByEncounterId(requestParameters: PostAdminLaunchContextsByUserIdEncounterByEncounterIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminRolesByRoleName200Response> {
        const response = await this.postAdminLaunchContextsByUserIdEncounterByEncounterIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminRolesByRoleName200Response>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        if (requestParameters['patientId'] == null) {
            throw new runtime.RequiredError(
                'patientId',
                'Required parameter "patientId" was null or undefined when calling postAdminLaunchContextsByUserIdPatientByPatientId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/launch-contexts/{userId}/patient/{patientId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters['patientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Set the patient context for a user
     * Set Patient Context
     */
    async postAdminLaunchContextsByUserIdPatientByPatientId(requestParameters: PostAdminLaunchContextsByUserIdPatientByPatientIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminRolesByRoleName200Response> {
        const response = await this.postAdminLaunchContextsByUserIdPatientByPatientIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
