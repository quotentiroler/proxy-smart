/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteAdminRolesByRoleName200Response,
  GetAdminIdps200ResponseInner,
  PostAdminIdpsRequest,
  PutAdminIdpsByAliasRequest,
  PutAdminRolesByRoleName200Response,
} from '../models/index';
import {
    DeleteAdminRolesByRoleName200ResponseFromJSON,
    DeleteAdminRolesByRoleName200ResponseToJSON,
    GetAdminIdps200ResponseInnerFromJSON,
    GetAdminIdps200ResponseInnerToJSON,
    PostAdminIdpsRequestFromJSON,
    PostAdminIdpsRequestToJSON,
    PutAdminIdpsByAliasRequestFromJSON,
    PutAdminIdpsByAliasRequestToJSON,
    PutAdminRolesByRoleName200ResponseFromJSON,
    PutAdminRolesByRoleName200ResponseToJSON,
} from '../models/index';

export interface DeleteAdminIdpsByAliasRequest {
    alias: string;
}

export interface GetAdminIdpsByAliasRequest {
    alias: string;
}

export interface PostAdminIdpsOperationRequest {
    postAdminIdpsRequest: PostAdminIdpsRequest;
}

export interface PutAdminIdpsByAliasOperationRequest {
    alias: string;
    putAdminIdpsByAliasRequest: PutAdminIdpsByAliasRequest;
}

/**
 * 
 */
export class IdentityProvidersApi extends runtime.BaseAPI {

    /**
     * Delete an identity provider by alias
     * Delete Identity Provider
     */
    async deleteAdminIdpsByAliasRaw(requestParameters: DeleteAdminIdpsByAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAdminRolesByRoleName200Response>> {
        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling deleteAdminIdpsByAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/idps/{alias}`;
        urlPath = urlPath.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an identity provider by alias
     * Delete Identity Provider
     */
    async deleteAdminIdpsByAlias(requestParameters: DeleteAdminIdpsByAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAdminRolesByRoleName200Response> {
        const response = await this.deleteAdminIdpsByAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all configured identity providers
     * List Identity Providers
     */
    async getAdminIdpsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetAdminIdps200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/idps/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetAdminIdps200ResponseInnerFromJSON));
    }

    /**
     * Get all configured identity providers
     * List Identity Providers
     */
    async getAdminIdps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetAdminIdps200ResponseInner>> {
        const response = await this.getAdminIdpsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get an identity provider by alias
     * Get Identity Provider
     */
    async getAdminIdpsByAliasRaw(requestParameters: GetAdminIdpsByAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminIdps200ResponseInner>> {
        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling getAdminIdpsByAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/admin/idps/{alias}`;
        urlPath = urlPath.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminIdps200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Get an identity provider by alias
     * Get Identity Provider
     */
    async getAdminIdpsByAlias(requestParameters: GetAdminIdpsByAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminIdps200ResponseInner> {
        const response = await this.getAdminIdpsByAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new identity provider
     * Create Identity Provider
     */
    async postAdminIdpsRaw(requestParameters: PostAdminIdpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAdminIdps200ResponseInner>> {
        if (requestParameters['postAdminIdpsRequest'] == null) {
            throw new runtime.RequiredError(
                'postAdminIdpsRequest',
                'Required parameter "postAdminIdpsRequest" was null or undefined when calling postAdminIdps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/admin/idps/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAdminIdpsRequestToJSON(requestParameters['postAdminIdpsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdminIdps200ResponseInnerFromJSON(jsonValue));
    }

    /**
     * Create a new identity provider
     * Create Identity Provider
     */
    async postAdminIdps(requestParameters: PostAdminIdpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAdminIdps200ResponseInner> {
        const response = await this.postAdminIdpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an identity provider by alias
     * Update Identity Provider
     */
    async putAdminIdpsByAliasRaw(requestParameters: PutAdminIdpsByAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutAdminRolesByRoleName200Response>> {
        if (requestParameters['alias'] == null) {
            throw new runtime.RequiredError(
                'alias',
                'Required parameter "alias" was null or undefined when calling putAdminIdpsByAlias().'
            );
        }

        if (requestParameters['putAdminIdpsByAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'putAdminIdpsByAliasRequest',
                'Required parameter "putAdminIdpsByAliasRequest" was null or undefined when calling putAdminIdpsByAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/admin/idps/{alias}`;
        urlPath = urlPath.replace(`{${"alias"}}`, encodeURIComponent(String(requestParameters['alias'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAdminIdpsByAliasRequestToJSON(requestParameters['putAdminIdpsByAliasRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutAdminRolesByRoleName200ResponseFromJSON(jsonValue));
    }

    /**
     * Update an identity provider by alias
     * Update Identity Provider
     */
    async putAdminIdpsByAlias(requestParameters: PutAdminIdpsByAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutAdminRolesByRoleName200Response> {
        const response = await this.putAdminIdpsByAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
