/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetServerInfo500Response,
  PostVByFhirReleaseFhirCacheRefresh200Response,
} from '../models/index';
import {
    GetServerInfo500ResponseFromJSON,
    GetServerInfo500ResponseToJSON,
    PostVByFhirReleaseFhirCacheRefresh200ResponseFromJSON,
    PostVByFhirReleaseFhirCacheRefresh200ResponseToJSON,
} from '../models/index';

export interface GetVByFhirReleaseFhirRequest {
    fhirRelease: string;
}

export interface PostVByFhirReleaseFhirCacheRefreshRequest {
    fhirRelease: string;
}

/**
 * 
 */
export class FhirApi extends runtime.BaseAPI {

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getVByFhirReleaseFhirRaw(requestParameters: GetVByFhirReleaseFhirRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fhirRelease'] == null) {
            throw new runtime.RequiredError(
                'fhirRelease',
                'Required parameter "fhirRelease" was null or undefined when calling getVByFhirReleaseFhir().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v/{fhir_release}/fhir/`;
        urlPath = urlPath.replace(`{${"fhir_release"}}`, encodeURIComponent(String(requestParameters['fhirRelease'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Serve the content from the FHIR server base URL
     * FHIR Server Base URL
     */
    async getVByFhirReleaseFhir(requestParameters: GetVByFhirReleaseFhirRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getVByFhirReleaseFhirRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postVByFhirReleaseFhirCacheRefreshRaw(requestParameters: PostVByFhirReleaseFhirCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostVByFhirReleaseFhirCacheRefresh200Response>> {
        if (requestParameters['fhirRelease'] == null) {
            throw new runtime.RequiredError(
                'fhirRelease',
                'Required parameter "fhirRelease" was null or undefined when calling postVByFhirReleaseFhirCacheRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v/{fhir_release}/fhir/cache/refresh`;
        urlPath = urlPath.replace(`{${"fhir_release"}}`, encodeURIComponent(String(requestParameters['fhirRelease'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostVByFhirReleaseFhirCacheRefresh200ResponseFromJSON(jsonValue));
    }

    /**
     * Clear and refresh the cached FHIR server information
     * Refresh FHIR Server Cache
     */
    async postVByFhirReleaseFhirCacheRefresh(requestParameters: PostVByFhirReleaseFhirCacheRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostVByFhirReleaseFhirCacheRefresh200Response> {
        const response = await this.postVByFhirReleaseFhirCacheRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
