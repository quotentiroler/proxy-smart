/* tslint:disable */
/* eslint-disable */
/**
 * SMART on FHIR API
 * Healthcare administration API for SMART on FHIR applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetServerInfo200Response,
  GetServerInfo500Response,
} from '../models/index';
import {
    GetServerInfo200ResponseFromJSON,
    GetServerInfo200ResponseToJSON,
    GetServerInfo500ResponseFromJSON,
    GetServerInfo500ResponseToJSON,
} from '../models/index';

export interface GetServerInfoRequest {
    version?: string;
}

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     * Get information about the FHIR server version and capabilities
     * Get FHIR Server Information
     */
    async getServerInfoRaw(requestParameters: GetServerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServerInfo200Response>> {
        const queryParameters: any = {};

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/server-info`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServerInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * Get information about the FHIR server version and capabilities
     * Get FHIR Server Information
     */
    async getServerInfo(requestParameters: GetServerInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServerInfo200Response> {
        const response = await this.getServerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
