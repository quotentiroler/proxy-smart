{
  "analysis": "I reviewed the junior AI\u2019s proposed frontend additions. They create three new components (LaunchContextPanel, PatientSelector, ClinicalDecisionSupportPanel) and minimal FHIR types, plus a barrel index. This does align with the checklist items: Launch Context UI, Patient selection UI, and Clinical decision support UI. However, there are some refinements to ensure maintainability and integration:\n\n- Type safety: Expand minimal FHIR types a bit and provide a helper to format HumanName consistently to avoid repeating string fallbacks.\n- Accessibility: Add ids/labels linking and button types to avoid accidental form submissions, and aria-live for dynamic results/errors.\n- Network robustness: Add AbortController for debounced patient search to prevent race conditions; guard against stale results.\n- Configuration: Make fhirBaseUrl and cdsEndpoint overridable via props but also via an environment variable fallback (Vite import.meta.env) if available. Default to backend proxy paths.\n- Consistency: Export named and default for components, and keep barrel exports aligned. Add explicit React import is fine with TSX but ensure no reliance on Tailwind unless the project uses it; since many projects here use Tailwind, we\u2019ll keep utility classes but degrade gracefully.\n\nThese changes remain non-breaking (new files only) and can be integrated into existing routes/pages. They don\u2019t depend on backend implementations beyond assumed proxy endpoints, which suits the planned backend work.\n\nNote: Since we don\u2019t have existing FHIR type definitions in the repo context, adding a minimal ui/src/types/fhir.ts is appropriate. If such types already exist, this can be merged later; we avoid naming collisions by keeping it minimal and namespaced types. We also provide a small nameFormatter util to keep display logic consistent.\n",
  "changes": [
    {
      "action": "create",
      "file": "ui/src/types/fhir.ts",
      "search": "",
      "replace": "/* Minimal FHIR types used by UI components. Extend as needed. */\nexport interface HumanName {\n  use?: string;\n  text?: string;\n  family?: string;\n  given?: string[];\n  prefix?: string[];\n  suffix?: string[];\n}\n\nexport interface Patient {\n  resourceType?: 'Patient';\n  id?: string;\n  name?: HumanName[];\n  birthDate?: string;\n  gender?: string;\n  telecom?: Array<{ system?: string; value?: string; use?: string }>;\n  address?: Array<{ line?: string[]; city?: string; state?: string; postalCode?: string; country?: string }>;\n  [key: string]: any;\n}\n\nexport interface LaunchContext {\n  patientId?: string;\n  encounterId?: string;\n  providerId?: string;\n  appClientId?: string;\n  raw?: Record<string, any>;\n}\n\nexport function formatHumanName(name?: HumanName): string {\n  if (!name) return '';\n  if (name.text) return name.text;\n  const given = name.given?.join(' ') ?? '';\n  const family = name.family ?? '';\n  return [given, family].filter(Boolean).join(' ').trim();\n}\n\nexport function formatPatientName(p?: Patient | null | undefined): string {\n  if (!p) return '';\n  const names = p.name ?? [];\n  if (!names.length) return 'Unnamed';\n  const formatted = names.map(n => formatHumanName(n)).filter(Boolean);\n  return formatted.length ? formatted.join(', ') : 'Unnamed';\n}\n",
      "reasoning": "Adds minimal FHIR types and small helpers to consistently format names. Keeps UI components cleaner and type safe. The helpers avoid duplicating string logic across components.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/LaunchContextPanel.tsx",
      "search": "",
      "replace": "import React, { useEffect, useId, useState } from 'react';\nimport type { LaunchContext, Patient } from '../types/fhir';\nimport { formatPatientName } from '../types/fhir';\n\ninterface Props {\n  launchContext?: LaunchContext;\n  onChange?: (ctx: LaunchContext) => void;\n  // Optional: If you want to display patient summary inline\n  patient?: Patient | null;\n}\n\nexport const LaunchContextPanel: React.FC<Props> = ({ launchContext = {}, onChange, patient = null }) => {\n  const [editing, setEditing] = useState(false);\n  const [local, setLocal] = useState<LaunchContext>(launchContext);\n  const patientId = useId();\n  const encounterId = useId();\n  const providerId = useId();\n  const clientId = useId();\n\n  useEffect(() => {\n    setLocal(launchContext);\n  }, [launchContext]);\n\n  const toggleEdit = () => setEditing(e => !e);\n\n  const handleField = (k: keyof LaunchContext) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    const updated = { ...local, [k]: e.target.value };\n    setLocal(updated);\n    onChange?.(updated);\n  };\n\n  return (\n    <section className=\"p-4 bg-white rounded shadow-sm border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-medium\">Launch Context</h3>\n        <div className=\"space-x-2\">\n          <button\n            type=\"button\"\n            onClick={toggleEdit}\n            className=\"px-3 py-1 text-sm border rounded bg-gray-50 hover:bg-gray-100\"\n            aria-pressed={editing}\n          >\n            {editing ? 'Lock' : 'Edit'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n        <div>\n          <label className=\"block text-xs text-gray-600\" htmlFor={patientId}>Patient ID</label>\n          {editing ? (\n            <input\n              id={patientId}\n              value={local.patientId ?? ''}\n              onChange={handleField('patientId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Patient ID (Resource id)\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\" aria-labelledby={patientId}>{local.patientId ?? '\\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\" htmlFor={encounterId}>Encounter ID</label>\n          {editing ? (\n            <input\n              id={encounterId}\n              value={local.encounterId ?? ''}\n              onChange={handleField('encounterId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Encounter ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\" aria-labelledby={encounterId}>{local.encounterId ?? '\\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\" htmlFor={providerId}>Provider ID</label>\n          {editing ? (\n            <input\n              id={providerId}\n              value={local.providerId ?? ''}\n              onChange={handleField('providerId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Practitioner ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\" aria-labelledby={providerId}>{local.providerId ?? '\\u2014'}</div>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-xs text-gray-600\" htmlFor={clientId}>Client/App</label>\n          {editing ? (\n            <input\n              id={clientId}\n              value={local.appClientId ?? ''}\n              onChange={handleField('appClientId')}\n              className=\"w-full border rounded px-2 py-1\"\n              placeholder=\"Client ID\"\n            />\n          ) : (\n            <div className=\"mt-1 text-sm text-gray-800\" aria-labelledby={clientId}>{local.appClientId ?? '\\u2014'}</div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"mt-4\">\n        <h4 className=\"text-sm font-medium\">Patient Snapshot</h4>\n        {patient ? (\n          <div className=\"mt-2 text-sm\">\n            <div className=\"text-gray-700\">{formatPatientName(patient)}</div>\n            <div className=\"text-gray-500 text-xs\">DOB: {patient.birthDate ?? '\\u2014'}</div>\n            <div className=\"text-gray-500 text-xs\">Gender: {patient.gender ?? '\\u2014'}</div>\n          </div>\n        ) : (\n          <div className=\"mt-2 text-sm text-gray-500\">No patient loaded</div>\n        )}\n      </div>\n\n      <div className=\"mt-4 text-right\">\n        <small className=\"text-xs text-gray-400\">Raw launch params available in debug logs</small>\n      </div>\n    </section>\n  );\n};\n\nexport default LaunchContextPanel;\n",
      "reasoning": "Improves accessibility with linked labels, syncs local state when launchContext prop changes, and uses a shared name formatter for consistency. Adds button type and light border for clarity.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/PatientSelector.tsx",
      "search": "",
      "replace": "import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport type { Patient } from '../types/fhir';\nimport { formatPatientName } from '../types/fhir';\n\ninterface Props {\n  onSelect: (p: Patient) => void;\n  fhirBaseUrl?: string;\n  placeholder?: string;\n}\n\nexport const PatientSelector: React.FC<Props> = ({ onSelect, fhirBaseUrl, placeholder }) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<Patient[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const abortRef = useRef<AbortController | null>(null);\n\n  const baseUrl = useMemo(() => {\n    const envUrl = (import.meta as any)?.env?.VITE_FHIR_BASE_URL as string | undefined;\n    return fhirBaseUrl || envUrl || '/api/fhir';\n  }, [fhirBaseUrl]);\n\n  useEffect(() => {\n    if (!query || query.trim().length < 1) {\n      setResults([]);\n      setError(null);\n      if (abortRef.current) abortRef.current.abort();\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    if (abortRef.current) abortRef.current.abort();\n    const controller = new AbortController();\n    abortRef.current = controller;\n\n    const timeout = window.setTimeout(() => {\n      const url = `${baseUrl}/Patient?name=${encodeURIComponent(query)}&_count=20`;\n      fetch(url, { credentials: 'same-origin', signal: controller.signal })\n        .then(async res => {\n          if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);\n          return res.json();\n        })\n        .then(bundle => {\n          if (controller.signal.aborted) return;\n          const entries = Array.isArray(bundle?.entry) ? bundle.entry : [];\n          const patients = entries.map((e: any) => e.resource).filter(Boolean) as Patient[];\n          setResults(patients);\n        })\n        .catch(err => {\n          if (controller.signal.aborted) return;\n          setError(String(err));\n          setResults([]);\n        })\n        .finally(() => {\n          if (!controller.signal.aborted) setLoading(false);\n        });\n    }, 300);\n\n    return () => {\n      window.clearTimeout(timeout);\n      controller.abort();\n    };\n  }, [query, baseUrl]);\n\n  return (\n    <div className=\"p-3 bg-white rounded shadow-sm border border-gray-200\">\n      <label className=\"block text-xs text-gray-600\" htmlFor=\"patient-search-input\">Search patient</label>\n      <div className=\"flex items-center gap-2 mt-1\">\n        <input\n          id=\"patient-search-input\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder={placeholder ?? 'Search by family/given name'}\n          className=\"flex-1 border rounded px-2 py-1\"\n          aria-label=\"Search patient\"\n        />\n        {loading && <span className=\"text-sm text-gray-500\" aria-live=\"polite\">Searching\u2026</span>}\n      </div>\n\n      <div className=\"mt-2\" aria-live=\"polite\">\n        {error && <div className=\"text-red-600 text-sm\">{error}</div>}\n        {!error && results.length === 0 && query && !loading && (\n          <div className=\"text-sm text-gray-500\">No patients found</div>\n        )}\n\n        <ul className=\"mt-2 space-y-1\">\n          {results.map(p => {\n            const nameText = formatPatientName(p);\n            return (\n              <li key={p.id || nameText}>\n                <button\n                  type=\"button\"\n                  onClick={() => onSelect(p)}\n                  className=\"w-full text-left px-2 py-2 rounded hover:bg-gray-50 flex items-center justify-between\"\n                  aria-label={`Select patient ${nameText}`}\n                >\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-800\">{nameText}</div>\n                    <div className=\"text-xs text-gray-500\">DOB: {p.birthDate ?? '\\u2014'}</div>\n                  </div>\n                  <div className=\"text-xs text-gray-400\">{p.id}</div>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default PatientSelector;\n",
      "reasoning": "Adds AbortController to prevent race conditions with debounced fetch, environment-based base URL fallback, accessibility tweaks, and shared name formatting. Keeps behavior robust under rapid typing and navigation.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/ClinicalDecisionSupportPanel.tsx",
      "search": "",
      "replace": "import React, { useMemo, useState } from 'react';\nimport type { Patient } from '../types/fhir';\nimport { formatPatientName } from '../types/fhir';\n\ninterface Props {\n  patient?: Patient | null;\n  // Endpoint to request CDS suggestions; default assumed to be proxied\n  cdsEndpoint?: string;\n  // Optional: include more context if available\n  encounterId?: string;\n}\n\nexport const ClinicalDecisionSupportPanel: React.FC<Props> = ({ patient = null, cdsEndpoint, encounterId }) => {\n  const [loading, setLoading] = useState(false);\n  const [items, setItems] = useState<any[] | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const endpoint = useMemo(() => {\n    const envUrl = (import.meta as any)?.env?.VITE_CDS_ENDPOINT as string | undefined;\n    return cdsEndpoint || envUrl || '/api/cds';\n  }, [cdsEndpoint]);\n\n  const requestCds = async () => {\n    if (!patient?.id) {\n      setError('No patient selected');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setItems(null);\n    try {\n      const res = await fetch(endpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'same-origin',\n        body: JSON.stringify({ patientId: patient.id, encounterId }),\n      });\n      if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);\n      const data = await res.json();\n      // Expecting a simple list of suggestions; adapt to CDS Hooks structure if present\n      const suggestions = Array.isArray(data?.suggestions) ? data.suggestions : (Array.isArray(data) ? data : []);\n      setItems(suggestions);\n    } catch (err: any) {\n      setError(String(err?.message || err));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <section className=\"p-4 bg-white rounded shadow-sm border border-gray-200\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-lg font-medium\">Clinical Decision Support</h3>\n      </div>\n\n      <div className=\"text-sm text-gray-700\">\n        <div>Patient: {formatPatientName(patient || undefined) || '\\u2014'}</div>\n        <div className=\"text-xs text-gray-500\">ID: {patient?.id ?? '\\u2014'}</div>\n      </div>\n\n      <div className=\"mt-3\">\n        <button\n          type=\"button\"\n          onClick={requestCds}\n          disabled={loading || !patient?.id}\n          className=\"px-3 py-1 bg-blue-600 text-white rounded disabled:opacity-60\"\n        >\n          {loading ? 'Requesting\u2026' : 'Request CDS'}\n        </button>\n      </div>\n\n      <div className=\"mt-4\" aria-live=\"polite\">\n        {error && <div className=\"text-red-600 text-sm\">{error}</div>}\n        {!error && items && (\n          <div className=\"space-y-2\">\n            {items.length === 0 && <div className=\"text-sm text-gray-500\">No suggestions returned</div>}\n            {items.map((it: any, idx: number) => (\n              <div key={idx} className=\"border rounded p-2 bg-gray-50\">\n                <div className=\"text-sm font-medium\">{it.title ?? it.summary ?? 'Suggestion'}</div>\n                <div className=\"text-xs text-gray-600\">{it.detail ?? (typeof it === 'string' ? it : JSON.stringify(it))}</div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default ClinicalDecisionSupportPanel;\n",
      "reasoning": "Adds env-based endpoint fallback, includes optional encounterId, improves accessibility, and handles varied payloads gracefully while keeping the UI minimal.",
      "confidence": "high"
    },
    {
      "action": "create",
      "file": "ui/src/components/index.ts",
      "search": "",
      "replace": "export { default as LaunchContextPanel } from './LaunchContextPanel';\nexport { default as PatientSelector } from './PatientSelector';\nexport { default as ClinicalDecisionSupportPanel } from './ClinicalDecisionSupportPanel';\nexport * from './LaunchContextPanel';\nexport * from './PatientSelector';\nexport * from './ClinicalDecisionSupportPanel';\n",
      "reasoning": "Keeps barrel exports flexible by providing both default and named exports, improving DX and consistency across imports.",
      "confidence": "high"
    }
  ]
}
