#!/usr/bin/env bun
/**
 * Sanitize OpenAPI spec generated by Elysia
 * 
 * Fixes issue where Elysia generates incomplete schema references:
 * - Changes: "$ref": "Response" 
 * - To: "$ref": "#/components/schemas/Response"
 * 
 * Also removes references to undefined schemas if the schema doesn't exist.
 */

import { readFileSync, writeFileSync } from 'fs'
import { resolve } from 'path'

const OPENAPI_PATH = resolve(import.meta.dir, '../dist/openapi.json')

console.log('ðŸ”§ Sanitizing OpenAPI spec...')

// Read the OpenAPI spec
const content = readFileSync(OPENAPI_PATH, 'utf-8')
const spec = JSON.parse(content)

let changeCount = 0

// Function to recursively fix $ref in an object
function fixRefs(obj: any): void {
  if (!obj || typeof obj !== 'object') return

  for (const key in obj) {
    if (key === '$ref' && typeof obj[key] === 'string') {
      const ref = obj[key]
      
      // Fix incomplete references that don't start with #
      if (!ref.startsWith('#') && !ref.startsWith('http')) {
        // Check if this schema exists in components
        const schemaName = ref
        const schemaExists = spec.components?.schemas?.[schemaName]
        
        if (schemaExists) {
          // Fix the reference to use proper JSON Pointer
          obj[key] = `#/components/schemas/${ref}`
          changeCount++
          console.log(`  âœ“ Fixed incomplete reference: "${ref}" -> "#/components/schemas/${ref}"`)
        } else {
          // For redirect responses (like /authorize, /login, /logout), remove the response
          // since redirects don't have a JSON body
          console.log(`  âš  Warning: Schema "${ref}" doesn't exist, will remove response schema`)
          // Return a marker so parent can remove this
          obj._removeMe = true
          changeCount++
        }
      }
    } else if (typeof obj[key] === 'object') {
      fixRefs(obj[key])
      
      // Clean up marked objects
      if (obj[key]?._removeMe) {
        // For redirect endpoints, remove the entire content/application/json section
        if (key === 'schema') {
          delete obj[key]
        }
      }
    }
  }
}

// Fix all references in the spec
fixRefs(spec)

// Clean up responses with empty content for redirect endpoints
function cleanupEmptyResponses(obj: any): void {
  if (!obj || typeof obj !== 'object') return

  for (const key in obj) {
    if (key === 'responses' && typeof obj[key] === 'object') {
      for (const statusCode in obj[key]) {
        const response = obj[key][statusCode]
        if (response.content?.['application/json'] && !response.content['application/json'].schema) {
          // Remove empty content
          delete response.content
          response.description = response.description || 'Redirect response'
          console.log(`  âœ“ Removed empty content from response ${statusCode}`)
          changeCount++
        }
      }
    }
    
    if (typeof obj[key] === 'object') {
      cleanupEmptyResponses(obj[key])
    }
  }
}

cleanupEmptyResponses(spec)

// Write the sanitized spec back
if (changeCount > 0) {
  writeFileSync(OPENAPI_PATH, JSON.stringify(spec, null, 2))
  console.log(`âœ… Sanitized OpenAPI spec: ${changeCount} changes made`)
} else {
  console.log('âœ… OpenAPI spec is already valid, no changes needed')
}
