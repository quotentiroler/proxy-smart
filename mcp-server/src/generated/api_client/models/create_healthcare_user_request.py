# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from api_client.models.fhir_person_association import FhirPersonAssociation
from typing import Optional, Set
from typing_extensions import Self

class CreateHealthcareUserRequest(BaseModel):
    """
    CreateHealthcareUserRequest
    """ # noqa: E501
    username: StrictStr = Field(description="Username (must be unique)")
    email: StrictStr = Field(description="Email address")
    first_name: StrictStr = Field(description="First name", alias="firstName")
    last_name: StrictStr = Field(description="Last name", alias="lastName")
    organization: Optional[StrictStr] = Field(default=None, description="Organization identifier")
    fhir_persons: Optional[List[FhirPersonAssociation]] = Field(default=None, description="FHIR Person associations to create", alias="fhirPersons")
    password: Optional[StrictStr] = Field(default=None, description="User password")
    temporary_password: Optional[StrictBool] = Field(default=None, description="Whether password is temporary and must be changed", alias="temporaryPassword")
    realm_roles: Optional[List[StrictStr]] = Field(default=None, description="Realm-level roles to assign", alias="realmRoles")
    client_roles: Optional[Dict[str, Any]] = Field(default=None, alias="clientRoles")
    enabled: Optional[StrictBool] = Field(default=True, description="Whether the user is enabled")
    email_verified: Optional[StrictBool] = Field(default=None, description="Whether the email is verified", alias="emailVerified")
    npi: Optional[StrictStr] = Field(default=None, description="National Provider Identifier (NPI) for healthcare providers")
    practitioner_id: Optional[StrictStr] = Field(default=None, description="FHIR Practitioner resource ID", alias="practitionerId")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["username", "email", "firstName", "lastName", "organization", "fhirPersons", "password", "temporaryPassword", "realmRoles", "clientRoles", "enabled", "emailVerified", "npi", "practitionerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateHealthcareUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fhir_persons (list)
        _items = []
        if self.fhir_persons:
            for _item_fhir_persons in self.fhir_persons:
                if _item_fhir_persons:
                    _items.append(_item_fhir_persons.to_dict())
            _dict['fhirPersons'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateHealthcareUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "organization": obj.get("organization"),
            "fhirPersons": [FhirPersonAssociation.from_dict(_item) for _item in obj["fhirPersons"]] if obj.get("fhirPersons") is not None else None,
            "password": obj.get("password"),
            "temporaryPassword": obj.get("temporaryPassword"),
            "realmRoles": obj.get("realmRoles"),
            "clientRoles": obj.get("clientRoles"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "emailVerified": obj.get("emailVerified"),
            "npi": obj.get("npi"),
            "practitionerId": obj.get("practitionerId")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


