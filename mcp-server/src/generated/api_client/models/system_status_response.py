# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510170045.f4d64f5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from api_client.models.system_status_response_fhir import SystemStatusResponseFhir
from api_client.models.system_status_response_keycloak import SystemStatusResponseKeycloak
from api_client.models.system_status_response_memory import SystemStatusResponseMemory
from typing import Optional, Set
from typing_extensions import Self

class SystemStatusResponse(BaseModel):
    """
    SystemStatusResponse
    """ # noqa: E501
    version: StrictStr = Field(description="API version")
    timestamp: StrictStr = Field(description="Timestamp (ISO 8601)")
    uptime: Union[StrictFloat, StrictInt] = Field(description="Server uptime in milliseconds")
    overall: StrictStr = Field(description="Overall system status")
    fhir: SystemStatusResponseFhir
    keycloak: SystemStatusResponseKeycloak
    memory: SystemStatusResponseMemory
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["version", "timestamp", "uptime", "overall", "fhir", "keycloak", "memory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fhir
        if self.fhir:
            _dict['fhir'] = self.fhir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of keycloak
        if self.keycloak:
            _dict['keycloak'] = self.keycloak.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "timestamp": obj.get("timestamp"),
            "uptime": obj.get("uptime"),
            "overall": obj.get("overall"),
            "fhir": SystemStatusResponseFhir.from_dict(obj["fhir"]) if obj.get("fhir") is not None else None,
            "keycloak": SystemStatusResponseKeycloak.from_dict(obj["keycloak"]) if obj.get("keycloak") is not None else None,
            "memory": SystemStatusResponseMemory.from_dict(obj["memory"]) if obj.get("memory") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


