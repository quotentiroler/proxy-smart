# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ClientRegistrationResponse(BaseModel):
    """
    ClientRegistrationResponse
    """ # noqa: E501
    client_id: StrictStr = Field(description="OAuth2 client ID")
    client_id_issued_at: Union[StrictFloat, StrictInt] = Field(description="Client ID issuance timestamp (Unix time)")
    redirect_uris: List[StrictStr] = Field(description="Registered redirect URIs")
    grant_types: List[StrictStr] = Field(description="Allowed grant types")
    response_types: List[StrictStr] = Field(description="Allowed response types")
    token_endpoint_auth_method: StrictStr = Field(description="Token endpoint authentication method")
    client_secret: Optional[StrictStr] = Field(default=None, description="OAuth2 client secret (for confidential clients)")
    client_secret_expires_at: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Client secret expiration timestamp (0 = never expires)")
    client_name: Optional[StrictStr] = Field(default=None, description="Human-readable client name")
    client_uri: Optional[StrictStr] = Field(default=None, description="Client home page URL")
    logo_uri: Optional[StrictStr] = Field(default=None, description="Client logo URL")
    scope: Optional[StrictStr] = Field(default=None, description="Granted scopes (space-separated)")
    contacts: Optional[List[StrictStr]] = Field(default=None, description="Contact email addresses")
    tos_uri: Optional[StrictStr] = Field(default=None, description="Terms of service URL")
    policy_uri: Optional[StrictStr] = Field(default=None, description="Privacy policy URL")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="JWKS endpoint URL")
    jwks: Optional[Dict[str, Any]] = Field(default=None, description="JSON Web Key Set")
    fhir_versions: Optional[List[StrictStr]] = Field(default=None, description="Supported FHIR versions")
    launch_uris: Optional[List[StrictStr]] = Field(default=None, description="EHR launch URLs")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["client_id", "client_id_issued_at", "redirect_uris", "grant_types", "response_types", "token_endpoint_auth_method", "client_secret", "client_secret_expires_at", "client_name", "client_uri", "logo_uri", "scope", "contacts", "tos_uri", "policy_uri", "jwks_uri", "jwks", "fhir_versions", "launch_uris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientRegistrationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientRegistrationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "client_id_issued_at": obj.get("client_id_issued_at"),
            "redirect_uris": obj.get("redirect_uris"),
            "grant_types": obj.get("grant_types"),
            "response_types": obj.get("response_types"),
            "token_endpoint_auth_method": obj.get("token_endpoint_auth_method"),
            "client_secret": obj.get("client_secret"),
            "client_secret_expires_at": obj.get("client_secret_expires_at"),
            "client_name": obj.get("client_name"),
            "client_uri": obj.get("client_uri"),
            "logo_uri": obj.get("logo_uri"),
            "scope": obj.get("scope"),
            "contacts": obj.get("contacts"),
            "tos_uri": obj.get("tos_uri"),
            "policy_uri": obj.get("policy_uri"),
            "jwks_uri": obj.get("jwks_uri"),
            "jwks": obj.get("jwks"),
            "fhir_versions": obj.get("fhir_versions"),
            "launch_uris": obj.get("launch_uris")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


