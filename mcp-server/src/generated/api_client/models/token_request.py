# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510170045.f4d64f5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TokenRequest(BaseModel):
    """
    TokenRequest
    """ # noqa: E501
    grant_type: StrictStr = Field(description="OAuth2 grant type (authorization_code, refresh_token, client_credentials, password)")
    code: Optional[StrictStr] = Field(default=None, description="Authorization code (for authorization_code grant)")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="Redirect URI used in authorization request")
    client_id: Optional[StrictStr] = Field(default=None, description="OAuth2 client ID")
    client_secret: Optional[StrictStr] = Field(default=None, description="OAuth2 client secret")
    code_verifier: Optional[StrictStr] = Field(default=None, description="PKCE code verifier")
    refresh_token: Optional[StrictStr] = Field(default=None, description="Refresh token (for refresh_token grant)")
    scope: Optional[StrictStr] = Field(default=None, description="Requested scopes (space-separated)")
    audience: Optional[StrictStr] = Field(default=None, description="Target audience for the token")
    username: Optional[StrictStr] = Field(default=None, description="Username (for password grant)")
    password: Optional[StrictStr] = Field(default=None, description="Password (for password grant)")
    client_assertion_type: Optional[StrictStr] = Field(default=None, description="Client assertion type for JWT authentication")
    client_assertion: Optional[StrictStr] = Field(default=None, description="Client assertion JWT for authentication")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["grant_type", "code", "redirect_uri", "client_id", "client_secret", "code_verifier", "refresh_token", "scope", "audience", "username", "password", "client_assertion_type", "client_assertion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "grant_type": obj.get("grant_type"),
            "code": obj.get("code"),
            "redirect_uri": obj.get("redirect_uri"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "code_verifier": obj.get("code_verifier"),
            "refresh_token": obj.get("refresh_token"),
            "scope": obj.get("scope"),
            "audience": obj.get("audience"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "client_assertion_type": obj.get("client_assertion_type"),
            "client_assertion": obj.get("client_assertion")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


