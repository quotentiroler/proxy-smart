# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510170045.f4d64f5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ClientRegistrationSettings(BaseModel):
    """
    ClientRegistrationSettings
    """ # noqa: E501
    enabled: StrictBool = Field(description="Whether dynamic client registration is enabled")
    require_https: StrictBool = Field(description="Whether HTTPS is required for redirect URIs", alias="requireHttps")
    allowed_scopes: List[StrictStr] = Field(alias="allowedScopes")
    max_client_lifetime: Union[StrictFloat, StrictInt] = Field(description="Maximum client lifetime in days (0 = no limit)", alias="maxClientLifetime")
    require_terms_of_service: StrictBool = Field(description="Whether terms of service URI is required", alias="requireTermsOfService")
    require_privacy_policy: StrictBool = Field(description="Whether privacy policy URI is required", alias="requirePrivacyPolicy")
    allow_public_clients: StrictBool = Field(description="Whether public clients are allowed", alias="allowPublicClients")
    allow_confidential_clients: StrictBool = Field(description="Whether confidential clients are allowed", alias="allowConfidentialClients")
    allow_backend_services: StrictBool = Field(description="Whether backend service clients are allowed", alias="allowBackendServices")
    admin_approval_required: StrictBool = Field(description="Whether admin approval is required for new registrations", alias="adminApprovalRequired")
    rate_limit_per_minute: Union[StrictFloat, StrictInt] = Field(description="Rate limit for registration requests per minute", alias="rateLimitPerMinute")
    max_redirect_uris: Union[StrictFloat, StrictInt] = Field(description="Maximum number of redirect URIs allowed per client", alias="maxRedirectUris")
    allowed_redirect_uri_patterns: List[StrictStr] = Field(alias="allowedRedirectUriPatterns")
    notification_email: Optional[StrictStr] = Field(default=None, description="Email to notify of new registrations", alias="notificationEmail")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["enabled", "requireHttps", "allowedScopes", "maxClientLifetime", "requireTermsOfService", "requirePrivacyPolicy", "allowPublicClients", "allowConfidentialClients", "allowBackendServices", "adminApprovalRequired", "rateLimitPerMinute", "maxRedirectUris", "allowedRedirectUriPatterns", "notificationEmail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientRegistrationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientRegistrationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "requireHttps": obj.get("requireHttps"),
            "allowedScopes": obj.get("allowedScopes"),
            "maxClientLifetime": obj.get("maxClientLifetime"),
            "requireTermsOfService": obj.get("requireTermsOfService"),
            "requirePrivacyPolicy": obj.get("requirePrivacyPolicy"),
            "allowPublicClients": obj.get("allowPublicClients"),
            "allowConfidentialClients": obj.get("allowConfidentialClients"),
            "allowBackendServices": obj.get("allowBackendServices"),
            "adminApprovalRequired": obj.get("adminApprovalRequired"),
            "rateLimitPerMinute": obj.get("rateLimitPerMinute"),
            "maxRedirectUris": obj.get("maxRedirectUris"),
            "allowedRedirectUriPatterns": obj.get("allowedRedirectUriPatterns"),
            "notificationEmail": obj.get("notificationEmail")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


