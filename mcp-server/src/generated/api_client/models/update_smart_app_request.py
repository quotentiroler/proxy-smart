# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-RELEASE.202510170109.139bb12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSmartAppRequest(BaseModel):
    """
    UpdateSmartAppRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Application name")
    description: Optional[StrictStr] = Field(default=None, description="Application description")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the app is enabled")
    public_client: Optional[StrictBool] = Field(default=None, description="Whether this is a public client", alias="publicClient")
    redirect_uris: Optional[List[StrictStr]] = Field(default=None, description="Allowed redirect URIs", alias="redirectUris")
    web_origins: Optional[List[StrictStr]] = Field(default=None, description="Allowed web origins", alias="webOrigins")
    default_client_scopes: Optional[List[StrictStr]] = Field(default=None, description="Default SMART scopes", alias="defaultClientScopes")
    optional_client_scopes: Optional[List[StrictStr]] = Field(default=None, description="Optional SMART scopes", alias="optionalClientScopes")
    smart_version: Optional[StrictStr] = Field(default=None, description="SMART App Launch version", alias="smartVersion")
    fhir_version: Optional[StrictStr] = Field(default=None, description="FHIR version", alias="fhirVersion")
    app_type: Optional[StrictStr] = Field(default=None, alias="appType")
    client_type: Optional[StrictStr] = Field(default=None, alias="clientType")
    secret: Optional[StrictStr] = Field(default=None, description="Client secret for symmetric authentication (only for confidential clients)")
    public_key: Optional[StrictStr] = Field(default=None, description="Public key for JWT authentication (PEM format)", alias="publicKey")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="JWKS URI for JWT authentication", alias="jwksUri")
    system_scopes: Optional[List[StrictStr]] = Field(default=None, description="System-level scopes for backend services", alias="systemScopes")
    launch_url: Optional[StrictStr] = Field(default=None, description="SMART App launch URL", alias="launchUrl")
    logo_uri: Optional[StrictStr] = Field(default=None, description="Logo URI for application display", alias="logoUri")
    tos_uri: Optional[StrictStr] = Field(default=None, description="Terms of Service URI", alias="tosUri")
    policy_uri: Optional[StrictStr] = Field(default=None, description="Privacy Policy URI", alias="policyUri")
    contacts: Optional[List[StrictStr]] = Field(default=None, description="Contact emails or names")
    server_access_type: Optional[StrictStr] = Field(default=None, alias="serverAccessType")
    allowed_server_ids: Optional[List[StrictStr]] = Field(default=None, description="List of allowed FHIR server IDs", alias="allowedServerIds")
    scope_set_id: Optional[StrictStr] = Field(default=None, description="Reference to a predefined scope set configuration", alias="scopeSetId")
    require_pkce: Optional[StrictBool] = Field(default=None, description="Require PKCE for public clients", alias="requirePkce")
    allow_offline_access: Optional[StrictBool] = Field(default=None, description="Allow offline access (refresh tokens)", alias="allowOfflineAccess")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["name", "description", "enabled", "publicClient", "redirectUris", "webOrigins", "defaultClientScopes", "optionalClientScopes", "smartVersion", "fhirVersion", "appType", "clientType", "secret", "publicKey", "jwksUri", "systemScopes", "launchUrl", "logoUri", "tosUri", "policyUri", "contacts", "serverAccessType", "allowedServerIds", "scopeSetId", "requirePkce", "allowOfflineAccess"]

    @field_validator('app_type')
    def app_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['standalone-app', 'ehr-launch', 'backend-service', 'agent']):
            raise ValueError("must be one of enum values ('standalone-app', 'ehr-launch', 'backend-service', 'agent')")
        return value

    @field_validator('client_type')
    def client_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['public', 'confidential', 'backend-service']):
            raise ValueError("must be one of enum values ('public', 'confidential', 'backend-service')")
        return value

    @field_validator('server_access_type')
    def server_access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all-servers', 'selected-servers', 'user-person-servers']):
            raise ValueError("must be one of enum values ('all-servers', 'selected-servers', 'user-person-servers')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSmartAppRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSmartAppRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "publicClient": obj.get("publicClient"),
            "redirectUris": obj.get("redirectUris"),
            "webOrigins": obj.get("webOrigins"),
            "defaultClientScopes": obj.get("defaultClientScopes"),
            "optionalClientScopes": obj.get("optionalClientScopes"),
            "smartVersion": obj.get("smartVersion"),
            "fhirVersion": obj.get("fhirVersion"),
            "appType": obj.get("appType"),
            "clientType": obj.get("clientType"),
            "secret": obj.get("secret"),
            "publicKey": obj.get("publicKey"),
            "jwksUri": obj.get("jwksUri"),
            "systemScopes": obj.get("systemScopes"),
            "launchUrl": obj.get("launchUrl"),
            "logoUri": obj.get("logoUri"),
            "tosUri": obj.get("tosUri"),
            "policyUri": obj.get("policyUri"),
            "contacts": obj.get("contacts"),
            "serverAccessType": obj.get("serverAccessType"),
            "allowedServerIds": obj.get("allowedServerIds"),
            "scopeSetId": obj.get("scopeSetId"),
            "requirePkce": obj.get("requirePkce"),
            "allowOfflineAccess": obj.get("allowOfflineAccess")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


