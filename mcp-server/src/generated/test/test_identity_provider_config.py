# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510170045.f4d64f5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.identity_provider_config import IdentityProviderConfig

class TestIdentityProviderConfig(unittest.TestCase):
    """IdentityProviderConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IdentityProviderConfig:
        """Test IdentityProviderConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IdentityProviderConfig`
        """
        model = IdentityProviderConfig()
        if include_optional:
            return IdentityProviderConfig(
                display_name = '',
                enabled = True,
                client_secret = '',
                token_url = '',
                user_info_url = '',
                issuer = '',
                default_scopes = '',
                logout_url = '',
                entity_id = '',
                single_sign_on_service_url = '',
                single_logout_service_url = '',
                metadata_descriptor_url = '',
                signature_algorithm = '',
                name_id_policy_format = '',
                signing_certificate = '',
                validate_signature = True,
                want_authn_requests_signed = True,
                additional_config = None
            )
        else:
            return IdentityProviderConfig(
        )
        """

    def testIdentityProviderConfig(self):
        """Test IdentityProviderConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
