# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.get_auth_config200_response import GetAuthConfig200Response

class TestGetAuthConfig200Response(unittest.TestCase):
    """GetAuthConfig200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAuthConfig200Response:
        """Test GetAuthConfig200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAuthConfig200Response`
        """
        model = GetAuthConfig200Response()
        if include_optional:
            return GetAuthConfig200Response(
                keycloak = api_client.models.get_auth_config_200_response_keycloak.getAuthConfig_200_response_keycloak(
                    is_configured = True, 
                    base_url = '', 
                    realm = '', 
                    authorization_endpoint = '', 
                    token_endpoint = '', )
            )
        else:
            return GetAuthConfig200Response(
                keycloak = api_client.models.get_auth_config_200_response_keycloak.getAuthConfig_200_response_keycloak(
                    is_configured = True, 
                    base_url = '', 
                    realm = '', 
                    authorization_endpoint = '', 
                    token_endpoint = '', ),
        )
        """

    def testGetAuthConfig200Response(self):
        """Test GetAuthConfig200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
