# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.get_status200_response import GetStatus200Response

class TestGetStatus200Response(unittest.TestCase):
    """GetStatus200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetStatus200Response:
        """Test GetStatus200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetStatus200Response`
        """
        model = GetStatus200Response()
        if include_optional:
            return GetStatus200Response(
                version = '',
                timestamp = '',
                uptime = 1.337,
                overall = '',
                fhir = api_client.models.get_status_200_response_fhir.getStatus_200_response_fhir(
                    status = '', 
                    total_servers = 1.337, 
                    healthy_servers = 1.337, 
                    servers = [
                        api_client.models.get_status_200_response_fhir_servers_inner.getStatus_200_response_fhir_servers_inner(
                            name = '', 
                            url = '', 
                            status = '', 
                            accessible = True, 
                            version = '', 
                            server_name = '', 
                            server_version = '', 
                            error = '', )
                        ], ),
                keycloak = api_client.models.get_status_200_response_keycloak.getStatus_200_response_keycloak(
                    status = '', 
                    accessible = True, 
                    realm = '', 
                    last_connected = '', ),
                memory = api_client.models.get_status_200_response_memory.getStatus_200_response_memory(
                    used = 1.337, 
                    total = 1.337, )
            )
        else:
            return GetStatus200Response(
                version = '',
                timestamp = '',
                uptime = 1.337,
                overall = '',
                fhir = api_client.models.get_status_200_response_fhir.getStatus_200_response_fhir(
                    status = '', 
                    total_servers = 1.337, 
                    healthy_servers = 1.337, 
                    servers = [
                        api_client.models.get_status_200_response_fhir_servers_inner.getStatus_200_response_fhir_servers_inner(
                            name = '', 
                            url = '', 
                            status = '', 
                            accessible = True, 
                            version = '', 
                            server_name = '', 
                            server_version = '', 
                            error = '', )
                        ], ),
                keycloak = api_client.models.get_status_200_response_keycloak.getStatus_200_response_keycloak(
                    status = '', 
                    accessible = True, 
                    realm = '', 
                    last_connected = '', ),
                memory = api_client.models.get_status_200_response_memory.getStatus_200_response_memory(
                    used = 1.337, 
                    total = 1.337, ),
        )
        """

    def testGetStatus200Response(self):
        """Test GetStatus200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
