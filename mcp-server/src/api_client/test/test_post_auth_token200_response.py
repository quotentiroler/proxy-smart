# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.post_auth_token200_response import PostAuthToken200Response

class TestPostAuthToken200Response(unittest.TestCase):
    """PostAuthToken200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostAuthToken200Response:
        """Test PostAuthToken200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostAuthToken200Response`
        """
        model = PostAuthToken200Response()
        if include_optional:
            return PostAuthToken200Response(
                access_token = '',
                token_type = '',
                expires_in = 1.337,
                refresh_token = '',
                refresh_expires_in = 1.337,
                id_token = '',
                scope = '',
                session_state = '',
                not_before_policy = 1.337,
                patient = '',
                encounter = '',
                fhir_user = '',
                fhir_context = [
                    api_client.models.post_auth_token_200_response_fhir_context_inner.postAuthToken_200_response_fhirContext_inner(
                        reference = '', 
                        canonical = '', 
                        identifier = api_client.models.identifier.identifier(), 
                        type = '', 
                        role = '', )
                    ],
                intent = '',
                smart_style_url = '',
                tenant = '',
                need_patient_banner = True,
                authorization_details = [
                    api_client.models.post_auth_token_200_response_authorization_details_inner.postAuthToken_200_response_authorization_details_inner(
                        type = '', 
                        locations = [
                            ''
                            ], 
                        fhir_versions = [
                            ''
                            ], 
                        scope = '', 
                        patient = '', 
                        encounter = '', 
                        fhir_context = [
                            api_client.models.post_auth_token_200_response_fhir_context_inner.postAuthToken_200_response_fhirContext_inner(
                                reference = '', 
                                canonical = '', 
                                identifier = api_client.models.identifier.identifier(), 
                                type = '', 
                                role = '', )
                            ], )
                    ],
                error = '',
                error_description = ''
            )
        else:
            return PostAuthToken200Response(
        )
        """

    def testPostAuthToken200Response(self):
        """Test PostAuthToken200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
