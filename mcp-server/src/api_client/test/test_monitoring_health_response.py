# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.monitoring_health_response import MonitoringHealthResponse

class TestMonitoringHealthResponse(unittest.TestCase):
    """MonitoringHealthResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MonitoringHealthResponse:
        """Test MonitoringHealthResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MonitoringHealthResponse`
        """
        model = MonitoringHealthResponse()
        if include_optional:
            return MonitoringHealthResponse(
                oauth_server = api_client.models.monitoring_health_response_oauth_server.MonitoringHealthResponse_oauthServer(
                    status = '', 
                    uptime = 1.337, 
                    response_time = 1.337, ),
                token_store = api_client.models.monitoring_health_response_token_store.MonitoringHealthResponse_tokenStore(
                    status = '', 
                    active_tokens = 1.337, 
                    storage_used = 1.337, ),
                network = api_client.models.monitoring_health_response_network.MonitoringHealthResponse_network(
                    status = '', 
                    throughput = '', 
                    error_rate = 1.337, ),
                alerts = [
                    api_client.models.alert_info.AlertInfo(
                        type = '', 
                        message = '', )
                    ],
                timestamp = ''
            )
        else:
            return MonitoringHealthResponse(
                oauth_server = api_client.models.monitoring_health_response_oauth_server.MonitoringHealthResponse_oauthServer(
                    status = '', 
                    uptime = 1.337, 
                    response_time = 1.337, ),
                token_store = api_client.models.monitoring_health_response_token_store.MonitoringHealthResponse_tokenStore(
                    status = '', 
                    active_tokens = 1.337, 
                    storage_used = 1.337, ),
                network = api_client.models.monitoring_health_response_network.MonitoringHealthResponse_network(
                    status = '', 
                    throughput = '', 
                    error_rate = 1.337, ),
                alerts = [
                    api_client.models.alert_info.AlertInfo(
                        type = '', 
                        message = '', )
                    ],
                timestamp = '',
        )
        """

    def testMonitoringHealthResponse(self):
        """Test MonitoringHealthResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
