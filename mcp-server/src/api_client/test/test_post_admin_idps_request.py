# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.post_admin_idps_request import PostAdminIdpsRequest

class TestPostAdminIdpsRequest(unittest.TestCase):
    """PostAdminIdpsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostAdminIdpsRequest:
        """Test PostAdminIdpsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostAdminIdpsRequest`
        """
        model = PostAdminIdpsRequest()
        if include_optional:
            return PostAdminIdpsRequest(
                alias = '',
                provider_id = '',
                display_name = '',
                enabled = True,
                config = api_client.models.post_admin_idps_request_config.postAdminIdps_request_config(
                    display_name = '', 
                    entity_id = '', 
                    single_sign_on_service_url = '', 
                    single_logout_service_url = '', 
                    metadata_descriptor_url = '', 
                    enabled = True, 
                    client_secret = '', 
                    token_url = '', 
                    user_info_url = '', 
                    issuer = '', 
                    default_scopes = '', 
                    logout_url = '', 
                    signature_algorithm = '', 
                    name_id_policy_format = '', 
                    signing_certificate = '', 
                    validate_signature = True, 
                    want_authn_requests_signed = True, 
                    additional_config = api_client.models.additional_config.additionalConfig(), )
            )
        else:
            return PostAdminIdpsRequest(
                alias = '',
                provider_id = '',
                config = api_client.models.post_admin_idps_request_config.postAdminIdps_request_config(
                    display_name = '', 
                    entity_id = '', 
                    single_sign_on_service_url = '', 
                    single_logout_service_url = '', 
                    metadata_descriptor_url = '', 
                    enabled = True, 
                    client_secret = '', 
                    token_url = '', 
                    user_info_url = '', 
                    issuer = '', 
                    default_scopes = '', 
                    logout_url = '', 
                    signature_algorithm = '', 
                    name_id_policy_format = '', 
                    signing_certificate = '', 
                    validate_signature = True, 
                    want_authn_requests_signed = True, 
                    additional_config = api_client.models.additional_config.additionalConfig(), ),
        )
        """

    def testPostAdminIdpsRequest(self):
        """Test PostAdminIdpsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
