# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.get_admin_smart_apps200_response_inner import GetAdminSmartApps200ResponseInner

class TestGetAdminSmartApps200ResponseInner(unittest.TestCase):
    """GetAdminSmartApps200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetAdminSmartApps200ResponseInner:
        """Test GetAdminSmartApps200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetAdminSmartApps200ResponseInner`
        """
        model = GetAdminSmartApps200ResponseInner()
        if include_optional:
            return GetAdminSmartApps200ResponseInner(
                id = '',
                client_id = '',
                name = '',
                description = '',
                enabled = True,
                protocol = '',
                public_client = True,
                redirect_uris = [
                    ''
                    ],
                web_origins = [
                    ''
                    ],
                attributes = None,
                client_authenticator_type = '',
                service_accounts_enabled = True,
                standard_flow_enabled = True,
                implicit_flow_enabled = True,
                direct_access_grants_enabled = True,
                default_client_scopes = [
                    ''
                    ],
                optional_client_scopes = [
                    ''
                    ],
                access = None
            )
        else:
            return GetAdminSmartApps200ResponseInner(
        )
        """

    def testGetAdminSmartApps200ResponseInner(self):
        """Test GetAdminSmartApps200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
