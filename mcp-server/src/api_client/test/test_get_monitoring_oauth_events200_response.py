# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.get_monitoring_oauth_events200_response import GetMonitoringOauthEvents200Response

class TestGetMonitoringOauthEvents200Response(unittest.TestCase):
    """GetMonitoringOauthEvents200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetMonitoringOauthEvents200Response:
        """Test GetMonitoringOauthEvents200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetMonitoringOauthEvents200Response`
        """
        model = GetMonitoringOauthEvents200Response()
        if include_optional:
            return GetMonitoringOauthEvents200Response(
                events = [
                    api_client.models.get_monitoring_oauth_events_200_response_events_inner.getMonitoringOauthEvents_200_response_events_inner(
                        id = '', 
                        timestamp = '', 
                        type = '', 
                        status = '', 
                        client_id = '', 
                        client_name = '', 
                        user_id = '', 
                        user_name = '', 
                        scopes = [
                            ''
                            ], 
                        grant_type = '', 
                        response_time = 1.337, 
                        ip_address = '', 
                        user_agent = '', 
                        error_message = '', 
                        error_code = '', 
                        token_type = '', 
                        expires_in = 1.337, 
                        refresh_token = True, 
                        fhir_context = api_client.models.get_monitoring_oauth_events_200_response_events_inner_fhir_context.getMonitoringOauthEvents_200_response_events_inner_fhirContext(
                            patient = '', 
                            encounter = '', 
                            location = '', 
                            fhir_user = '', ), )
                    ],
                total = 1.337,
                timestamp = ''
            )
        else:
            return GetMonitoringOauthEvents200Response(
                events = [
                    api_client.models.get_monitoring_oauth_events_200_response_events_inner.getMonitoringOauthEvents_200_response_events_inner(
                        id = '', 
                        timestamp = '', 
                        type = '', 
                        status = '', 
                        client_id = '', 
                        client_name = '', 
                        user_id = '', 
                        user_name = '', 
                        scopes = [
                            ''
                            ], 
                        grant_type = '', 
                        response_time = 1.337, 
                        ip_address = '', 
                        user_agent = '', 
                        error_message = '', 
                        error_code = '', 
                        token_type = '', 
                        expires_in = 1.337, 
                        refresh_token = True, 
                        fhir_context = api_client.models.get_monitoring_oauth_events_200_response_events_inner_fhir_context.getMonitoringOauthEvents_200_response_events_inner_fhirContext(
                            patient = '', 
                            encounter = '', 
                            location = '', 
                            fhir_user = '', ), )
                    ],
                total = 1.337,
                timestamp = '',
        )
        """

    def testGetMonitoringOauthEvents200Response(self):
        """Test GetMonitoringOauthEvents200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
