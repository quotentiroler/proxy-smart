# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.o_auth_analytics_response import OAuthAnalyticsResponse

class TestOAuthAnalyticsResponse(unittest.TestCase):
    """OAuthAnalyticsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OAuthAnalyticsResponse:
        """Test OAuthAnalyticsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OAuthAnalyticsResponse`
        """
        model = OAuthAnalyticsResponse()
        if include_optional:
            return OAuthAnalyticsResponse(
                total_requests = 1.337,
                successful_requests = 1.337,
                failed_requests = 1.337,
                success_rate = 1.337,
                average_response_time = 1.337,
                active_tokens = 1.337,
                top_clients = [
                    api_client.models.o_auth_analytics_top_client.OAuthAnalyticsTopClient(
                        client_id = '', 
                        client_name = '', 
                        count = 1.337, 
                        success_rate = 1.337, )
                    ],
                flows_by_type = None,
                errors_by_type = None,
                hourly_stats = [
                    api_client.models.o_auth_analytics_hourly_stats.OAuthAnalyticsHourlyStats(
                        hour = '', 
                        success = 1.337, 
                        error = 1.337, 
                        total = 1.337, )
                    ],
                timestamp = ''
            )
        else:
            return OAuthAnalyticsResponse(
                total_requests = 1.337,
                successful_requests = 1.337,
                failed_requests = 1.337,
                success_rate = 1.337,
                average_response_time = 1.337,
                active_tokens = 1.337,
                top_clients = [
                    api_client.models.o_auth_analytics_top_client.OAuthAnalyticsTopClient(
                        client_id = '', 
                        client_name = '', 
                        count = 1.337, 
                        success_rate = 1.337, )
                    ],
                flows_by_type = None,
                errors_by_type = None,
                hourly_stats = [
                    api_client.models.o_auth_analytics_hourly_stats.OAuthAnalyticsHourlyStats(
                        hour = '', 
                        success = 1.337, 
                        error = 1.337, 
                        total = 1.337, )
                    ],
                timestamp = '',
        )
        """

    def testOAuthAnalyticsResponse(self):
        """Test OAuthAnalyticsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
