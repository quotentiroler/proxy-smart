# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from api_client.models.post_proxy_smart_backend_by_server_name_by_fhir_version_cache_refresh200_response import PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response

class TestPostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response(unittest.TestCase):
    """PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response:
        """Test PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response`
        """
        model = PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response()
        if include_optional:
            return PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response(
                success = True,
                message = '',
                server_info = api_client.models.post_proxy_smart_backend_by_server_name_by_fhir_version_cache_refresh_200_response_server_info.postProxy_smart_backendByServer_nameByFhir_versionCacheRefresh_200_response_serverInfo(
                    fhir_version = '', 
                    server_version = '', 
                    server_name = '', 
                    supported = True, )
            )
        else:
            return PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response(
                success = True,
                message = '',
                server_info = api_client.models.post_proxy_smart_backend_by_server_name_by_fhir_version_cache_refresh_200_response_server_info.postProxy_smart_backendByServer_nameByFhir_versionCacheRefresh_200_response_serverInfo(
                    fhir_version = '', 
                    server_version = '', 
                    server_name = '', 
                    supported = True, ),
        )
        """

    def testPostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response(self):
        """Test PostProxySmartBackendByServerNameByFhirVersionCacheRefresh200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
