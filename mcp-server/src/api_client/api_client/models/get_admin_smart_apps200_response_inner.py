# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetAdminSmartApps200ResponseInner(BaseModel):
    """
    GetAdminSmartApps200ResponseInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Client ID")
    client_id: Optional[StrictStr] = Field(default=None, description="Client identifier", alias="clientId")
    name: Optional[StrictStr] = Field(default=None, description="Application name")
    description: Optional[StrictStr] = Field(default=None, description="Application description")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether app is enabled")
    protocol: Optional[StrictStr] = Field(default=None, description="OAuth protocol")
    public_client: Optional[StrictBool] = Field(default=None, description="Whether app is public client", alias="publicClient")
    redirect_uris: Optional[List[StrictStr]] = Field(default=None, alias="redirectUris")
    web_origins: Optional[List[StrictStr]] = Field(default=None, alias="webOrigins")
    attributes: Optional[Dict[str, Any]] = None
    client_authenticator_type: Optional[StrictStr] = Field(default=None, description="Client authentication method (client-jwt, client-secret, none)", alias="clientAuthenticatorType")
    service_accounts_enabled: Optional[StrictBool] = Field(default=None, description="Whether service accounts (client_credentials) are enabled", alias="serviceAccountsEnabled")
    standard_flow_enabled: Optional[StrictBool] = Field(default=None, description="Whether authorization code flow is enabled", alias="standardFlowEnabled")
    implicit_flow_enabled: Optional[StrictBool] = Field(default=None, description="Whether implicit flow is enabled", alias="implicitFlowEnabled")
    direct_access_grants_enabled: Optional[StrictBool] = Field(default=None, description="Whether password grants are enabled", alias="directAccessGrantsEnabled")
    default_client_scopes: Optional[List[StrictStr]] = Field(default=None, description="Default OAuth scopes", alias="defaultClientScopes")
    optional_client_scopes: Optional[List[StrictStr]] = Field(default=None, description="Optional OAuth scopes", alias="optionalClientScopes")
    access: Optional[Dict[str, Any]] = Field(default=None, description="Access permissions")
    __properties: ClassVar[List[str]] = ["id", "clientId", "name", "description", "enabled", "protocol", "publicClient", "redirectUris", "webOrigins", "attributes", "clientAuthenticatorType", "serviceAccountsEnabled", "standardFlowEnabled", "implicitFlowEnabled", "directAccessGrantsEnabled", "defaultClientScopes", "optionalClientScopes", "access"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAdminSmartApps200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdminSmartApps200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "clientId": obj.get("clientId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "protocol": obj.get("protocol"),
            "publicClient": obj.get("publicClient"),
            "redirectUris": obj.get("redirectUris"),
            "webOrigins": obj.get("webOrigins"),
            "attributes": obj.get("attributes"),
            "clientAuthenticatorType": obj.get("clientAuthenticatorType"),
            "serviceAccountsEnabled": obj.get("serviceAccountsEnabled"),
            "standardFlowEnabled": obj.get("standardFlowEnabled"),
            "implicitFlowEnabled": obj.get("implicitFlowEnabled"),
            "directAccessGrantsEnabled": obj.get("directAccessGrantsEnabled"),
            "defaultClientScopes": obj.get("defaultClientScopes"),
            "optionalClientScopes": obj.get("optionalClientScopes"),
            "access": obj.get("access")
        })
        return _obj


