# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from api_client.models.post_auth_token200_response_fhir_context_inner import PostAuthToken200ResponseFhirContextInner
from typing import Optional, Set
from typing_extensions import Self

class PostAuthToken200ResponseAuthorizationDetailsInner(BaseModel):
    """
    PostAuthToken200ResponseAuthorizationDetailsInner
    """ # noqa: E501
    type: StrictStr = Field(description="Authorization details type (smart_on_fhir)")
    locations: List[StrictStr]
    fhir_versions: List[StrictStr] = Field(alias="fhirVersions")
    scope: Optional[StrictStr] = Field(default=None, description="Space-separated SMART scopes for these locations")
    patient: Optional[StrictStr] = Field(default=None, description="Patient context for these locations")
    encounter: Optional[StrictStr] = Field(default=None, description="Encounter context for these locations")
    fhir_context: Optional[List[PostAuthToken200ResponseFhirContextInner]] = Field(default=None, description="FHIR context for these locations", alias="fhirContext")
    __properties: ClassVar[List[str]] = ["type", "locations", "fhirVersions", "scope", "patient", "encounter", "fhirContext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAuthToken200ResponseAuthorizationDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fhir_context (list)
        _items = []
        if self.fhir_context:
            for _item_fhir_context in self.fhir_context:
                if _item_fhir_context:
                    _items.append(_item_fhir_context.to_dict())
            _dict['fhirContext'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAuthToken200ResponseAuthorizationDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "locations": obj.get("locations"),
            "fhirVersions": obj.get("fhirVersions"),
            "scope": obj.get("scope"),
            "patient": obj.get("patient"),
            "encounter": obj.get("encounter"),
            "fhirContext": [PostAuthToken200ResponseFhirContextInner.from_dict(_item) for _item in obj["fhirContext"]] if obj.get("fhirContext") is not None else None
        })
        return _obj


