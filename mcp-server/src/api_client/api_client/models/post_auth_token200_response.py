# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from api_client.models.post_auth_token200_response_authorization_details_inner import PostAuthToken200ResponseAuthorizationDetailsInner
from api_client.models.post_auth_token200_response_fhir_context_inner import PostAuthToken200ResponseFhirContextInner
from typing import Optional, Set
from typing_extensions import Self

class PostAuthToken200Response(BaseModel):
    """
    PostAuthToken200Response
    """ # noqa: E501
    access_token: Optional[StrictStr] = Field(default=None, description="JWT access token")
    token_type: Optional[StrictStr] = Field(default=None, description="Token type (Bearer)")
    expires_in: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Token expiration time in seconds")
    refresh_token: Optional[StrictStr] = Field(default=None, description="Refresh token")
    refresh_expires_in: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Refresh token expiration time in seconds")
    id_token: Optional[StrictStr] = Field(default=None, description="OpenID Connect ID token")
    scope: Optional[StrictStr] = Field(default=None, description="Granted scopes")
    session_state: Optional[StrictStr] = Field(default=None, description="Keycloak session state")
    not_before_policy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Not before policy timestamp", alias="not-before-policy")
    patient: Optional[StrictStr] = Field(default=None, description="Patient in context (e.g., Patient/123)")
    encounter: Optional[StrictStr] = Field(default=None, description="Encounter in context (e.g., Encounter/456)")
    fhir_user: Optional[StrictStr] = Field(default=None, description="FHIR user resource (e.g., Practitioner/789)", alias="fhirUser")
    fhir_context: Optional[List[PostAuthToken200ResponseFhirContextInner]] = Field(default=None, description="Additional FHIR resources in context", alias="fhirContext")
    intent: Optional[StrictStr] = Field(default=None, description="Launch intent (e.g., reconcile-medications)")
    smart_style_url: Optional[StrictStr] = Field(default=None, description="URL to CSS stylesheet for styling")
    tenant: Optional[StrictStr] = Field(default=None, description="Tenant identifier")
    need_patient_banner: Optional[StrictBool] = Field(default=None, description="Whether patient banner is required")
    authorization_details: Optional[List[PostAuthToken200ResponseAuthorizationDetailsInner]] = Field(default=None, description="Authorization details for multiple FHIR servers")
    error: Optional[StrictStr] = Field(default=None, description="Error code if request failed")
    error_description: Optional[StrictStr] = Field(default=None, description="Error description if request failed")
    __properties: ClassVar[List[str]] = ["access_token", "token_type", "expires_in", "refresh_token", "refresh_expires_in", "id_token", "scope", "session_state", "not-before-policy", "patient", "encounter", "fhirUser", "fhirContext", "intent", "smart_style_url", "tenant", "need_patient_banner", "authorization_details", "error", "error_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAuthToken200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fhir_context (list)
        _items = []
        if self.fhir_context:
            for _item_fhir_context in self.fhir_context:
                if _item_fhir_context:
                    _items.append(_item_fhir_context.to_dict())
            _dict['fhirContext'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorization_details (list)
        _items = []
        if self.authorization_details:
            for _item_authorization_details in self.authorization_details:
                if _item_authorization_details:
                    _items.append(_item_authorization_details.to_dict())
            _dict['authorization_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAuthToken200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_token": obj.get("access_token"),
            "token_type": obj.get("token_type"),
            "expires_in": obj.get("expires_in"),
            "refresh_token": obj.get("refresh_token"),
            "refresh_expires_in": obj.get("refresh_expires_in"),
            "id_token": obj.get("id_token"),
            "scope": obj.get("scope"),
            "session_state": obj.get("session_state"),
            "not-before-policy": obj.get("not-before-policy"),
            "patient": obj.get("patient"),
            "encounter": obj.get("encounter"),
            "fhirUser": obj.get("fhirUser"),
            "fhirContext": [PostAuthToken200ResponseFhirContextInner.from_dict(_item) for _item in obj["fhirContext"]] if obj.get("fhirContext") is not None else None,
            "intent": obj.get("intent"),
            "smart_style_url": obj.get("smart_style_url"),
            "tenant": obj.get("tenant"),
            "need_patient_banner": obj.get("need_patient_banner"),
            "authorization_details": [PostAuthToken200ResponseAuthorizationDetailsInner.from_dict(_item) for _item in obj["authorization_details"]] if obj.get("authorization_details") is not None else None,
            "error": obj.get("error"),
            "error_description": obj.get("error_description")
        })
        return _obj


