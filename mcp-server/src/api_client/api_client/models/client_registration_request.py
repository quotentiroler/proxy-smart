# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ClientRegistrationRequest(BaseModel):
    """
    ClientRegistrationRequest
    """ # noqa: E501
    redirect_uris: List[StrictStr] = Field(description="Array of redirect URIs for the client")
    client_name: Optional[StrictStr] = Field(default=None, description="Human-readable client name")
    client_uri: Optional[StrictStr] = Field(default=None, description="Client home page URL")
    logo_uri: Optional[StrictStr] = Field(default=None, description="Client logo URL")
    scope: Optional[StrictStr] = Field(default=None, description="Requested scopes (space-separated)")
    contacts: Optional[List[StrictStr]] = Field(default=None, description="Contact email addresses")
    tos_uri: Optional[StrictStr] = Field(default=None, description="Terms of service URL")
    policy_uri: Optional[StrictStr] = Field(default=None, description="Privacy policy URL")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="JWKS endpoint URL")
    jwks: Optional[Dict[str, Any]] = Field(default=None, description="JSON Web Key Set")
    software_id: Optional[StrictStr] = Field(default=None, description="Software identifier")
    software_version: Optional[StrictStr] = Field(default=None, description="Software version")
    fhir_versions: Optional[List[StrictStr]] = Field(default=None, description="Supported FHIR versions")
    launch_uris: Optional[List[StrictStr]] = Field(default=None, description="EHR launch URLs")
    __properties: ClassVar[List[str]] = ["redirect_uris", "client_name", "client_uri", "logo_uri", "scope", "contacts", "tos_uri", "policy_uri", "jwks_uri", "jwks", "software_id", "software_version", "fhir_versions", "launch_uris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientRegistrationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientRegistrationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "redirect_uris": obj.get("redirect_uris"),
            "client_name": obj.get("client_name"),
            "client_uri": obj.get("client_uri"),
            "logo_uri": obj.get("logo_uri"),
            "scope": obj.get("scope"),
            "contacts": obj.get("contacts"),
            "tos_uri": obj.get("tos_uri"),
            "policy_uri": obj.get("policy_uri"),
            "jwks_uri": obj.get("jwks_uri"),
            "jwks": obj.get("jwks"),
            "software_id": obj.get("software_id"),
            "software_version": obj.get("software_version"),
            "fhir_versions": obj.get("fhir_versions"),
            "launch_uris": obj.get("launch_uris")
        })
        return _obj


