# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from api_client.models.alert_info import AlertInfo
from api_client.models.monitoring_health_response_network import MonitoringHealthResponseNetwork
from api_client.models.monitoring_health_response_oauth_server import MonitoringHealthResponseOauthServer
from api_client.models.monitoring_health_response_token_store import MonitoringHealthResponseTokenStore
from typing import Optional, Set
from typing_extensions import Self

class MonitoringHealthResponse(BaseModel):
    """
    MonitoringHealthResponse
    """ # noqa: E501
    oauth_server: MonitoringHealthResponseOauthServer = Field(alias="oauthServer")
    token_store: MonitoringHealthResponseTokenStore = Field(alias="tokenStore")
    network: MonitoringHealthResponseNetwork
    alerts: List[AlertInfo] = Field(description="System alerts")
    timestamp: StrictStr = Field(description="Timestamp (ISO 8601)")
    __properties: ClassVar[List[str]] = ["oauthServer", "tokenStore", "network", "alerts", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MonitoringHealthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth_server
        if self.oauth_server:
            _dict['oauthServer'] = self.oauth_server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_store
        if self.token_store:
            _dict['tokenStore'] = self.token_store.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network
        if self.network:
            _dict['network'] = self.network.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in alerts (list)
        _items = []
        if self.alerts:
            for _item_alerts in self.alerts:
                if _item_alerts:
                    _items.append(_item_alerts.to_dict())
            _dict['alerts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MonitoringHealthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "oauthServer": MonitoringHealthResponseOauthServer.from_dict(obj["oauthServer"]) if obj.get("oauthServer") is not None else None,
            "tokenStore": MonitoringHealthResponseTokenStore.from_dict(obj["tokenStore"]) if obj.get("tokenStore") is not None else None,
            "network": MonitoringHealthResponseNetwork.from_dict(obj["network"]) if obj.get("network") is not None else None,
            "alerts": [AlertInfo.from_dict(_item) for _item in obj["alerts"]] if obj.get("alerts") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj


