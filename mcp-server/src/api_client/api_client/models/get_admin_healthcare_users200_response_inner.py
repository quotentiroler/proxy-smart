# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetAdminHealthcareUsers200ResponseInner(BaseModel):
    """
    GetAdminHealthcareUsers200ResponseInner
    """ # noqa: E501
    id: StrictStr = Field(description="User ID")
    username: StrictStr = Field(description="Username")
    email: StrictStr = Field(description="Email address")
    first_name: StrictStr = Field(description="First name", alias="firstName")
    last_name: StrictStr = Field(description="Last name", alias="lastName")
    enabled: StrictBool = Field(description="Whether user is enabled")
    attributes: Optional[Dict[str, Any]] = None
    created_timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Creation timestamp", alias="createdTimestamp")
    last_login: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lastLogin")
    realm_roles: Optional[List[StrictStr]] = Field(default=None, description="Keycloak realm roles", alias="realmRoles")
    client_roles: Optional[Dict[str, Any]] = Field(default=None, description="Keycloak client roles", alias="clientRoles")
    organization: Optional[StrictStr] = Field(default=None, description="Organization")
    fhir_user: Optional[StrictStr] = Field(default=None, description="FHIR User identifier", alias="fhirUser")
    __properties: ClassVar[List[str]] = ["id", "username", "email", "firstName", "lastName", "enabled", "attributes", "createdTimestamp", "lastLogin", "realmRoles", "clientRoles", "organization", "fhirUser"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAdminHealthcareUsers200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_login (nullable) is None
        # and model_fields_set contains the field
        if self.last_login is None and "last_login" in self.model_fields_set:
            _dict['lastLogin'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdminHealthcareUsers200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "enabled": obj.get("enabled"),
            "attributes": obj.get("attributes"),
            "createdTimestamp": obj.get("createdTimestamp"),
            "lastLogin": obj.get("lastLogin"),
            "realmRoles": obj.get("realmRoles"),
            "clientRoles": obj.get("clientRoles"),
            "organization": obj.get("organization"),
            "fhirUser": obj.get("fhirUser")
        })
        return _obj


