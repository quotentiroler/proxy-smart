# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from api_client.models.get_monitoring_oauth_events200_response_events_inner_fhir_context import GetMonitoringOauthEvents200ResponseEventsInnerFhirContext
from typing import Optional, Set
from typing_extensions import Self

class GetMonitoringOauthEvents200ResponseEventsInner(BaseModel):
    """
    GetMonitoringOauthEvents200ResponseEventsInner
    """ # noqa: E501
    id: StrictStr
    timestamp: StrictStr
    type: StrictStr
    status: StrictStr
    client_id: StrictStr = Field(alias="clientId")
    client_name: Optional[StrictStr] = Field(default=None, alias="clientName")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    user_name: Optional[StrictStr] = Field(default=None, alias="userName")
    scopes: List[StrictStr]
    grant_type: StrictStr = Field(alias="grantType")
    response_time: Union[StrictFloat, StrictInt] = Field(alias="responseTime")
    ip_address: StrictStr = Field(alias="ipAddress")
    user_agent: StrictStr = Field(alias="userAgent")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    error_code: Optional[StrictStr] = Field(default=None, alias="errorCode")
    token_type: Optional[StrictStr] = Field(default=None, alias="tokenType")
    expires_in: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expiresIn")
    refresh_token: Optional[StrictBool] = Field(default=None, alias="refreshToken")
    fhir_context: Optional[GetMonitoringOauthEvents200ResponseEventsInnerFhirContext] = Field(default=None, alias="fhirContext")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "type", "status", "clientId", "clientName", "userId", "userName", "scopes", "grantType", "responseTime", "ipAddress", "userAgent", "errorMessage", "errorCode", "tokenType", "expiresIn", "refreshToken", "fhirContext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMonitoringOauthEvents200ResponseEventsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fhir_context
        if self.fhir_context:
            _dict['fhirContext'] = self.fhir_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMonitoringOauthEvents200ResponseEventsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "clientId": obj.get("clientId"),
            "clientName": obj.get("clientName"),
            "userId": obj.get("userId"),
            "userName": obj.get("userName"),
            "scopes": obj.get("scopes"),
            "grantType": obj.get("grantType"),
            "responseTime": obj.get("responseTime"),
            "ipAddress": obj.get("ipAddress"),
            "userAgent": obj.get("userAgent"),
            "errorMessage": obj.get("errorMessage"),
            "errorCode": obj.get("errorCode"),
            "tokenType": obj.get("tokenType"),
            "expiresIn": obj.get("expiresIn"),
            "refreshToken": obj.get("refreshToken"),
            "fhirContext": GetMonitoringOauthEvents200ResponseEventsInnerFhirContext.from_dict(obj["fhirContext"]) if obj.get("fhirContext") is not None else None
        })
        return _obj


