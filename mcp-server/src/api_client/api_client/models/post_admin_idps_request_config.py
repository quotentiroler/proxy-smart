# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PostAdminIdpsRequestConfig(BaseModel):
    """
    PostAdminIdpsRequestConfig
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    entity_id: Optional[StrictStr] = Field(default=None, alias="entityId")
    single_sign_on_service_url: Optional[StrictStr] = Field(default=None, alias="singleSignOnServiceUrl")
    single_logout_service_url: Optional[StrictStr] = Field(default=None, alias="singleLogoutServiceUrl")
    metadata_descriptor_url: Optional[StrictStr] = Field(default=None, alias="metadataDescriptorUrl")
    enabled: Optional[StrictBool] = None
    client_secret: Optional[StrictStr] = Field(default=None, alias="clientSecret")
    token_url: Optional[StrictStr] = Field(default=None, alias="tokenUrl")
    user_info_url: Optional[StrictStr] = Field(default=None, alias="userInfoUrl")
    issuer: Optional[StrictStr] = None
    default_scopes: Optional[StrictStr] = Field(default=None, alias="defaultScopes")
    logout_url: Optional[StrictStr] = Field(default=None, alias="logoutUrl")
    signature_algorithm: Optional[StrictStr] = Field(default=None, alias="signatureAlgorithm")
    name_id_policy_format: Optional[StrictStr] = Field(default=None, alias="nameIdPolicyFormat")
    signing_certificate: Optional[StrictStr] = Field(default=None, alias="signingCertificate")
    validate_signature: Optional[StrictBool] = Field(default=None, alias="validateSignature")
    want_authn_requests_signed: Optional[StrictBool] = Field(default=None, alias="wantAuthnRequestsSigned")
    additional_config: Optional[Dict[str, Any]] = Field(default=None, alias="additionalConfig")
    __properties: ClassVar[List[str]] = ["displayName", "entityId", "singleSignOnServiceUrl", "singleLogoutServiceUrl", "metadataDescriptorUrl", "enabled", "clientSecret", "tokenUrl", "userInfoUrl", "issuer", "defaultScopes", "logoutUrl", "signatureAlgorithm", "nameIdPolicyFormat", "signingCertificate", "validateSignature", "wantAuthnRequestsSigned", "additionalConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostAdminIdpsRequestConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostAdminIdpsRequestConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "entityId": obj.get("entityId"),
            "singleSignOnServiceUrl": obj.get("singleSignOnServiceUrl"),
            "singleLogoutServiceUrl": obj.get("singleLogoutServiceUrl"),
            "metadataDescriptorUrl": obj.get("metadataDescriptorUrl"),
            "enabled": obj.get("enabled"),
            "clientSecret": obj.get("clientSecret"),
            "tokenUrl": obj.get("tokenUrl"),
            "userInfoUrl": obj.get("userInfoUrl"),
            "issuer": obj.get("issuer"),
            "defaultScopes": obj.get("defaultScopes"),
            "logoutUrl": obj.get("logoutUrl"),
            "signatureAlgorithm": obj.get("signatureAlgorithm"),
            "nameIdPolicyFormat": obj.get("nameIdPolicyFormat"),
            "signingCertificate": obj.get("signingCertificate"),
            "validateSignature": obj.get("validateSignature"),
            "wantAuthnRequestsSigned": obj.get("wantAuthnRequestsSigned"),
            "additionalConfig": obj.get("additionalConfig")
        })
        return _obj


