# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-alpha.202510130118.b027dfe
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from api_client.models.get_monitoring_oauth_analytics200_response_hourly_stats_inner import GetMonitoringOauthAnalytics200ResponseHourlyStatsInner
from api_client.models.get_monitoring_oauth_analytics200_response_top_clients_inner import GetMonitoringOauthAnalytics200ResponseTopClientsInner
from typing import Optional, Set
from typing_extensions import Self

class GetMonitoringOauthAnalytics200Response(BaseModel):
    """
    GetMonitoringOauthAnalytics200Response
    """ # noqa: E501
    total_flows: Union[StrictFloat, StrictInt] = Field(alias="totalFlows")
    success_rate: Union[StrictFloat, StrictInt] = Field(alias="successRate")
    average_response_time: Union[StrictFloat, StrictInt] = Field(alias="averageResponseTime")
    active_tokens: Union[StrictFloat, StrictInt] = Field(alias="activeTokens")
    top_clients: List[GetMonitoringOauthAnalytics200ResponseTopClientsInner] = Field(alias="topClients")
    flows_by_type: Dict[str, Any] = Field(alias="flowsByType")
    errors_by_type: Dict[str, Any] = Field(alias="errorsByType")
    hourly_stats: List[GetMonitoringOauthAnalytics200ResponseHourlyStatsInner] = Field(alias="hourlyStats")
    timestamp: StrictStr
    __properties: ClassVar[List[str]] = ["totalFlows", "successRate", "averageResponseTime", "activeTokens", "topClients", "flowsByType", "errorsByType", "hourlyStats", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMonitoringOauthAnalytics200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in top_clients (list)
        _items = []
        if self.top_clients:
            for _item_top_clients in self.top_clients:
                if _item_top_clients:
                    _items.append(_item_top_clients.to_dict())
            _dict['topClients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hourly_stats (list)
        _items = []
        if self.hourly_stats:
            for _item_hourly_stats in self.hourly_stats:
                if _item_hourly_stats:
                    _items.append(_item_hourly_stats.to_dict())
            _dict['hourlyStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMonitoringOauthAnalytics200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalFlows": obj.get("totalFlows"),
            "successRate": obj.get("successRate"),
            "averageResponseTime": obj.get("averageResponseTime"),
            "activeTokens": obj.get("activeTokens"),
            "topClients": [GetMonitoringOauthAnalytics200ResponseTopClientsInner.from_dict(_item) for _item in obj["topClients"]] if obj.get("topClients") is not None else None,
            "flowsByType": obj.get("flowsByType"),
            "errorsByType": obj.get("errorsByType"),
            "hourlyStats": [GetMonitoringOauthAnalytics200ResponseHourlyStatsInner.from_dict(_item) for _item in obj["hourlyStats"]] if obj.get("hourlyStats") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj


