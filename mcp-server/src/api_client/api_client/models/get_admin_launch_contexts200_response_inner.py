# coding: utf-8

"""
    Proxy Smart

    SMART on FHIR Proxy + Healthcare Administration API using Keycloak and Elysia

    The version of the OpenAPI document: 0.0.1-beta.202508171209.d59444a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class GetAdminLaunchContexts200ResponseInner(BaseModel):
    """
    GetAdminLaunchContexts200ResponseInner
    """ # noqa: E501
    user_id: StrictStr = Field(description="User ID", alias="userId")
    username: StrictStr = Field(description="Username")
    fhir_user: StrictStr = Field(description="FHIR resource representing the current user (e.g., Practitioner/123)", alias="fhirUser")
    patient: StrictStr = Field(description="Patient context (e.g., Patient/456)")
    encounter: StrictStr = Field(description="Encounter context (e.g., Encounter/789)")
    fhir_context: StrictStr = Field(description="Additional FHIR resources in context (JSON array)", alias="fhirContext")
    intent: StrictStr = Field(description="Intent string (e.g., reconcile-medications)")
    smart_style_url: StrictStr = Field(description="URL to CSS stylesheet for styling", alias="smartStyleUrl")
    tenant: StrictStr = Field(description="Tenant identifier")
    need_patient_banner: StrictBool = Field(description="Whether patient banner is required", alias="needPatientBanner")
    launch_patient: StrictStr = Field(description="Legacy patient context", alias="launchPatient")
    launch_encounter: StrictStr = Field(description="Legacy encounter context", alias="launchEncounter")
    __properties: ClassVar[List[str]] = ["userId", "username", "fhirUser", "patient", "encounter", "fhirContext", "intent", "smartStyleUrl", "tenant", "needPatientBanner", "launchPatient", "launchEncounter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAdminLaunchContexts200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAdminLaunchContexts200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "username": obj.get("username"),
            "fhirUser": obj.get("fhirUser"),
            "patient": obj.get("patient"),
            "encounter": obj.get("encounter"),
            "fhirContext": obj.get("fhirContext"),
            "intent": obj.get("intent"),
            "smartStyleUrl": obj.get("smartStyleUrl"),
            "tenant": obj.get("tenant"),
            "needPatientBanner": obj.get("needPatientBanner"),
            "launchPatient": obj.get("launchPatient"),
            "launchEncounter": obj.get("launchEncounter")
        })
        return _obj


